{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introducing SedonaDB","text":"<p>SedonaDB is an open-source single-node analytical database engine with geospatial as a first-class citizen. It aims to deliver the fastest spatial analytics query speed and the most comprehensive function coverage available.</p> <p>SedonaDB is perfect for processing smaller to medium datasets on local machines or cloud instances. For distributed workloads, you can leverage the power of SedonaSpark, SedonaFlink, or SedonaSnow.</p>"},{"location":"#architecture","title":"Architecture","text":"<ul> <li> <p>Columnar in-memory datasets</p> <ul> <li>Spatial indexing</li> <li>Spatial statistics</li> <li>CRS tracking</li> <li>Arrow format and zero serialization overhead</li> </ul> </li> <li> <p>Spatial query optimization</p> <ul> <li>Spatial-aware heuristic based optimization</li> <li>Spatial-aware cost based optimization</li> </ul> </li> <li> <p>Spatial query processing</p> <ul> <li>Spatial range query, KNN query, spatial join query, KNN join query</li> <li>Map algebra, NDVI, mask, zonal statistics</li> </ul> </li> </ul> <p>Raster functions are coming soon. We expect SedonaDB Raster will match all raster functions provided in SedonaSpark.</p>"},{"location":"#key-features","title":"Key features","text":"<p>SedonaDB has several advantages:</p> <ul> <li>\ud83d\ude80 High Performance: Built in Rust for exceptional speed and memory efficiency</li> <li>\ud83d\uddfa\ufe0f Comprehensive Spatial Toolkit: Supports both vector and raster functions in a single library</li> <li>\ud83c\udf0d CRS Propagation: Always maintains coordinate reference system information</li> <li>\ud83d\udcc1 Format Flexibility: Supports legacy and modern file formats including GeoParquet, Shapefile, GeoJSON</li> <li>\u26a1 Dual APIs: Python and SQL interfaces for seamless workflow integration</li> <li>\ud83d\udd27 Extensible: Easily customizable and extensible architecture</li> <li>\ud83d\udd17 Ecosystem Integration: Interoperable with PyArrow-compatible libraries like GeoPandas, DuckDB, and Polars</li> </ul>"},{"location":"#performance-benchmarks","title":"Performance Benchmarks","text":"<p>This is a performance benchmark comparing SedonaDB 0.1.0, DuckDB 1.4.0, and GeoPandas 1.1.1 using SpatialBench Queries 1-12 at Scale Factors 1 and 10. Details can be found at Apache Sedona SpatialBench.</p>"},{"location":"#install-sedonadb","title":"Install SedonaDB","text":"<p>Here's how to install SedonaDB with various build tools:</p> pipR <pre><code>pip install \"apache-sedona[db]\"\n</code></pre> <pre><code>install.packages(\"sedonadb\", repos = \"https://community.r-multiverse.org\")\n</code></pre>"},{"location":"#run-a-query","title":"Run a query","text":"<p>SedonaDB offers a flexible query interface.</p> PythonR <pre><code>import sedona.db\n\nsd = sedona.db.connect()\nsd.sql(\"SELECT ST_Point(0, 1) as geom\")\n</code></pre> <pre><code>library(sedonadb)\n\nsd_sql(\"SELECT ST_Point(0, 1) as geom\")\n</code></pre>"},{"location":"#have-questions","title":"Have questions?","text":"<p>Start a GitHub Discussion or join the Discord community and ask the developers any questions you may have.</p> <p>We look forward to collaborating with you!</p>"},{"location":"contributors-guide/","title":"Contributors Guide","text":""},{"location":"contributors-guide/#contributors-guide","title":"Contributors Guide","text":"<p>This guide details how to set up your development environment as a SedonaDB Contributor.</p>"},{"location":"contributors-guide/#fork-and-clone-the-repository","title":"Fork and clone the repository","text":"<p>Your first step is to create a personal copy of the repository and connect it to the main project.</p> <ol> <li> <p>Fork the repository</p> <ul> <li>Navigate to the official SedonaDB GitHub repository.</li> <li>Click the Fork button in the top-right corner. This creates a complete copy of the project in your own GitHub account.</li> </ul> </li> <li> <p>Clone your fork</p> <ul> <li>Next, clone your newly created fork to your local machine. This command downloads the repository into a new folder named <code>sedona-db</code>.</li> <li> <p>Replace <code>YourUsername</code> with your actual GitHub username.</p> <pre><code>git clone https://github.com/YourUsername/sedona-db.git\ncd sedona-db\n</code></pre> </li> </ul> </li> <li> <p>Configure the remotes</p> <ul> <li>Your local repository needs to know where the original project is so you can pull in updates. You'll add a remote link, traditionally named <code>upstream</code>, to the main SedonaDB repository.</li> <li> <p>Your fork is automatically configured as the <code>origin</code> remote.</p> <pre><code># Add the main repository as the \"upstream\" remote\ngit remote add upstream https://github.com/apache/sedona-db.git\n</code></pre> </li> </ul> </li> <li> <p>Verify the configuration</p> <ul> <li> <p>Run the following command to verify that you have two remotes configured correctly: <code>origin</code> (your fork) and <code>upstream</code> (the main repository).</p> <pre><code>git remote -v\n</code></pre> </li> <li> <p>The output should look like this:</p> <pre><code>origin    https://github.com/YourUsername/sedona-db.git (fetch)\norigin    https://github.com/YourUsername/sedona-db.git (push)\nupstream  https://github.com/apache/sedona-db.git (fetch)\nupstream  https://github.com/apache/sedona-db.git (push)\n</code></pre> </li> </ul> </li> </ol>"},{"location":"contributors-guide/#rust","title":"Rust","text":"<p>SedonaDB is written in Rust and is a standard <code>cargo</code> workspace.</p> <p>You can install a recent version of the Rust compiler and cargo from rustup.rs and run tests using <code>cargo test</code>.</p> <p>A local development version of the CLI can be run with <code>cargo run --bin sedona-cli</code>.</p>"},{"location":"contributors-guide/#test-data-setup","title":"Test data setup","text":"<p>Some tests require submodules that contain test data or pinned versions of external dependencies. These submodules can be initialized with:</p> <pre><code>git submodule init\ngit submodule update --recursive\n</code></pre> <p>Additionally, some of the data required in the tests can be downloaded by running the following script.</p> <pre><code>python submodules/download-assets.py\n</code></pre>"},{"location":"contributors-guide/#system-dependencies","title":"System dependencies","text":"<p>Some crates wrap external native libraries and require system dependencies to build.</p> <p><code>sedona-s2geography</code></p> <p>At this time, the only crate that requires this is the <code>sedona-s2geography</code> crate, which requires CMake, Abseil and OpenSSL.</p>"},{"location":"contributors-guide/#macos","title":"macOS","text":"<p>These can be installed on macOS with Homebrew:</p> <pre><code>brew install abseil openssl cmake geos\n</code></pre>"},{"location":"contributors-guide/#linux-and-windows","title":"Linux and Windows","text":"<p>On Linux and Windows, it is recommended to use vcpkg to provide external dependencies. This can be done by setting the <code>CMAKE_TOOLCHAIN_FILE</code> environment variable:</p> <pre><code>export CMAKE_TOOLCHAIN_FILE=/path/to/vcpkg/scripts/buildsystems/vcpkg.cmake\n</code></pre>"},{"location":"contributors-guide/#visual-studio-code-vscode-configuration","title":"Visual Studio Code (VSCode) Configuration","text":"<p>When using VSCode, it may be necessary to set this environment variable in <code>settings.json</code> such that it can be found by rust-analyzer when running build/run tasks:</p> <pre><code>{\n    \"rust-analyzer.runnables.extraEnv\": {\n        \"CMAKE_TOOLCHAIN_FILE\": \"/path/to/vcpkg/scripts/buildsystems/vcpkg.cmake\"\n    },\n    \"rust-analyzer.cargo.extraEnv\": {\n        \"CMAKE_TOOLCHAIN_FILE\": \"/path/to/vcpkg/scripts/buildsystems/vcpkg.cmake\"\n    }\n}\n</code></pre>"},{"location":"contributors-guide/#python","title":"Python","text":"<p>Python bindings to SedonaDB are built with the Maturin build backend.</p> <p>To install a development version of the main Python bindings for the first time, run the following commands:</p> <pre><code>cd python/sedonadb\npip install -e \".[test]\"\n</code></pre> <p>If editing Rust code in either SedonaDB or the Python bindings, you can recompile the native component with:</p> <pre><code>maturin develop\n</code></pre>"},{"location":"contributors-guide/#debugging","title":"Debugging","text":""},{"location":"contributors-guide/#rust_1","title":"Rust","text":"<p>Debugging Rust code is most easily done by writing or finding a test that triggers the desired behavior and running it using the Debug selection in VSCode with the rust-analyzer extension. Rust code can also be debugged using the CLI by finding the <code>main()</code> function in <code>sedona-cli</code> and choosing the Debug run option.</p>"},{"location":"contributors-guide/#python-c-and-c","title":"Python, C, and C++","text":"<p>Installation of Python bindings with <code>maturin develop</code> ensures a debug-friendly build for debugging Rust, Python, or C/C++ code. Python code can be debugged using breakpoints in any IDE that supports debugging an editable Python package installation (e.g., VSCode); Rust, C, or C++ code can be debugged using the CodeLLDB Attach to Process... command from the command palette in VSCode.</p>"},{"location":"contributors-guide/#low-level-benchmarking","title":"Low-level benchmarking","text":"<p>Low-level Rust benchmarks use criterion. In general, there is at least one benchmark for every implementation of a function (some functions have more than one implementation provided by different libraries), and a few other benchmarks for low-level iteration where work was done to optimize specific cases.</p>"},{"location":"contributors-guide/#running-benchmarks","title":"Running benchmarks","text":"<p>Benchmarks for a specific crate can be run with <code>cargo bench</code>:</p> <pre><code>cd rust/sedona-geo\ncargo bench\n</code></pre> <p>Benchmarks for a specific function can be run with a filter. These can be run from the workspace or a specific crate (although the output is usually easier to read for a specific crate).</p> <pre><code>cargo bench -- st_area\n</code></pre>"},{"location":"contributors-guide/#managing-results","title":"Managing results","text":"<p>By default, criterion saves the last run and will report the difference between the current benchmark and the last time it was run (although there are options to save and load various baselines).</p> <p>A report of the latest results for all benchmarks can be opened with the following command:</p> macOSUbuntu <pre><code>open target/criterion/report/index.html\n</code></pre> <pre><code>xdg-open target/criterion/report/index.html\n</code></pre> <p>All previous saved benchmark runs can be cleared with:</p> <pre><code>rm -rf target/criterion\n</code></pre>"},{"location":"contributors-guide/#documentation","title":"Documentation","text":"<p>To contribute to the SedonaDB documentation:</p> <ol> <li>Clone the repository and create a fork.</li> <li>Install the Documentation dependencies:     <pre><code>pip install -r docs/requirements.txt\n</code></pre></li> <li>Make your changes to the documentation files.</li> <li>Preview your changes locally using these commands:<ul> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul> </li> <li>Push your changes and open a pull request.</li> </ol>"},{"location":"crs-examples/","title":"CRS Examples","text":""},{"location":"crs-examples/#joining-spatial-data-with-different-coordinate-systems","title":"Joining Spatial Data with Different Coordinate Systems","text":"<p>Note: Before running this notebook, ensure that you have installed SedonaDB: <code>pip install \"apache-sedona[db]\"</code></p> <p>This example demonstrates how one table with an EPSG 4326 CRS cannot be joined with another table that uses EPSG 3857.</p> <p>A Coordinate Reference System (CRS) defines how the two-dimensional coordinates of a map relate to real locations on Earth. Operations like spatial joins, distance calculations, or overlays require all datasets to be in the same CRS to produce accurate results.</p> <p>This notebook demonstrates a key feature of SedonaDB: it protects users from generating incorrect results by raising an error if you attempt to join tables with mismatched coordinate reference systems.</p> <p>We will walk through two examples:</p> <ul> <li> <p>Joining countries (using EPSG:4326, a geographic CRS) and cities (using EPSG:3857, a projected CRS).</p> </li> <li> <p>Finding the number of buildings in Vermont by joining two large datasets with different coordinate reference systems.</p> </li> </ul> <pre><code>import sedona.db\n\nsd = sedona.db.connect()\n</code></pre> <p>Read a table with a geometry column that uses EPSG 4326.</p> <p>Note how SedonaDB reads the CRS specified in the Parquet file.</p> <pre><code>countries = sd.read_parquet(\n    \"https://raw.githubusercontent.com/geoarrow/geoarrow-data/v0.2.0/natural-earth/files/natural-earth_countries_geo.parquet\"\n)\n</code></pre> <pre><code>countries.schema\n</code></pre> <pre><code>SedonaSchema with 3 fields:\n  name: utf8&lt;Utf8View&gt;\n  continent: utf8&lt;Utf8View&gt;\n  geometry: geometry&lt;WkbView(epsg:4326)&gt;\n</code></pre>"},{"location":"crs-examples/#example-1-create-a-cities-table-with-a-projected-crs","title":"Example 1: Create a cities table with a Projected CRS","text":"<p>We will now create a DataFrame containing several major US cities. The coordinates are provided in Web Mercator (EPSG:3857), which uses meters as its unit.</p> <p>We use the <code>ST_SetSRID</code> function to assign the correct CRS identifier to our geometry data. It's important to distinguish between these two key functions:</p> <p><code>ST_SetSRID(geometry, srid)</code>: This function assigns an SRID to a geometry. It does not change the underlying coordinate values. You should only use this when your data has a CRS that SedonaDB was unable to infer.</p> <p><code>ST_Transform(geometry, target_srid)</code>: This function transforms the geometry from its current CRS to a new one. It re-projects the coordinate values themselves.</p> <pre><code>cities = sd.sql(\"\"\"\nSELECT city, ST_SetSRID(ST_GeomFromText(wkt), 3857) AS geometry FROM (VALUES\n    ('New York', 'POINT(-8238310.24 4969803.34)'),\n    ('Los Angeles', 'POINT(-13153204.78 4037636.04)'),\n    ('Chicago', 'POINT(-9757148.04 5138517.44)'))\nAS t(city, wkt)\"\"\")\n</code></pre> <pre><code>cities.schema\n</code></pre> <pre><code>SedonaSchema with 2 fields:\n  city: utf8&lt;Utf8&gt;\n  geometry: geometry&lt;Wkb(epsg:3857)&gt;\n</code></pre> <pre><code>cities.to_view(\"cities\", overwrite=True)\ncountries.to_view(\"countries\", overwrite=True)\n</code></pre>"},{"location":"crs-examples/#join-with-mismatched-coordinate-reference-systems","title":"Join with mismatched Coordinate Reference Systems","text":"<p>The cities and countries tables have different CRSs.</p> <p>The cities table uses EPSG:3857 and the countries table uses EPSG:4326.</p> <p>Let's confirm that the code errors out if we try to join the mismatched tables.</p> <pre><code># join doesn't work when CRSs don't match\nsd.sql(\"\"\"\nselect * from cities\njoin countries\nwhere ST_Intersects(cities.geometry, countries.geometry)\n\"\"\").show()\n</code></pre> <pre><code>---------------------------------------------------------------------------\n\nSedonaError                               Traceback (most recent call last)\n\nCell In[7], line 6\n      1 # join doesn't work when CRSs don't match\n      2 sd.sql(\"\"\"\n      3 select * from cities\n      4 join countries\n      5 where ST_Intersects(cities.geometry, countries.geometry)\n----&gt; 6 \"\"\").show()\n\n\nFile ~/new-sedonadb/sedona-db/python/sedonadb/python/sedonadb/dataframe.py:380, in DataFrame.show(self, limit, width, ascii)\n    356 \"\"\"Print the first limit rows to the console\n    357 \n    358 Args:\n   (...)    377 \n    378 \"\"\"\n    379 width = self._out_width(width)\n--&gt; 380 print(self._impl.show(self._ctx, limit, width, ascii), end=\"\")\n\n\nSedonaError: type_coercion\ncaused by\nError during planning: Mismatched CRS arguments: epsg:3857 vs epsg:4326\nUse ST_Transform() or ST_SetSRID() to ensure arguments are compatible.\n</code></pre>"},{"location":"crs-examples/#convert-crs-and-then-join","title":"Convert CRS and then join","text":"<p>Let's convert the cities table to use EPSG:4326 and then perform the join with the two tables once they have matching CRSs.</p> <pre><code># update cities to use 4326\ncities = sd.sql(\"\"\"\nSELECT city, ST_Transform(geometry, 'EPSG:4326') as geometry\nFROM cities\n\"\"\")\n</code></pre> <pre><code>cities.schema\n</code></pre> <pre><code>SedonaSchema with 2 fields:\n  city: utf8&lt;Utf8&gt;\n  geometry: geometry&lt;Wkb(ogc:crs84)&gt;\n</code></pre> <pre><code>cities.to_view(\"cities\", overwrite=True)\n</code></pre> <pre><code># join works when CRSs match\nsd.sql(\"\"\"\nselect * from cities\njoin countries\nwhere ST_Intersects(cities.geometry, countries.geometry)\n\"\"\").show()\n</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502     city    \u2506       geometry       \u2506         name         \u2506   continent   \u2506       geometry       \u2502\n\u2502     utf8    \u2506       geometry       \u2506         utf8         \u2506      utf8     \u2506       geometry       \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 New York    \u2506 POINT(-74.006000039\u2026 \u2506 United States of Am\u2026 \u2506 North America \u2506 MULTIPOLYGON(((-122\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Los Angeles \u2506 POINT(-118.15724889\u2026 \u2506 United States of Am\u2026 \u2506 North America \u2506 MULTIPOLYGON(((-122\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Chicago     \u2506 POINT(-87.649952137\u2026 \u2506 United States of Am\u2026 \u2506 North America \u2506 MULTIPOLYGON(((-122\u2026 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"crs-examples/#example-2-joining-two-tables-with-different-crss","title":"Example #2: Joining two tables with different CRSs","text":"<p>This example shows how to join a <code>vermont</code> table with an EPSG 32618 CRS with a <code>buildings</code> table that uses an EPSG 4326 CRS.</p> <p>The example highlights the following features:</p> <ol> <li>SedonaDB reads the CRS stored in the files.</li> <li>SedonaDB protects you from accidentally joining files with mismatched CRSs.</li> <li>It's easy to convert a GeoPandas DataFrame to a SedonaDB DataFrame and maintain the CRS.</li> </ol> <pre><code>import geopandas as gpd\n\npath = \"https://raw.githubusercontent.com/geoarrow/geoarrow-data/v0.2.0/example-crs/files/example-crs_vermont-utm.fgb\"\ngdf = gpd.read_file(path)\n</code></pre> <pre><code>vermont = sd.create_data_frame(gdf)\n</code></pre> <pre><code>vermont.schema\n</code></pre> <pre><code>SedonaSchema with 1 field:\n  geometry: geometry&lt;Wkb(epsg:32618)&gt;\n</code></pre> <pre><code>buildings = sd.read_parquet(\n    \"https://github.com/geoarrow/geoarrow-data/releases/download/v0.2.0/microsoft-buildings_point_geo.parquet\"\n)\n</code></pre> <pre><code>buildings.show(3)\n</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502             geometry            \u2502\n\u2502             geometry            \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 POINT(-97.16154292 26.08759861) \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 POINT(-97.1606625 26.08481)     \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 POINT(-97.16133375 26.08519809) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>buildings.schema\n</code></pre> <pre><code>SedonaSchema with 1 field:\n  geometry: geometry&lt;WkbView(ogc:crs84)&gt;\n</code></pre> <pre><code>buildings.count()\n</code></pre> <pre><code>129735970\n</code></pre> <pre><code>buildings.to_view(\"buildings\", overwrite=True)\nvermont.to_view(\"vermont\", overwrite=True)\n</code></pre> <pre><code># Again, SedonaDB prevents accidentally joining files with mismatched CRSs.\nsd.sql(\"\"\"\nSELECT count(*) from buildings\nJOIN vermont\nWHERE ST_Intersects(\n       buildings.geometry,\n       vermont.geometry)\n\"\"\").show()\n</code></pre> <pre><code>---------------------------------------------------------------------------\n\nSedonaError                               Traceback (most recent call last)\n\nCell In[20], line 8\n      1 # Again, SedonaDB prevents accidentally joining files with mismatched CRSs.\n      2 sd.sql(\"\"\"\n      3 SELECT count(*) from buildings\n      4 JOIN vermont\n      5 WHERE ST_Intersects(\n      6        buildings.geometry,\n      7        vermont.geometry)\n----&gt; 8 \"\"\").show()\n\n\nFile ~/new-sedonadb/sedona-db/python/sedonadb/python/sedonadb/dataframe.py:380, in DataFrame.show(self, limit, width, ascii)\n    356 \"\"\"Print the first limit rows to the console\n    357 \n    358 Args:\n   (...)    377 \n    378 \"\"\"\n    379 width = self._out_width(width)\n--&gt; 380 print(self._impl.show(self._ctx, limit, width, ascii), end=\"\")\n\n\nSedonaError: type_coercion\ncaused by\nError during planning: Mismatched CRS arguments: ogc:crs84 vs epsg:32618\nUse ST_Transform() or ST_SetSRID() to ensure arguments are compatible.\n</code></pre> <pre><code>sd.sql(\"\"\"\nSELECT count(*)\nFROM buildings\nJOIN vermont\nWHERE ST_Intersects(\n    buildings.geometry,\n    ST_Transform(vermont.geometry, 'EPSG:4326')\n)\n\"\"\").show()\n</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 count(*) \u2502\n\u2502   int64  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502   361856 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"geopandas-interop/","title":"GeoPandas interop","text":""},{"location":"geopandas-interop/#geopandas-interoperability","title":"GeoPandas Interoperability","text":"<p>Note: Before running this notebook, ensure that you have installed SedonaDB: <code>pip install \"apache-sedona[db]\"</code></p> <p>This notebook shows how to leverage GeoPandas with SedonaDB for large-scale geospatial analysis.</p> <p>You'll learn how to:</p> <ul> <li>Read common geospatial file formats like GeoJSON and FlatGeobuf into a GeoPandas GeoDataFrame</li> <li>Convert these data from these input formats into a SedonaDB DataFrame for large-scale analysis.</li> </ul> <p>Any file type that can be read by GeoPandas can also be read into a SedonaDB DataFrame!</p> <pre><code>import sedona.db\nimport geopandas as gpd\n\nsd = sedona.db.connect()\n</code></pre>"},{"location":"geopandas-interop/#read-a-geojson-file-with-geopandas","title":"Read a GeoJSON file with GeoPandas","text":"<pre><code>gdf = gpd.read_file(\"sample_geometries.json\")\n</code></pre> <pre><code>gdf\n</code></pre> prop0 prop1 geometry 0 value0 None POINT (102 0.5) 1 value1 0.0 LINESTRING (102 0, 103 1, 104 0, 105 1) 2 value2 { \"this\": \"that\" } POLYGON ((100 0, 101 0, 101 1, 100 1, 100 0)) <pre><code>gdf.info()\n</code></pre> <pre><code>&lt;class 'geopandas.geodataframe.GeoDataFrame'&gt;\nRangeIndex: 3 entries, 0 to 2\nData columns (total 3 columns):\n #   Column    Non-Null Count  Dtype   \n---  ------    --------------  -----   \n 0   prop0     3 non-null      object  \n 1   prop1     2 non-null      object  \n 2   geometry  3 non-null      geometry\ndtypes: geometry(1), object(2)\nmemory usage: 204.0+ bytes\n</code></pre>"},{"location":"geopandas-interop/#convert-the-geopandas-dataframe-to-a-sedonadb-dataframe","title":"Convert the GeoPandas DataFrame to a SedonaDB DataFrame","text":"<pre><code>df = sd.create_data_frame(gdf)\n</code></pre> <pre><code>df.show()\n</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  prop0 \u2506        prop1       \u2506                 geometry                 \u2502\n\u2502  utf8  \u2506        utf8        \u2506                 geometry                 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 value0 \u2506                    \u2506 POINT(102 0.5)                           \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 value1 \u2506 0.0                \u2506 LINESTRING(102 0,103 1,104 0,105 1)      \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 value2 \u2506 { \"this\": \"that\" } \u2506 POLYGON((100 0,101 0,101 1,100 1,100 0)) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"geopandas-interop/#read-and-convert-data-from-a-flatgeobuf-file","title":"Read and Convert Data From a FlatGeobuf file","text":"<p>This code demonstrates how to read a FlatGeobuf file with GeoPandas and then convert it to a SedonaDB DataFrame.</p> <pre><code># Read a FlatGeobuf file with GeoPandas\npath = \"https://raw.githubusercontent.com/geoarrow/geoarrow-data/v0.2.0/natural-earth/files/natural-earth_cities.fgb\"\ngdf = gpd.read_file(path)\n</code></pre> <pre><code># Convert the GeoPandas DataFrame to a SedonaDB DataFrame\ndf = sd.create_data_frame(gdf)\n</code></pre> <pre><code>df.show(3)\n</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502     name     \u2506           geometry           \u2502\n\u2502     utf8     \u2506           geometry           \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Vatican City \u2506 POINT(12.4533865 41.9032822) \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 San Marino   \u2506 POINT(12.4417702 43.9360958) \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Vaduz        \u2506 POINT(9.5166695 47.1337238)  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"overture-examples/","title":"Overture Examples","text":""},{"location":"overture-examples/#sedonadb-overture-examples","title":"SedonaDB Overture Examples","text":"<p>Note: Before running this notebook, ensure that you have installed SedonaDB: <code>pip install \"apache-sedona[db]\"</code></p> <p>This notebook demonstrates how to query and analyze the Overture Maps dataset using SedonaDB.</p> <p>The notebook explains how to: * Load Overture data for the <code>buildings</code> and <code>divisions</code> themes directly from S3. * Perform spatial queries to find features within a specific geographic area. * Optimize subsequent query performance by caching a subset of data in memory.</p> <pre><code>import sedona.db\nimport os\n\nos.environ[\"AWS_SKIP_SIGNATURE\"] = \"true\"\nos.environ[\"AWS_DEFAULT_REGION\"] = \"us-west-2\"\n\nsd = sedona.db.connect()\n</code></pre>"},{"location":"overture-examples/#overture-buildings-table","title":"Overture buildings table","text":"<pre><code>df = sd.read_parquet(\n    \"s3://overturemaps-us-west-2/release/2025-08-20.0/theme=buildings/type=building/\"\n)\n</code></pre> <pre><code>df.limit(10).show()\n</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                  id                  \u2506                 geometry                \u2506 \u2026 \u2506 roof_height \u2502\n\u2502                 utf8                 \u2506                 geometry                \u2506   \u2506   float64   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 97a89436-5295-417e-bde1-2dbf8fe10700 \u2506 POLYGON((-107.0377042 28.8102782,-107.\u2026 \u2506 \u2026 \u2506             \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 e09fcdeb-65ab-443c-bc59-4f9acf32af17 \u2506 POLYGON((-107.0372022 28.8103812,-107.\u2026 \u2506 \u2026 \u2506             \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 cb06e75f-66a0-40ca-9029-e1a24dff1434 \u2506 POLYGON((-107.0372848 28.8104923,-107.\u2026 \u2506 \u2026 \u2506             \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 5b8eaaca-5628-41d2-9e74-8c4c1205ed54 \u2506 POLYGON((-107.0371986 28.8104859,-107.\u2026 \u2506 \u2026 \u2506             \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 1a4fba29-6160-4a98-b8f7-03395fd6466a \u2506 POLYGON((-107.0373331 28.8105281,-107.\u2026 \u2506 \u2026 \u2506             \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 9de2d803-ab58-46e1-9a35-7423f8d0d121 \u2506 POLYGON((-107.0378928 28.8112268,-107.\u2026 \u2506 \u2026 \u2506             \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 1704c72b-6f2b-445b-b9a3-36fdd0c74233 \u2506 POLYGON((-107.0376099 28.8112085,-107.\u2026 \u2506 \u2026 \u2506             \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 b30bf41d-479f-4ee5-bd45-d4e17ffd8875 \u2506 POLYGON((-107.0377094 28.8115554,-107.\u2026 \u2506 \u2026 \u2506             \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 c88928d4-b165-4335-9bd8-ccc5c9f79cee \u2506 POLYGON((-107.0374986 28.8111847,-107.\u2026 \u2506 \u2026 \u2506             \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 ca1000b0-6af3-47fc-bdf2-61e8b1b716fc \u2506 POLYGON((-107.0370972 28.8115247,-107.\u2026 \u2506 \u2026 \u2506             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df.to_view(\"buildings\")\n</code></pre> <pre><code># the buildings table is large and contains billions of rows\nsd.sql(\"\"\"\nSELECT\n    COUNT(*)\nFROM\n    buildings\n\"\"\").show()\n</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  count(*)  \u2502\n\u2502    int64   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 2539170484 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># check out the schema of the buildings table to see what it contains\ndf.schema\n</code></pre> <pre><code>SedonaSchema with 24 fields:\n  id: utf8&lt;Utf8View&gt;\n  geometry: geometry&lt;WkbView(ogc:crs84)&gt;\n  bbox: struct&lt;Struct(xmin Float32, xmax Float32, ymin Float32, ymax Float32)&gt;\n  version: int32&lt;Int32&gt;\n  sources: list&lt;List(Field { name: \"element\", data_type: Struct([Field { name: \"property\", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"dataset\", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"record_id\", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"update_time\", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"confidence\", data_type: Float64, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"between\", data_type: List(Field { name: \"element\", data_type: Float64, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }), nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }]), nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} })&gt;\n  level: int32&lt;Int32&gt;\n  subtype: utf8&lt;Utf8View&gt;\n  class: utf8&lt;Utf8View&gt;\n  height: float64&lt;Float64&gt;\n  names: struct&lt;Struct(primary Utf8, common Map(Field { name: \"key_value\", data_type: Struct([Field { name: \"key\", data_type: Utf8, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"value\", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }]), nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }, false), rules List(Field { name: \"element\", data_type: Struct([Field { name: \"variant\", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"language\", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"perspectives\", data_type: Struct([Field { name: \"mode\", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"countries\", data_type: List(Field { name: \"element\", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }), nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }]), nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"value\", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"between\", data_type: List(Field { name: \"element\", data_type: Float64, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }), nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"side\", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }]), nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }))&gt;\n  has_parts: boolean&lt;Boolean&gt;\n  is_underground: boolean&lt;Boolean&gt;\n  num_floors: int32&lt;Int32&gt;\n  num_floors_underground: int32&lt;Int32&gt;\n  min_height: float64&lt;Float64&gt;\n  min_floor: int32&lt;Int32&gt;\n  facade_color: utf8&lt;Utf8View&gt;\n  facade_material: utf8&lt;Utf8View&gt;\n  roof_material: utf8&lt;Utf8View&gt;\n  roof_shape: utf8&lt;Utf8View&gt;\n  roof_direction: float64&lt;Float64&gt;\n  roof_orientation: utf8&lt;Utf8View&gt;\n  roof_color: utf8&lt;Utf8View&gt;\n  roof_height: float64&lt;Float64&gt;\n</code></pre> <pre><code># find all the buildings in New York City that are taller than 20 meters\nnyc_bbox_wkt = (\n    \"POLYGON((-74.2591 40.4774, -74.2591 40.9176, -73.7004 40.9176, \"\n    \"-73.7004 40.4774, -74.2591 40.4774))\"\n)\nsd.sql(f\"\"\"\nSELECT\n    id,\n    height,\n    num_floors,\n    roof_shape,\n    ST_Centroid(geometry) as centroid\nFROM\n    buildings\nWHERE\n    is_underground = FALSE\n    AND height IS NOT NULL\n    AND height &gt; 20\n    AND ST_Intersects(\n        geometry,\n        ST_SetSRID(ST_GeomFromText('{nyc_bbox_wkt}'), 4326)\n    )\nLIMIT 5;\n\"\"\").show()\n</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502            id           \u2506       height       \u2506 num_floors \u2506 roof_shape \u2506         centroid        \u2502\n\u2502           utf8          \u2506       float64      \u2506    int32   \u2506    utf8    \u2506         geometry        \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1b9040c2-2e79-4f56-aba\u2026 \u2506               22.4 \u2506            \u2506            \u2506 POINT(-74.230407502993\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 1b5e1cd2-d697-489e-892\u2026 \u2506               21.5 \u2506            \u2506            \u2506 POINT(-74.231451103592\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 c1afdf78-bf84-4b8f-ae1\u2026 \u2506               20.9 \u2506            \u2506            \u2506 POINT(-74.232593032240\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 88f36399-b09f-491b-bb6\u2026 \u2506               24.5 \u2506            \u2506            \u2506 POINT(-74.231878209597\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 df37a283-f5bd-4822-a05\u2026 \u2506 24.154542922973633 \u2506            \u2506            \u2506 POINT(-74.241910239840\u2026 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"overture-examples/#overture-divisions-table","title":"Overture divisions table","text":"<pre><code>df = sd.read_parquet(\n    \"s3://overturemaps-us-west-2/release/2025-08-20.0/theme=divisions/type=division_area/\"\n)\n</code></pre> <pre><code># inspect a few rows of the data\ndf.show(10)\n</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502        id       \u2506    geometry    \u2506      bbox      \u2506 \u2026 \u2506 is_territorial \u2506 region \u2506   division_id  \u2502\n\u2502       utf8      \u2506    geometry    \u2506     struct     \u2506   \u2506     boolean    \u2506  utf8  \u2506      utf8      \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 cd743a89-9507-\u2026 \u2506 POLYGON((111.\u2026 \u2506 {xmin: 111.40\u2026 \u2506 \u2026 \u2506 true           \u2506        \u2506 e08d9394-cbc8\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 eb9f314e-1184-\u2026 \u2506 POLYGON((112.\u2026 \u2506 {xmin: 112.15\u2026 \u2506 \u2026 \u2506 true           \u2506        \u2506 aa2561c6-a578\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 89fbee90-bca0-\u2026 \u2506 MULTIPOLYGON(\u2026 \u2506 {xmin: 112.15\u2026 \u2506 \u2026 \u2506 true           \u2506        \u2506 1cf6b19e-756f\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 758c0e1e-67aa-\u2026 \u2506 POLYGON((112.\u2026 \u2506 {xmin: 112.27\u2026 \u2506 \u2026 \u2506 true           \u2506        \u2506 505f563f-7aa3\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 e5d4c707-66d7-\u2026 \u2506 POLYGON((109.\u2026 \u2506 {xmin: 109.64\u2026 \u2506 \u2026 \u2506 true           \u2506 CN-HI  \u2506 86939aee-1fbd\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 26015e14-62ae-\u2026 \u2506 POLYGON((109.\u2026 \u2506 {xmin: 109.66\u2026 \u2506 \u2026 \u2506 true           \u2506 CN-HI  \u2506 ed052bae-e26f\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 eb42fd17-ad1e-\u2026 \u2506 POLYGON((109.\u2026 \u2506 {xmin: 109.83\u2026 \u2506 \u2026 \u2506 true           \u2506 CN-HI  \u2506 201eeb03-4f5a\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 d63e1220-a308-\u2026 \u2506 POLYGON((109.\u2026 \u2506 {xmin: 109.90\u2026 \u2506 \u2026 \u2506 true           \u2506 CN-HI  \u2506 71e30c32-2bc1\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 e62cef5e-6768-\u2026 \u2506 POLYGON((109.\u2026 \u2506 {xmin: 109.74\u2026 \u2506 \u2026 \u2506 true           \u2506 CN-HI  \u2506 24478621-6802\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 c6fcbed1-ad8d-\u2026 \u2506 POLYGON((110.\u2026 \u2506 {xmin: 110.00\u2026 \u2506 \u2026 \u2506 true           \u2506 CN-HI  \u2506 ac0f434d-1e10\u2026 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df.to_view(\"division_area\")\n</code></pre> <pre><code>sd.sql(\"\"\"\nSELECT\n    COUNT(*)\nFROM division_area\n\"\"\").show()\n</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 count(*) \u2502\n\u2502   int64  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502  1035749 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>df.schema\n</code></pre> <pre><code>SedonaSchema with 13 fields:\n  id: utf8&lt;Utf8View&gt;\n  geometry: geometry&lt;WkbView(ogc:crs84)&gt;\n  bbox: struct&lt;Struct(xmin Float32, xmax Float32, ymin Float32, ymax Float32)&gt;\n  country: utf8&lt;Utf8View&gt;\n  version: int32&lt;Int32&gt;\n  sources: list&lt;List(Field { name: \"element\", data_type: Struct([Field { name: \"property\", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"dataset\", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"record_id\", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"update_time\", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"confidence\", data_type: Float64, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"between\", data_type: List(Field { name: \"element\", data_type: Float64, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }), nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }]), nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} })&gt;\n  subtype: utf8&lt;Utf8View&gt;\n  class: utf8&lt;Utf8View&gt;\n  names: struct&lt;Struct(primary Utf8, common Map(Field { name: \"key_value\", data_type: Struct([Field { name: \"key\", data_type: Utf8, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"value\", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }]), nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }, false), rules List(Field { name: \"element\", data_type: Struct([Field { name: \"variant\", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"language\", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"perspectives\", data_type: Struct([Field { name: \"mode\", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"countries\", data_type: List(Field { name: \"element\", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }), nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }]), nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"value\", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"between\", data_type: List(Field { name: \"element\", data_type: Float64, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }), nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"side\", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }]), nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }))&gt;\n  is_land: boolean&lt;Boolean&gt;\n  is_territorial: boolean&lt;Boolean&gt;\n  region: utf8&lt;Utf8View&gt;\n  division_id: utf8&lt;Utf8View&gt;\n</code></pre> <pre><code># get all the divisions in Nova Scotia and save them in memory with to_memtable()\nnova_scotia_bbox_wkt = (\n    \"POLYGON((-66.5 43.4, -66.5 47.1, -59.8 47.1, -59.8 43.4, -66.5 43.4))\"\n)\nns = sd.sql(f\"\"\"\nSELECT\n    country, region, names, geometry\nFROM division_area\nWHERE\n    ST_Intersects(\n        geometry,\n        ST_SetSRID(ST_GeomFromText('{nova_scotia_bbox_wkt}'), 4326)\n    )\n\"\"\").to_memtable()\n</code></pre> <pre><code>ns.to_view(\"ns_divisions\")\n</code></pre> <pre><code>df = sd.sql(\"\"\"\nSELECT UNNEST(names), geometry\nFROM ns_divisions\nWHERE region = 'CA-NS'\n\"\"\")\n</code></pre> <pre><code>%%time\n# this executes quickly because the Nova Scotia data was persisted in memory with `to_memtable()`\ndf.show(2)\n</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 __unnest_placeholder(n \u2506 __unnest_placeholder(n \u2506 __unnest_placeholder(n \u2506        geometry       \u2502\n\u2502 s_divisions.names).pr\u2026 \u2506 s_divisions.names).co\u2026 \u2506 s_divisions.names).ru\u2026 \u2506        geometry       \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Seal Island            \u2506                        \u2506                        \u2506 POLYGON((-66.0528452\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Mud Island             \u2506                        \u2506                        \u2506 POLYGON((-66.0222822\u2026 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nCPU times: user 1.31 ms, sys: 1.02 ms, total: 2.33 ms\nWall time: 2.54 ms\n</code></pre>"},{"location":"overture-examples/#visualize-the-results-with-lonboard","title":"Visualize the results with lonboard","text":"<pre><code>import lonboard\n\nlonboard.viz(df)\n</code></pre> <pre><code>Map(basemap_style=&lt;CartoBasemap.DarkMatter: 'https://basemaps.cartocdn.com/gl/dark-matter-gl-style/style.json'\u2026\n</code></pre>"},{"location":"programming-guide/","title":"Programming Guide","text":""},{"location":"programming-guide/#working-with-vector-data","title":"Working with Vector Data","text":"<p>Note: Before running this notebook, ensure that you have installed SedonaDB: <code>pip install \"apache-sedona[db]\"</code></p> <p>Process vector data using sedona.db. You will learn to create DataFrames, run spatial queries, and manage file I/O. Let's begin by connecting to sedona.db.</p> <p>Let's start by establishing a SedonaDB connection.</p>"},{"location":"programming-guide/#establish-sedonadb-connection","title":"Establish SedonaDB connection","text":"<p>Here's how to create the SedonaDB connection:</p> <pre><code>import sedona.db\n\nsd = sedona.db.connect()\n</code></pre> <p>Now, let's see how to create SedonaDB dataframes.</p>"},{"location":"programming-guide/#create-sedonadb-dataframe","title":"Create SedonaDB DataFrame","text":"<p>Manually creating SedonaDB DataFrame</p> <p>Here's how to manually create a SedonaDB DataFrame:</p> <pre><code>df = sd.sql(\"\"\"\nSELECT * FROM (VALUES\n    ('one', ST_GeomFromWkt('POINT(1 2)')),\n    ('two', ST_GeomFromWkt('POLYGON((-74.0 40.7, -74.0 40.8, -73.9 40.8, -73.9 40.7, -74.0 40.7))')),\n    ('three', ST_GeomFromWkt('LINESTRING(-74.0060 40.7128, -73.9352 40.7306, -73.8561 40.8484)')))\nAS t(val, point)\"\"\")\n</code></pre> <p>Check the type of the DataFrame.</p> <pre><code>type(df)\n</code></pre> <pre><code>sedona.db.dataframe.DataFrame\n</code></pre> <p>Create SedonaDB DataFrame from files in S3</p> <p>For most production applications, you will create SedonaDB DataFrames by reading data from a file.  Let's see how to read GeoParquet files in AWS S3 into a SedonaDB DataFrame.</p> <pre><code>sd.read_parquet(\n    \"s3://overturemaps-us-west-2/release/2025-08-20.0/theme=divisions/type=division_area/\",\n    options={\"aws.skip_signature\": True, \"aws.region\": \"us-west-2\"},\n).to_view(\"division_area\")\n</code></pre> <p>Now, let's run some spatial queries.</p>"},{"location":"programming-guide/#read-from-geopandas-dataframe","title":"Read from GeoPandas DataFrame","text":"<p>This section shows how to convert a GeoPandas DataFrame into a SedonaDB DataFrame.</p> <p>Start by reading a FlatGeoBuf file into a GeoPandas DataFrame:</p> <pre><code>import geopandas as gpd\n\npath = \"https://raw.githubusercontent.com/geoarrow/geoarrow-data/v0.2.0/natural-earth/files/natural-earth_cities.fgb\"\ngdf = gpd.read_file(path)\n</code></pre> <p>Now convert the GeoPandas DataFrame to a SedonaDB DataFrame and view three rows of content:</p> <pre><code>df = sd.create_data_frame(gdf)\ndf.show(3)\n</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502     name     \u2506           geometry           \u2502\n\u2502     utf8     \u2506           geometry           \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Vatican City \u2506 POINT(12.4533865 41.9032822) \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 San Marino   \u2506 POINT(12.4417702 43.9360958) \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Vaduz        \u2506 POINT(9.5166695 47.1337238)  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"programming-guide/#spatial-queries","title":"Spatial queries","text":"<p>Let's see how to run spatial operations like filtering, joins, and clustering algorithms.</p>"},{"location":"programming-guide/#spatial-filtering","title":"Spatial filtering","text":"<p>Let's run a spatial filtering operation to fetch all the objects in the following polygon:</p> <pre><code>nova_scotia_bbox_wkt = (\n    \"POLYGON((-66.5 43.4, -66.5 47.1, -59.8 47.1, -59.8 43.4, -66.5 43.4))\"\n)\n\nns = sd.sql(f\"\"\"\nSELECT country, region, geometry\nFROM division_area\nWHERE ST_Intersects(geometry, ST_SetSRID(ST_GeomFromText('{nova_scotia_bbox_wkt}'), 4326))\n\"\"\")\n\nns.show(3)\n</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  country \u2506  region  \u2506                                  geometry                                  \u2502\n\u2502 utf8view \u2506 utf8view \u2506                                  geometry                                  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 CA       \u2506 CA-NS    \u2506 POLYGON((-66.0528452 43.4531336,-66.0883401 43.3978188,-65.9647654 43.361\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 CA       \u2506 CA-NS    \u2506 POLYGON((-66.0222822 43.5166842,-66.0252286 43.5100071,-66.0528452 43.453\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 CA       \u2506 CA-NS    \u2506 POLYGON((-65.7451389 43.5336263,-65.7450818 43.5347004,-65.7449545 43.535\u2026 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>You can see it only includes the divisions in the Nova Scotia area.</p>"},{"location":"programming-guide/#k-nearest-neighbors-knn-joins","title":"K-nearest neighbors (KNN) joins","text":"<p>Create <code>restaurants</code> and <code>customers</code> views so we can demonstrate the KNN join functionality.</p> <pre><code>df = sd.sql(\"\"\"\nSELECT name, ST_Point(lng, lat) AS location\nFROM (VALUES\n    (101, -74.0, 40.7, 'Pizza Palace'),\n    (102, -73.99, 40.69, 'Burger Barn'),\n    (103, -74.02, 40.72, 'Taco Town'),\n    (104, -73.98, 40.75, 'Sushi Spot'),\n    (105, -74.05, 40.68, 'Deli Direct')\n) AS t(id, lng, lat, name)\n\"\"\")\nsd.sql(\"drop view if exists restaurants\")\ndf.to_view(\"restaurants\")\n\ndf = sd.sql(\"\"\"\nSELECT name, ST_Point(lng, lat) AS location\nFROM (VALUES\n    (1, -74.0, 40.7, 'Alice'),\n    (2, -73.9, 40.8, 'Bob'),\n    (3, -74.1, 40.6, 'Carol')\n) AS t(id, lng, lat, name)\n\"\"\")\nsd.sql(\"drop view if exists customers\")\ndf.to_view(\"customers\")\n</code></pre> <pre><code>df.show()\n</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  name \u2506      location     \u2502\n\u2502  utf8 \u2506      geometry     \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Alice \u2506 POINT(-74 40.7)   \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Bob   \u2506 POINT(-73.9 40.8) \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Carol \u2506 POINT(-74.1 40.6) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Perform a KNN join to identify the two restaurants that are nearest to each customer:</p> <pre><code>sd.sql(\"\"\"\nSELECT\n    c.name AS customer,\n    r.name AS restaurant\nFROM customers c, restaurants r\nWHERE ST_KNN(c.location, r.location, 2, false)\nORDER BY c.name, r.name;\n\"\"\").show()\n</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 customer \u2506  restaurant  \u2502\n\u2502   utf8   \u2506     utf8     \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Alice    \u2506 Burger Barn  \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Alice    \u2506 Pizza Palace \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Bob      \u2506 Pizza Palace \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Bob      \u2506 Sushi Spot   \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Carol    \u2506 Deli Direct  \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Carol    \u2506 Pizza Palace \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Notice how each customer has two rows - one for each of the two closest restaurants.</p>"},{"location":"quickstart-python/","title":"Quickstart","text":""},{"location":"quickstart-python/#python-quickstart","title":"Python Quickstart","text":"<p>First, install SedonaDB:</p> <pre><code>pip install \"apache-sedona[db]\"\n</code></pre> <p>If the import and connection are successful, your installation is complete.</p> <pre><code>import sedona.db\n\nsd = sedona.db.connect()\nsd.sql(\"SELECT ST_Point(0, 1) as geom\").show()\n</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    geom    \u2502\n\u2502  geometry  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 POINT(0 1) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"quickstart-python/#point-in-polygon-join","title":"Point in polygon join","text":"<pre><code>cities = sd.read_parquet(\n    \"https://raw.githubusercontent.com/geoarrow/geoarrow-data/v0.2.0/natural-earth/files/natural-earth_cities_geo.parquet\"\n)\n</code></pre> <pre><code>cities.show()\n</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502     name     \u2506            geometry           \u2502\n\u2502     utf8     \u2506            geometry           \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Vatican City \u2506 POINT(12.4533865 41.9032822)  \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 San Marino   \u2506 POINT(12.4417702 43.9360958)  \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Vaduz        \u2506 POINT(9.5166695 47.1337238)   \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Lobamba      \u2506 POINT(31.1999971 -26.4666675) \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Luxembourg   \u2506 POINT(6.1300028 49.6116604)   \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Palikir      \u2506 POINT(158.1499743 6.9166437)  \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Majuro       \u2506 POINT(171.3800002 7.1030043)  \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Funafuti     \u2506 POINT(179.2166471 -8.516652)  \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Melekeok     \u2506 POINT(134.6265485 7.4873962)  \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Bir Lehlou   \u2506 POINT(-9.6525222 26.1191667)  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>countries = sd.read_parquet(\n    \"https://raw.githubusercontent.com/geoarrow/geoarrow-data/v0.2.0/natural-earth/files/natural-earth_countries_geo.parquet\"\n)\n</code></pre> <pre><code>countries.show()\n</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502             name            \u2506   continent   \u2506                      geometry                      \u2502\n\u2502             utf8            \u2506      utf8     \u2506                      geometry                      \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Fiji                        \u2506 Oceania       \u2506 MULTIPOLYGON(((180 -16.067132663642447,180 -16.55\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 United Republic of Tanzania \u2506 Africa        \u2506 POLYGON((33.90371119710453 -0.9500000000000001,34\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Western Sahara              \u2506 Africa        \u2506 POLYGON((-8.665589565454809 27.656425889592356,-8\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Canada                      \u2506 North America \u2506 MULTIPOLYGON(((-122.84000000000003 49.00000000000\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 United States of America    \u2506 North America \u2506 MULTIPOLYGON(((-122.84000000000003 49.00000000000\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Kazakhstan                  \u2506 Asia          \u2506 POLYGON((87.35997033076265 49.21498078062912,86.5\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Uzbekistan                  \u2506 Asia          \u2506 POLYGON((55.96819135928291 41.30864166926936,55.9\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Papua New Guinea            \u2506 Oceania       \u2506 MULTIPOLYGON(((141.00021040259185 -2.600151055515\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Indonesia                   \u2506 Asia          \u2506 MULTIPOLYGON(((141.00021040259185 -2.600151055515\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Argentina                   \u2506 South America \u2506 MULTIPOLYGON(((-68.63401022758323 -52.63637045887\u2026 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>cities.to_view(\"cities\")\ncountries.to_view(\"countries\")\n</code></pre> <pre><code># join the cities and countries tables\nsd.sql(\"\"\"\nselect * from cities\njoin countries\nwhere ST_Intersects(cities.geometry, countries.geometry)\n\"\"\").show()\n</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502      name     \u2506       geometry       \u2506         name        \u2506   continent   \u2506       geometry      \u2502\n\u2502      utf8     \u2506       geometry       \u2506         utf8        \u2506      utf8     \u2506       geometry      \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Suva          \u2506 POINT(178.4417073 -\u2026 \u2506 Fiji                \u2506 Oceania       \u2506 MULTIPOLYGON(((180\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Dodoma        \u2506 POINT(35.7500036 -6\u2026 \u2506 United Republic of\u2026 \u2506 Africa        \u2506 POLYGON((33.903711\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Dar es Salaam \u2506 POINT(39.266396 -6.\u2026 \u2506 United Republic of\u2026 \u2506 Africa        \u2506 POLYGON((33.903711\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Bir Lehlou    \u2506 POINT(-9.6525222 26\u2026 \u2506 Western Sahara      \u2506 Africa        \u2506 POLYGON((-8.665589\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Ottawa        \u2506 POINT(-75.7019612 4\u2026 \u2506 Canada              \u2506 North America \u2506 MULTIPOLYGON(((-12\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Vancouver     \u2506 POINT(-123.1235901 \u2026 \u2506 Canada              \u2506 North America \u2506 MULTIPOLYGON(((-12\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Toronto       \u2506 POINT(-79.389458554\u2026 \u2506 Canada              \u2506 North America \u2506 MULTIPOLYGON(((-12\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 San Francisco \u2506 POINT(-122.39959956\u2026 \u2506 United States of A\u2026 \u2506 North America \u2506 MULTIPOLYGON(((-12\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Denver        \u2506 POINT(-104.9859618 \u2026 \u2506 United States of A\u2026 \u2506 North America \u2506 MULTIPOLYGON(((-12\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Houston       \u2506 POINT(-95.348436256\u2026 \u2506 United States of A\u2026 \u2506 North America \u2506 MULTIPOLYGON(((-12\u2026 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"quickstart-python/#manually-create-sedonadb-dataframes","title":"Manually create SedonaDB DataFrames","text":"<p>Let's create a DataFrame with one string column and one geometry column to show some of the functionality of the SedonaDB Python interface.</p> <pre><code>df = sd.sql(\"\"\"\n    SELECT * FROM (VALUES\n        ('one', ST_GeomFromWkt('POINT(1 2)')),\n        ('two', ST_GeomFromWkt('POLYGON((\n            -74.0 40.7, -74.0 40.8, -73.9 40.8,\n            -73.9 40.7, -74.0 40.7\n        ))')),\n        ('three', ST_GeomFromWkt('LINESTRING(\n            -74.0060 40.7128, -73.9352 40.7306,\n            -73.8561 40.8484\n        )'))\n    ) AS t(val, point)\n\"\"\")\n</code></pre> <pre><code>df.show()\n</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  val  \u2506                                           point                                          \u2502\n\u2502  utf8 \u2506                                          binary                                          \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 one   \u2506 0101000000000000000000f03f0000000000000040                                               \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 two   \u2506 0103000000010000000500000000000000008052c09a9999999959444000000000008052c06666666666664\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 three \u2506 010200000003000000aaf1d24d628052c05e4bc8073d5b444007ce1951da7b52c0933a014d845d4440c286a\u2026 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Verify that this object is a SedonaDB DataFrame.</p> <pre><code>type(df)\n</code></pre> <pre><code>sedonadb.dataframe.DataFrame\n</code></pre> <p>Expose the DataFrame as a view and run a SQL operation on the geometry data.</p> <pre><code>df.to_view(\"fun_table\")\n</code></pre> <pre><code>sd.sql(\"DESCRIBE fun_table\").show()\n</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 column_name \u2506 data_type \u2506 is_nullable \u2502\n\u2502     utf8    \u2506    utf8   \u2506     utf8    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 val         \u2506 Utf8      \u2506 YES         \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 point       \u2506 Binary    \u2506 YES         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>sd.sql(\"\"\"\n    SELECT *, ST_Centroid(ST_GeomFromWKB(point)) as centroid\n    FROM fun_table\n\"\"\").show()\n</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  val  \u2506                    point                    \u2506                  centroid                  \u2502\n\u2502  utf8 \u2506                    binary                   \u2506                  geometry                  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 one   \u2506 0101000000000000000000f03f0000000000000040  \u2506 POINT(1 2)                                 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 two   \u2506 0103000000010000000500000000000000008052c0\u2026 \u2506 POINT(-73.95 40.75)                        \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 three \u2506 010200000003000000aaf1d24d628052c05e4bc807\u2026 \u2506 POINT(-73.92111155675562 40.7664673976246\u2026 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"working-with-parquet-files/","title":"Working with Parquet Files","text":""},{"location":"working-with-parquet-files/#working-with-parquet-files","title":"Working with Parquet Files","text":"<p>The easiest way to read a GeoParquet or Parquet file is to use <code>sd.read_parquet()</code>. Alternatively, you can query these files directly by their path in SQL.</p>"},{"location":"working-with-parquet-files/#install-sedonadb","title":"Install SedonaDB","text":"<p>Use pip to install SedonaDB from the Python Package Index (PyPI).</p> <p>Note: Before running this notebook on your local machine, you must have SedonaDB installed in your environment. You can install SedonaDB with the following command: <code>pip install \"apache-sedona[db]\"</code></p>"},{"location":"working-with-parquet-files/#implementation","title":"Implementation","text":"<p>A common workflow for working with GeoParquet and/or Parquet files is:</p> <ol> <li>Load the Parquet file into a data frame using <code>sd.read_parquet()</code>.</li> <li>Register the data frame as a view with <code>to_view()</code>.</li> <li>Query the view using <code>sd.sql()</code>.</li> <li>Write your results to a Parquet file with <code>.to_parquet()</code> or use <code>.to_pandas()</code> to export your results to a DataFrame or GeoDataFrame.</li> </ol> <pre><code># Import the sedona.db module and connect to SedonaDB\nimport sedona.db\n\nsd = sedona.db.connect()\n</code></pre> <pre><code># 1. Load the Parquet file\ndf = sd.read_parquet(\n    \"https://raw.githubusercontent.com/geoarrow/geoarrow-data/v0.2.0/\"\n    \"natural-earth/files/natural-earth_cities_geo.parquet\"\n)\n\n# 2. Register the data frame as a view\ndf.to_view(\"zone\")\n\n# 3. Query the view and store the result in a new DataFrame\nquery_result_df = sd.sql(\"SELECT * FROM zone LIMIT 10\")\nquery_result_df.show()\n</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502     name     \u2506            geometry           \u2502\n\u2502     utf8     \u2506            geometry           \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Vatican City \u2506 POINT(12.4533865 41.9032822)  \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 San Marino   \u2506 POINT(12.4417702 43.9360958)  \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Vaduz        \u2506 POINT(9.5166695 47.1337238)   \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Lobamba      \u2506 POINT(31.1999971 -26.4666675) \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Luxembourg   \u2506 POINT(6.1300028 49.6116604)   \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Palikir      \u2506 POINT(158.1499743 6.9166437)  \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Majuro       \u2506 POINT(171.3800002 7.1030043)  \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Funafuti     \u2506 POINT(179.2166471 -8.516652)  \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Melekeok     \u2506 POINT(134.6265485 7.4873962)  \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Bir Lehlou   \u2506 POINT(-9.6525222 26.1191667)  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code># 4. Write the result to a new Parquet file\noutput_path = \"query_results.parquet\"\nquery_result_df.to_parquet(output_path)\n\n# (Optional) Verify the written file\nprint(f\"\\nVerifying the written file at '{output_path}'...\")\nverified_df = sd.read_parquet(output_path)\nverified_df.show(5)\n</code></pre> <pre><code>Verifying the written file at 'query_results.parquet'...\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502     name     \u2506            geometry           \u2502\n\u2502     utf8     \u2506            geometry           \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Vatican City \u2506 POINT(12.4533865 41.9032822)  \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 San Marino   \u2506 POINT(12.4417702 43.9360958)  \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Vaduz        \u2506 POINT(9.5166695 47.1337238)   \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Lobamba      \u2506 POINT(31.1999971 -26.4666675) \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Luxembourg   \u2506 POINT(6.1300028 49.6116604)   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"working-with-sql-sedonadb/","title":"Working with SQL in SedonaDB","text":""},{"location":"working-with-sql-sedonadb/#working-with-sql-in-sedonadb","title":"Working with SQL in SedonaDB","text":"<p>This page details several nuances of using SQL in SedonaDB.</p>"},{"location":"working-with-sql-sedonadb/#creating-arrays-of-spatial-types-in-sql","title":"Creating Arrays of Spatial Types in SQL","text":"<p>When constructing an array of spatial objects (like <code>ST_POINT</code>) in SedonaDB, you must use bracket notation <code>[...]</code> instead of the standard <code>ARRAY()</code> function.</p>"},{"location":"working-with-sql-sedonadb/#the-incorrect-method-array","title":"The Incorrect Method: <code>ARRAY()</code>","text":"<p>Attempting to use the <code>ARRAY()</code> function to create an array of spatial types is not supported and will result in a planning error. SedonaDB will not recognize <code>ARRAY</code> as a valid function for this operation.</p> Example (Fails)<pre><code>&gt;&gt;&gt; sd.sql(\"SELECT ARRAY(ST_POINT(1,2), ST_POINT(3,4))\")\n...\nError during planning: Invalid function 'array'\n</code></pre>"},{"location":"working-with-sql-sedonadb/#the-correct-method-brackets","title":"The Correct Method: Brackets","text":"<p>To correctly build an array, enclose your comma-separated spatial objects in square brackets <code>[]</code>. This syntax successfully creates a list containing the spatial data structures.</p> Example (Works)<pre><code>&gt;&gt;&gt; sd.sql(\"SELECT [ST_POINT(1,2), ST_POINT(3,4)]\").show()\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502            make_array(st_point(Int64(1),Int64(2)),st_point(Int64(3),Int64(4)))           \u2502\n\u2502                                           list                                           \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 [0101000000000000000000f03f0000000000000040, 010100000000000000000008400000000000001040] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>This approach correctly instructs SedonaDB to construct an array containing the two <code>ST_POINT</code> objects.</p>"},{"location":"working-with-sql-sedonadb/#temporary-views-not-supported-in-sql","title":"Temporary Views Not Supported in SQL","text":"<p>SedonaDB does not support the <code>CREATE TEMP VIEW</code> or <code>CREATE TEMPORARY VIEW</code> SQL commands. Executing these statements will result in an error.</p> <p>Attempting to create a temporary view directly with <code>sd.sql()</code> will fail, as shown below.</p> Unsupported Example<pre><code>&gt;&gt;&gt; sd.sql(\"CREATE TEMP VIEW b AS SELECT * FROM '/path/to/building.parquet'\")\nTraceback (most recent call last):\n  ...\nsedonadb._lib.SedonaError: Temporary views not supported\n</code></pre>"},{"location":"working-with-sql-sedonadb/#recommended-alternative","title":"Recommended Alternative","text":"<p>The correct way to create a view is to load your data and use <code>to_view()</code>.</p> <p>This approach provides the same functionality and is the standard practice in Spark-based environments.</p> Working Example<pre><code># Step 1: Load your data into a DataFrame first\n&gt;&gt;&gt; building_df = sd.read_parquet(\"/path/to/building.parquet\")\n\n# Step 2: Register the DataFrame as a temporary view\n&gt;&gt;&gt; building_df.to_view(\"b\")\n\n# Step 3: You can now successfully query the view using SQL\n&gt;&gt;&gt; sd.sql(\"SELECT * FROM b LIMIT 5\").show()\n</code></pre>"},{"location":"reference/python/","title":"Python","text":""},{"location":"reference/python/#python-api-reference","title":"Python API Reference","text":""},{"location":"reference/python/#sedonadb.context","title":"sedonadb.context","text":""},{"location":"reference/python/#sedonadb.context.SedonaContext","title":"SedonaContext","text":"<p>Context for executing queries using Sedona</p> <p>This object keeps track of state such as registered functions, registered tables, and available memory. This is similar to a Spark SessionContext or a database connection.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sd = sedona.db.connect()\n&gt;&gt;&gt; sd.options.interactive = True\n&gt;&gt;&gt; sd.sql(\"SELECT 1 as one\")\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  one  \u2502\n\u2502 int64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502     1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"reference/python/#sedonadb.context.SedonaContext.create_data_frame","title":"create_data_frame","text":"<pre><code>create_data_frame(obj: Any, schema: Any = None) -&gt; DataFrame\n</code></pre> <p>Create a DataFrame from an in-memory or protocol-enabled object.</p> <p>Converts supported Python objects into a SedonaDB DataFrame so you can run SQL and spatial operations on them.</p> <p>Parameters:</p> <ul> <li> <code>obj</code>               (<code>Any</code>)           \u2013            <p>A supported object: - pandas DataFrame - GeoPandas DataFrame - Polars DataFrame - pyarrow Table</p> </li> <li> <code>schema</code>               (<code>Any</code>, default:                   <code>None</code> )           \u2013            <p>Optional object implementing <code>__arrow_schema__</code> for providing an Arrow schema.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>DataFrame</code> (              <code>DataFrame</code> )          \u2013            <p>A SedonaDB DataFrame.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; sd = sedona.db.connect()\n&gt;&gt;&gt; sd.create_data_frame(pd.DataFrame({\"x\": [1, 2]})).head(1).show()\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   x   \u2502\n\u2502 int64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502     1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"reference/python/#sedonadb.context.SedonaContext.drop_view","title":"drop_view","text":"<pre><code>drop_view(name: str) -&gt; None\n</code></pre> <p>Remove a named view</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name of the view</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sd = sedona.db.connect()\n&gt;&gt;&gt; sd.sql(\"SELECT ST_Point(0, 1) as geom\").to_view(\"foofy\")\n&gt;&gt;&gt; sd.drop_view(\"foofy\")\n</code></pre>"},{"location":"reference/python/#sedonadb.context.SedonaContext.read_parquet","title":"read_parquet","text":"<pre><code>read_parquet(\n    table_paths: Union[str, Path, Iterable[str]],\n    options: Optional[Dict[str, Any]] = None,\n) -&gt; DataFrame\n</code></pre> <p>Create a DataFrame from one or more Parquet files</p> <p>Parameters:</p> <ul> <li> <code>table_paths</code>               (<code>Union[str, Path, Iterable[str]]</code>)           \u2013            <p>A str, Path, or iterable of paths containing URLs to Parquet files.</p> </li> <li> <code>options</code>               (<code>Optional[Dict[str, Any]]</code>, default:                   <code>None</code> )           \u2013            <p>Optional dictionary of options to pass to the Parquet reader. For S3 access, use {\"aws.skip_signature\": True, \"aws.region\": \"us-west-2\"} for anonymous access to public buckets.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sd = sedona.db.connect()\n&gt;&gt;&gt; url = \"https://github.com/apache/sedona-testing/raw/refs/heads/main/data/parquet/geoparquet-1.1.0.parquet\"\n&gt;&gt;&gt; sd.read_parquet(url)\n&lt;sedonadb.dataframe.DataFrame object at ...&gt;\n</code></pre>"},{"location":"reference/python/#sedonadb.context.SedonaContext.sql","title":"sql","text":"<pre><code>sql(sql: str) -&gt; DataFrame\n</code></pre> <p>Create a DataFrame by executing SQL</p> <p>Parses a SQL string into a logical plan and returns a DataFrame that can be used to request results or further modify the query.</p> <p>Parameters:</p> <ul> <li> <code>sql</code>               (<code>str</code>)           \u2013            <p>A single SQL statement.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sd = sedona.db.connect()\n&gt;&gt;&gt; sd.sql(\"SELECT ST_Point(0, 1) as geom\")\n&lt;sedonadb.dataframe.DataFrame object at ...&gt;\n</code></pre>"},{"location":"reference/python/#sedonadb.context.SedonaContext.view","title":"view","text":"<pre><code>view(name: str) -&gt; DataFrame\n</code></pre> <p>Create a DataFrame from a named view</p> <p>Refer to a named view registered with this context.</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name of the view</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sd = sedona.db.connect()\n&gt;&gt;&gt; sd.sql(\"SELECT ST_Point(0, 1) as geom\").to_view(\"foofy\")\n&gt;&gt;&gt; sd.view(\"foofy\").show()\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    geom    \u2502\n\u2502  geometry  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 POINT(0 1) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; sd.drop_view(\"foofy\")\n</code></pre>"},{"location":"reference/python/#sedonadb.context.configure_proj","title":"configure_proj","text":"<pre><code>configure_proj(\n    preset: Literal[\n        \"auto\", \"pyproj\", \"homebrew\", \"conda\", \"system\", None\n    ] = None,\n    *,\n    shared_library: Union[str, Path] = None,\n    database_path: Union[str, Path] = None,\n    search_path: Union[str, Path] = None,\n    verbose: bool = False,\n)\n</code></pre> <p>Configure PROJ source</p> <p>SedonaDB loads PROJ dynamically to ensure aligned results and configuration against other Python and/or system libraries. This is normally configured on package load but may need additional configuration (particularly if the automatic configuration fails).</p> <p>This function may be called at any time; however, once ST_Transform has been called, subsequent configuration has no effect.</p> <p>Parameters:</p> <ul> <li> <code>preset</code>               (<code>Literal['auto', 'pyproj', 'homebrew', 'conda', 'system', None]</code>, default:                   <code>None</code> )           \u2013            <p>One of: - None: Use custom values of shared_library and/or other keyword   arguments. - auto: Try all presets in the order pyproj, conda, homebrew,   system and warn if none succeeded. - pyproj: Attempt to use shared libraries bundled with pyproj.   This aligns transformations with those performed by geopandas   and is the option that is tried first. - conda: Attempt to load libproj and data files installed via   <code>conda install proj</code>. - homebrew: Attempt to load libproj and data files installed   via <code>brew install proj</code>. Note that the Homebrew install   also includes proj-data grid files and may be able to perform   more accurate transforms by default/without network capability. - system: Attempt to load libproj from a directory already on   LD_LIBRARY_PATH (linux), DYLD_LIBRARY_PATH (MacOS), or PATH   (Windows). This should find the version of PROJ installed   by a Linux system package manager.</p> </li> <li> <code>shared_library</code>               (<code>Union[str, Path]</code>, default:                   <code>None</code> )           \u2013            <p>Path to a PROJ shared library.</p> </li> <li> <code>database_path</code>               (<code>Union[str, Path]</code>, default:                   <code>None</code> )           \u2013            <p>Path to the PROJ database (proj.db).</p> </li> <li> <code>search_path</code>               (<code>Union[str, Path]</code>, default:                   <code>None</code> )           \u2013            <p>Path to the directory containing PROJ data files.</p> </li> <li> <code>verbose</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, print information about the configuration process.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sedona.db.configure_proj(\"auto\")\n</code></pre>"},{"location":"reference/python/#sedonadb.context.connect","title":"connect","text":"<pre><code>connect() -&gt; SedonaContext\n</code></pre> <p>Create a new SedonaContext</p>"},{"location":"reference/python/#sedonadb.dataframe","title":"sedonadb.dataframe","text":""},{"location":"reference/python/#sedonadb.dataframe.DataFrame","title":"DataFrame","text":"<p>Representation of a (lazy) collection of columns</p> <p>This object is usually constructed from a SedonaContext][sedonadb.context.SedonaContext] by importing an object, reading a file, or executing SQL.</p>"},{"location":"reference/python/#sedonadb.dataframe.DataFrame.schema","title":"schema  <code>property</code>","text":"<pre><code>schema\n</code></pre> <p>Return the column names and data types</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sd = sedona.db.connect()\n&gt;&gt;&gt; df = sd.sql(\"SELECT 1 as one\")\n&gt;&gt;&gt; df.schema\nSedonaSchema with 1 field:\n  one: non-nullable int64&lt;Int64&gt;\n&gt;&gt;&gt; df.schema.field(0)\nSedonaField one: non-nullable int64&lt;Int64&gt;\n&gt;&gt;&gt; df.schema.field(0).name, df.schema.field(0).type\n('one', SedonaType int64&lt;Int64&gt;)\n</code></pre>"},{"location":"reference/python/#sedonadb.dataframe.DataFrame.__arrow_c_schema__","title":"__arrow_c_schema__","text":"<pre><code>__arrow_c_schema__()\n</code></pre> <p>ArrowSchema PyCapsule interface</p> <p>Returns a PyCapsule wrapping an Arrow C Schema for interoperability with libraries that understand Arrow C data types. See the Arrow PyCapsule interface for more details.</p>"},{"location":"reference/python/#sedonadb.dataframe.DataFrame.__arrow_c_stream__","title":"__arrow_c_stream__","text":"<pre><code>__arrow_c_stream__(requested_schema: Any = None)\n</code></pre> <p>ArrowArrayStream Stream PyCapsule interface</p> <p>Returns a PyCapsule wrapping an Arrow C ArrayStream for interoperability with libraries that understand Arrow C data types. See the Arrow PyCapsule interface for more details.</p> <p>Parameters:</p> <ul> <li> <code>requested_schema</code>               (<code>Any</code>, default:                   <code>None</code> )           \u2013            <p>A PyCapsule representing the desired output schema.</p> </li> </ul>"},{"location":"reference/python/#sedonadb.dataframe.DataFrame.count","title":"count","text":"<pre><code>count() -&gt; int\n</code></pre> <p>Compute the number of rows in this DataFrame</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sd = sedona.db.connect()\n&gt;&gt;&gt; df = sd.sql(\"SELECT * FROM (VALUES ('one'), ('two'), ('three')) AS t(val)\")\n&gt;&gt;&gt; df.count()\n3\n</code></pre>"},{"location":"reference/python/#sedonadb.dataframe.DataFrame.execute","title":"execute","text":"<pre><code>execute() -&gt; None\n</code></pre> <p>Execute the plan represented by this DataFrame</p> <p>This will execute the query without collecting results into memory, which is useful for executing SQL statements like SET, CREATE VIEW, and CREATE EXTERNAL TABLE.</p> <p>Note that this is functionally similar to <code>.count()</code> except it does not apply any optimizations (e.g., does not use statistics to avoid reading data to calculate a count).</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sd = sedona.db.connect()\n&gt;&gt;&gt; sd.sql(\"CREATE OR REPLACE VIEW temp_view AS SELECT 1 as one\").execute()\n0\n&gt;&gt;&gt; sd.view(\"temp_view\").show()\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  one  \u2502\n\u2502 int64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502     1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"reference/python/#sedonadb.dataframe.DataFrame.explain","title":"explain","text":"<pre><code>explain(type: str = 'standard', format: str = 'indent') -&gt; DataFrame\n</code></pre> <p>Return the execution plan for this DataFrame as a DataFrame</p> <p>Retrieves the logical and physical execution plans that will be used to compute this DataFrame. This is useful for understanding query performance and optimization.</p> <p>Parameters:</p> <ul> <li> <code>type</code>               (<code>str</code>, default:                   <code>'standard'</code> )           \u2013            <p>The type of explain plan to generate. Supported values are: \"standard\" (default) - shows logical and physical plans, \"extended\" - includes additional query optimization details, \"analyze\" - executes the plan and reports actual metrics.</p> </li> <li> <code>format</code>               (<code>str</code>, default:                   <code>'indent'</code> )           \u2013            <p>The format to use for displaying the plan. Supported formats are \"indent\" (default), \"tree\", \"pgjson\" and \"graphviz\".</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>DataFrame</code>           \u2013            <p>A DataFrame containing the execution plan information with columns</p> </li> <li> <code>DataFrame</code>           \u2013            <p>'plan_type' and 'plan'.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import sedonadb\n&gt;&gt;&gt; con = sedonadb.connect()\n&gt;&gt;&gt; df = con.sql(\"SELECT 1 as one\")\n&gt;&gt;&gt; df.explain().show()\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   plan_type   \u2506               plan              \u2502\n\u2502      utf8     \u2506               utf8              \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 logical_plan  \u2506 Projection: Int64(1) AS one     \u2502\n\u2502               \u2506   EmptyRelation                 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 physical_plan \u2506 ProjectionExec: expr=[1 as one] \u2502\n\u2502               \u2506   PlaceholderRowExec            \u2502\n\u2502               \u2506                                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"reference/python/#sedonadb.dataframe.DataFrame.head","title":"head","text":"<pre><code>head(n: int = 5) -&gt; DataFrame\n</code></pre> <p>Limit result to the first n rows</p> <p>Note that this is non-deterministic for many queries.</p> <p>Parameters:</p> <ul> <li> <code>n</code>               (<code>int</code>, default:                   <code>5</code> )           \u2013            <p>The number of rows to return</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sd = sedona.db.connect()\n&gt;&gt;&gt; df = sd.sql(\"SELECT * FROM (VALUES ('one'), ('two'), ('three')) AS t(val)\")\n&gt;&gt;&gt; df.head(1).show()\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  val \u2502\n\u2502 utf8 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 one  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"reference/python/#sedonadb.dataframe.DataFrame.limit","title":"limit","text":"<pre><code>limit(n: Optional[int], /, *, offset: int = 0) -&gt; DataFrame\n</code></pre> <p>Limit result to n rows starting at offset</p> <p>Note that this is non-deterministic for many queries.</p> <p>Parameters:</p> <ul> <li> <code>n</code>               (<code>Optional[int]</code>)           \u2013            <p>The number of rows to return</p> </li> <li> <code>offset</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>The number of rows to skip (optional)</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sd = sedona.db.connect()\n&gt;&gt;&gt; df = sd.sql(\"SELECT * FROM (VALUES ('one'), ('two'), ('three')) AS t(val)\")\n&gt;&gt;&gt; df.limit(1).show()\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  val \u2502\n\u2502 utf8 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 one  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n&gt;&gt;&gt; df.limit(1, offset=2).show()\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  val  \u2502\n\u2502  utf8 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 three \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"reference/python/#sedonadb.dataframe.DataFrame.show","title":"show","text":"<pre><code>show(\n    limit: Optional[int] = 10, width: Optional[int] = None, ascii: bool = False\n) -&gt; str\n</code></pre> <p>Print the first limit rows to the console</p> <p>Parameters:</p> <ul> <li> <code>limit</code>               (<code>Optional[int]</code>, default:                   <code>10</code> )           \u2013            <p>The number of rows to display. Using None will display the entire table which may result in very large output.</p> </li> <li> <code>width</code>               (<code>Optional[int]</code>, default:                   <code>None</code> )           \u2013            <p>The number of characters to use to display the output. If None, uses <code>Options.width</code> or detects the value from the current terminal if available. The default width is 100 characters if a width is not set by another mechanism.</p> </li> <li> <code>ascii</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Use True to disable UTF-8 characters in the output.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sd = sedona.db.connect()\n&gt;&gt;&gt; sd.sql(\"SELECT ST_Point(0, 1) as geometry\").show()\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  geometry  \u2502\n\u2502  geometry  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 POINT(0 1) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"reference/python/#sedonadb.dataframe.DataFrame.to_arrow_table","title":"to_arrow_table","text":"<pre><code>to_arrow_table(schema: Any = None) -&gt; Table\n</code></pre> <p>Execute and collect results as a PyArrow Table</p> <p>Executes the logical plan represented by this object and returns a PyArrow Table. This requires that pyarrow is installed.</p> <p>Parameters:</p> <ul> <li> <code>schema</code>               (<code>Any</code>, default:                   <code>None</code> )           \u2013            <p>The requested output schema or <code>None</code> to use the inferred schema.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sd = sedona.db.connect()\n&gt;&gt;&gt; sd.sql(\"SELECT ST_Point(0, 1) as geometry\").to_arrow_table()\npyarrow.Table\ngeometry: extension&lt;geoarrow.wkb&lt;WkbType&gt;&gt; not null\n----\ngeometry: [[01010000000000000000000000000000000000F03F]]\n</code></pre>"},{"location":"reference/python/#sedonadb.dataframe.DataFrame.to_memtable","title":"to_memtable","text":"<pre><code>to_memtable() -&gt; DataFrame\n</code></pre> <p>Collect a data frame into a memtable</p> <p>Executes the logical plan represented by this object and returns a DataFrame representing it.</p> <p>Does not guarantee ordering of rows.  Use <code>to_arrow_table()</code> if ordering is needed.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sd = sedona.db.connect()\n&gt;&gt;&gt; sd.sql(\"SELECT ST_Point(0, 1) as geom\").to_memtable().show()\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    geom    \u2502\n\u2502  geometry  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 POINT(0 1) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"reference/python/#sedonadb.dataframe.DataFrame.to_pandas","title":"to_pandas","text":"<pre><code>to_pandas(geometry: Optional[str] = None) -&gt; Union[DataFrame, GeoDataFrame]\n</code></pre> <p>Execute and collect results as a pandas DataFrame or GeoDataFrame</p> <p>If this data frame contains geometry columns, collect results as a single <code>geopandas.GeoDataFrame</code>. Otherwise, collect results as a <code>pandas.DataFrame</code>.</p> <p>Parameters:</p> <ul> <li> <code>geometry</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>If specified, the name of the column to use for the default geometry column. If not specified, this is inferred as the column named \"geometry\", the column named \"geography\", or the first column with a spatial data type (in that order).</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sd = sedona.db.connect()\n&gt;&gt;&gt; sd.sql(\"SELECT ST_Point(0, 1) as geometry\").to_pandas()\n      geometry\n0  POINT (0 1)\n</code></pre>"},{"location":"reference/python/#sedonadb.dataframe.DataFrame.to_parquet","title":"to_parquet","text":"<pre><code>to_parquet(\n    path: Union[str, Path],\n    *,\n    partition_by: Optional[Union[str, Iterable[str]]] = None,\n    sort_by: Optional[Union[str, Iterable[str]]] = None,\n    single_file_output: Optional[bool] = None,\n)\n</code></pre> <p>Write this DataFrame to one or more (Geo)Parquet files</p> <p>For input that contains geometry columns, GeoParquet metadata is written such that suitable readers can recreate Geometry/Geography types when reading the output.</p> <p>Parameters:</p> <ul> <li> <code>path</code>               (<code>Union[str, Path]</code>)           \u2013            <p>A filename or directory to which parquet file(s) should be written.</p> </li> <li> <code>partition_by</code>               (<code>Optional[Union[str, Iterable[str]]]</code>, default:                   <code>None</code> )           \u2013            <p>A vector of column names to partition by. If non-empty, applies hive-style partitioning to the output.</p> </li> <li> <code>sort_by</code>               (<code>Optional[Union[str, Iterable[str]]]</code>, default:                   <code>None</code> )           \u2013            <p>A vector of column names to sort by. Currently only ascending sort is supported.</p> </li> <li> <code>single_file_output</code>               (<code>Optional[bool]</code>, default:                   <code>None</code> )           \u2013            <p>Use True or False to force writing a single Parquet file vs. writing one file per partition to a directory. By default, a single file is written if <code>partition_by</code> is unspecified and <code>path</code> ends with <code>.parquet</code>.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; sd = sedona.db.connect()\n&gt;&gt;&gt; td = tempfile.TemporaryDirectory()\n&gt;&gt;&gt; url = \"https://github.com/apache/sedona-testing/raw/refs/heads/main/data/parquet/geoparquet-1.1.0.parquet\"\n&gt;&gt;&gt; sd.read_parquet(url).to_parquet(f\"{td.name}/tmp.parquet\")\n</code></pre>"},{"location":"reference/python/#sedonadb.dataframe.DataFrame.to_view","title":"to_view","text":"<pre><code>to_view(name: str, overwrite: bool = False)\n</code></pre> <p>Create a view based on the query represented by this object</p> <p>Registers this logical plan as a named view with the underlying context such that it can be referred to in SQL.</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name to which this query should be referred</p> </li> <li> <code>overwrite</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Use <code>True</code> to overwrite an existing view of this name</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sd = sedona.db.connect()\n&gt;&gt;&gt; sd.sql(\"SELECT ST_Point(0, 1) as geom\").to_view(\"foofy\")\n&gt;&gt;&gt; sd.view(\"foofy\").show()\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    geom    \u2502\n\u2502  geometry  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 POINT(0 1) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"reference/python/#sedonadb.testing","title":"sedonadb.testing","text":""},{"location":"reference/python/#sedonadb.testing.DBEngine","title":"DBEngine","text":"<p>Engine-agnostic catalog and SQL engine</p> <p>Represents a connection to an engine, abstracting the details of registering a few common types of inputs and generating a few common types of outputs. This is intended for general testing and benchmarking usage and should not be used for anything other than that purpose. Notably, generated SQL is not hardened against injection and table creators always drop any existing table of that name.</p>"},{"location":"reference/python/#sedonadb.testing.DBEngine.assert_query_result","title":"assert_query_result","text":"<pre><code>assert_query_result(query: str, expected, **kwargs) -&gt; DBEngine\n</code></pre> <p>Assert a SQL query result matches an expected target</p> <p>A wrapper around execute_and_collect() and assert_result() that captures the most common usage of the DBEngine.</p>"},{"location":"reference/python/#sedonadb.testing.DBEngine.assert_result","title":"assert_result","text":"<pre><code>assert_result(result, expected, **kwargs) -&gt; DBEngine\n</code></pre> <p>Assert a result against an expected target</p> <p>Supported expected targets include:</p> <ul> <li>A pyarrow.Table (compared using ==)</li> <li>A geopandas.GeoDataFrame (compared using geopandas.testing)</li> <li>A pandas.DataFrame (for non-spatial results; compared using pandas.testing)</li> <li>A list of tuples where all values have been converted to strings. For   geometry results, these strings are converted to WKT using geoarrow.pyarrow   (which ensures a consistent WKT output format).</li> <li>A tuple of strings as the string output of a single row</li> <li>A string as the string output of a single column of a single row</li> <li>A bool for a single boolean value</li> <li>An int or float for single numeric values (optionally with a numeric_epsilon)</li> <li>bytes for single binary values</li> </ul> <p>Using Arrow table equality is the most strict (ensures exact type equality and byte-for-byte value equality); however, string output is most useful for checking logical value quality among engines. GeoPandas/Pandas expected targets generate the most useful assertion failures and are probably the best option for general usage.</p>"},{"location":"reference/python/#sedonadb.testing.DBEngine.close","title":"close","text":"<pre><code>close()\n</code></pre> <p>Close the connection - base implementation does nothing</p>"},{"location":"reference/python/#sedonadb.testing.DBEngine.create_or_skip","title":"create_or_skip  <code>classmethod</code>","text":"<pre><code>create_or_skip(*args, **kwargs) -&gt; DBEngine\n</code></pre> <p>Create this engine or call pytest.skip()</p> <p>This is the constructor that should be used in tests to ensure that integration style tests don't cause failure for contributors working on Python-only behaviour.</p> <p>If SEDONADB_PYTHON_NO_SKIP_TESTS is set, this function will never skip to avoid accidentally skipping tests on CI.</p>"},{"location":"reference/python/#sedonadb.testing.DBEngine.create_table_arrow","title":"create_table_arrow","text":"<pre><code>create_table_arrow(name, obj) -&gt; DBEngine\n</code></pre> <p>Copy an Arrow readable into an engine's native table format</p>"},{"location":"reference/python/#sedonadb.testing.DBEngine.create_table_pandas","title":"create_table_pandas","text":"<pre><code>create_table_pandas(name, obj) -&gt; DBEngine\n</code></pre> <p>Copy a GeoPandas or Pandas table into an engine's native table format</p>"},{"location":"reference/python/#sedonadb.testing.DBEngine.create_table_parquet","title":"create_table_parquet","text":"<pre><code>create_table_parquet(name, paths) -&gt; DBEngine\n</code></pre> <p>Scan one or more Parquet files and bring them an the engine's native table format</p> <p>This is needed for engines that can't lazily scan Parquet (e.g., PostGIS) or engines that have an optimized internal format (e.g., DuckDB). The ability of engines to push down a scan into their own table format is variable.</p>"},{"location":"reference/python/#sedonadb.testing.DBEngine.create_view_parquet","title":"create_view_parquet","text":"<pre><code>create_view_parquet(name, paths) -&gt; DBEngine\n</code></pre> <p>Create a named view of Parquet files without scanning them</p> <p>This is usually the best option for a benchmark if both engines support pushing down a spatial filter into the Parquet files in question. This is not supported by the PostGIS engine.</p>"},{"location":"reference/python/#sedonadb.testing.DBEngine.execute_and_collect","title":"execute_and_collect","text":"<pre><code>execute_and_collect(query)\n</code></pre> <p>Execute a query and collect results to the driver</p> <p>The output type here is engine-specific (use other methods to resolve the result into concrete output formats). Current engines typically collect results as Arrow; however, result_to_table() is required to guarantee that geometry results are encoded as GeoArrow.</p> <p>This is typically the execution step that should be benchmarked (although the end-to-end time that includes data loading can also be a useful number for some result types)</p>"},{"location":"reference/python/#sedonadb.testing.DBEngine.install_hint","title":"install_hint  <code>classmethod</code>","text":"<pre><code>install_hint() -&gt; str\n</code></pre> <p>A short install hint printed when skipping tests due to failed construction</p>"},{"location":"reference/python/#sedonadb.testing.DBEngine.name","title":"name  <code>classmethod</code>","text":"<pre><code>name() -&gt; str\n</code></pre> <p>This engine's name</p> <p>A short string used to identify this engine in error messages and work around differences in behaviour.</p>"},{"location":"reference/python/#sedonadb.testing.DBEngine.result_to_pandas","title":"result_to_pandas","text":"<pre><code>result_to_pandas(result) -&gt; DataFrame\n</code></pre> <p>Convert a query result into a pandas.DataFrame or geopandas.GeoDataFrame</p>"},{"location":"reference/python/#sedonadb.testing.DBEngine.result_to_table","title":"result_to_table","text":"<pre><code>result_to_table(result) -&gt; Table\n</code></pre> <p>Convert a query result into a PyArrow Table</p>"},{"location":"reference/python/#sedonadb.testing.DBEngine.result_to_tuples","title":"result_to_tuples","text":"<pre><code>result_to_tuples(result, *, wkt_precision=None, **kwargs) -&gt; List[Tuple[str]]\n</code></pre> <p>Convert a query result into row tuples</p> <p>This option strips away fine-grained type information but is helpful for generally asserting a query result or verifying results between engines that have (e.g.) differing integer handling.</p>"},{"location":"reference/python/#sedonadb.testing.DuckDB","title":"DuckDB","text":"<p>               Bases: <code>DBEngine</code></p> <p>A DuckDB implementation of the DBEngine using DuckDB Python</p>"},{"location":"reference/python/#sedonadb.testing.PostGIS","title":"PostGIS","text":"<p>               Bases: <code>DBEngine</code></p> <p>A PostGIS implementation of the DBEngine using ADBC</p> <p>The default constructor uses the URI of the container provided in the source repository's compose.yml; however, a custom URI can be provided as well to connect to non-docker PostGIS.</p>"},{"location":"reference/python/#sedonadb.testing.PostGIS.close","title":"close","text":"<pre><code>close()\n</code></pre> <p>Close the connection</p>"},{"location":"reference/python/#sedonadb.testing.SedonaDB","title":"SedonaDB","text":"<p>               Bases: <code>DBEngine</code></p> <p>A SedonaDB implementation of the DBEngine using the Python bindings</p>"},{"location":"reference/python/#sedonadb.testing.geog_or_null","title":"geog_or_null","text":"<pre><code>geog_or_null(arg)\n</code></pre> <p>Format SQL expression for a geography object or NULL</p>"},{"location":"reference/python/#sedonadb.testing.geom_or_null","title":"geom_or_null","text":"<pre><code>geom_or_null(arg)\n</code></pre> <p>Format SQL expression for a geometry object or NULL</p>"},{"location":"reference/python/#sedonadb.testing.skip_if_not_exists","title":"skip_if_not_exists","text":"<pre><code>skip_if_not_exists(path: Path)\n</code></pre> <p>Skip a test using pytest.skip() if path does not exist</p> <p>If SEDONADB_PYTHON_NO_SKIP_TESTS is set, this function will never skip to avoid accidentally skipping tests on CI.</p>"},{"location":"reference/python/#sedonadb.testing.val_or_null","title":"val_or_null","text":"<pre><code>val_or_null(arg)\n</code></pre> <p>Format SQL expression for a value or NULL</p>"},{"location":"reference/python/#sedonadb.dbapi","title":"sedonadb.dbapi","text":""},{"location":"reference/python/#sedonadb.dbapi.connect","title":"connect","text":"<pre><code>connect(**kwargs: Mapping[str, Any]) -&gt; Connection\n</code></pre> <p>Connect to Sedona via Python DBAPI</p> <p>Creates a DBAPI-compatible connection as a thin wrapper around the ADBC Python driver manager's DBAPI compatibility layer. Support for DBAPI is experimental.</p> <p>Parameters:</p> <ul> <li> <code>kwargs</code>               (<code>Mapping[str, Any]</code>, default:                   <code>{}</code> )           \u2013            <p>Extra keyword arguments passed to <code>adbc_driver_manager.dbapi.Connection()</code>.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; con = sedona.dbapi.connect()\n&gt;&gt;&gt; with con.cursor() as cur:\n...     cur.execute(\"SELECT 1 as one\")\n...     cur.fetchall()\n[(1,)]\n</code></pre>"},{"location":"reference/sql-joins/","title":"Spatial Joins","text":""},{"location":"reference/sql-joins/#spatial-joins","title":"Spatial Joins","text":"<p>You can perform spatial joins using standard SQL <code>INNER JOIN</code> syntax. The join condition is defined in the <code>ON</code> clause using a spatial function that specifies the relationship between the geometries of the two tables.</p>"},{"location":"reference/sql-joins/#general-spatial-join","title":"General Spatial Join","text":"<p>Use functions like <code>ST_Contains</code>, <code>ST_Intersects</code>, or <code>ST_Within</code> to join tables based on their spatial relationship.</p>"},{"location":"reference/sql-joins/#example","title":"Example","text":"<p>Assign a country to each city by checking which country polygon contains each city point.</p> <pre><code>SELECT\n    cities.name as city,\n    countries.name as country\nFROM\n    cities\nINNER JOIN\n    countries\n    ON ST_Contains(countries.geometry, cities.geometry)\n</code></pre>"},{"location":"reference/sql-joins/#k-nearest-neighbor-knn-join","title":"K-Nearest Neighbor (KNN) Join","text":"<p>Use the specialized <code>ST_KNN</code> function to find the k nearest neighbors from one table for each geometry in another. This is useful for proximity analysis.</p>"},{"location":"reference/sql-joins/#example_1","title":"Example","text":"<p>For each city, find the 5 other closest cities.</p> <pre><code>SELECT\n    cities_l.name AS city,\n    cities_r.name AS nearest_neighbor\nFROM\n    cities AS cities_l\nINNER JOIN\n    cities AS cities_r\n    ON ST_KNN(cities_l.geometry, cities_r.geometry, 5, false)\n</code></pre>"},{"location":"reference/sql-joins/#optimization-barrier","title":"Optimization Barrier","text":"<p>Use the <code>barrier</code> function to prevent filter pushdown and control predicate evaluation order in complex spatial joins. This function creates an optimization barrier by evaluating boolean expressions at runtime.</p> <p>The <code>barrier</code> function takes a boolean expression as a string, followed by pairs of variable names and their values that will be substituted into the expression:</p> <pre><code>barrier(expression, var_name1, var_value1, var_name2, var_value2, ...)\n</code></pre> <p>The placement of filters relative to KNN joins changes the semantic meaning of the query:</p> <ul> <li>Filter before KNN: First filters the data, then finds K nearest neighbors from the filtered subset. This answers \"What are the K nearest high-rated restaurants?\"</li> <li>Filter after KNN: First finds K nearest neighbors from all data, then filters those results. This answers \"Of the K nearest restaurants, which ones are high-rated?\"</li> </ul>"},{"location":"reference/sql-joins/#example_2","title":"Example","text":"<p>Find the 3 nearest restaurants for each luxury hotel, and then filter the results to only show pairs where the restaurant is also high-rated.</p> <pre><code>SELECT\n    h.name AS hotel,\n    r.name AS restaurant,\n    r.rating\nFROM\n    hotels AS h\nINNER JOIN\n    restaurants AS r\n    ON ST_KNN(h.geometry, r.geometry, 3, false)\nWHERE\n    barrier('rating &gt; 4.0 AND stars &gt;= 4',\n            'rating', r.rating,\n            'stars', h.stars)\n</code></pre> <p>With the barrier function, this query first finds the 3 nearest restaurants to each hotel (regardless of rating), then filters to keep only those pairs where the restaurant has rating &gt; 4.0 and the hotel has stars &gt;= 4. Without the barrier, an optimizer might push the filters down, changing the query to first filter for high-rated restaurants and luxury hotels, then find the 3 nearest among those filtered sets.</p>"},{"location":"reference/sql/","title":"SQL","text":""},{"location":"reference/sql/#sql-api-reference","title":"SQL API Reference","text":"<p>The following SQL functions are available for SedonaDB.</p> <p>You can query data directly from files and URLs by treating them like database tables. This feature supports formats like Parquet, CSV, and JSON.</p> <p>To query a file, place its path or URL in single quotes within the <code>FROM</code> clause.</p> <pre><code># Query a remote Parquet file directly\n\"SELECT * FROM 'https://raw.githubusercontent.com/geoarrow/geoarrow-data/v0.2.0/natural-earth/files/natural-earth_cities_geo.parquet'\").show()\n</code></pre>"},{"location":"reference/sql/#st_analyze_aggr","title":"ST_Analyze_Aggr","text":""},{"location":"reference/sql/#description","title":"Description","text":"<p>Return the statistics of geometries for the input geometry.</p>"},{"location":"reference/sql/#format","title":"Format","text":"<p><code>ST_Analyze_Aggr (A: Geometry)</code></p>"},{"location":"reference/sql/#arguments","title":"Arguments","text":"<ul> <li>geom: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example","title":"SQL Example","text":"<pre><code>SELECT ST_Analyze_Aggr(ST_GeomFromText('MULTIPOINT(1.1 101.1,2.1 102.1,3.1 103.1,4.1 104.1,5.1 105.1,6.1 106.1,7.1 107.1,8.1 108.1,9.1 109.1,10.1 110.1)'))\n</code></pre>"},{"location":"reference/sql/#st_area","title":"ST_Area","text":""},{"location":"reference/sql/#description_1","title":"Description","text":"<p>Return the area of a geometry.</p>"},{"location":"reference/sql/#format_1","title":"Format","text":"<p><code>ST_Area (A: Geometry)</code></p>"},{"location":"reference/sql/#arguments_1","title":"Arguments","text":"<ul> <li>geom: Input geometry.</li> </ul>"},{"location":"reference/sql/#sql-example_1","title":"SQL Example","text":"<pre><code>SELECT ST_Area(ST_GeomFromWKT('POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))'));\n</code></pre>"},{"location":"reference/sql/#st_asbinary","title":"ST_AsBinary","text":""},{"location":"reference/sql/#description_2","title":"Description","text":"<p>Return the Well-Known Binary representation of a geometry or geography. This function also has the alias ST_AsWKB.</p>"},{"location":"reference/sql/#format_2","title":"Format","text":"<p><code>ST_AsBinary (A: Geometry)</code></p>"},{"location":"reference/sql/#arguments_2","title":"Arguments","text":"<ul> <li>geom: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_2","title":"SQL Example","text":"<pre><code>SELECT ST_AsBinary(ST_Point(1.0, 2.0));\n</code></pre>"},{"location":"reference/sql/#st_astext","title":"ST_AsText","text":""},{"location":"reference/sql/#description_3","title":"Description","text":"<p>Return the Well-Known Text string representation of a geometry or geography.</p>"},{"location":"reference/sql/#format_3","title":"Format","text":"<p><code>ST_AsText (A: Geometry)</code></p>"},{"location":"reference/sql/#arguments_3","title":"Arguments","text":"<ul> <li>geom: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_3","title":"SQL Example","text":"<pre><code>SELECT ST_AsText(ST_Point(1.0, 2.0))\n</code></pre>"},{"location":"reference/sql/#st_buffer","title":"ST_Buffer","text":""},{"location":"reference/sql/#description_4","title":"Description","text":"<p>Returns a geometry that represents all points whose distance from the input geometry is less than or equal to a specified distance.</p>"},{"location":"reference/sql/#format_4","title":"Format","text":"<p><code>ST_Buffer (A: Geometry, distance: Double)</code></p>"},{"location":"reference/sql/#arguments_4","title":"Arguments","text":"<ul> <li>geom: Input geometry.</li> <li>distance: Radius of the buffer.</li> </ul>"},{"location":"reference/sql/#sql-example_4","title":"SQL Example","text":"<pre><code>SELECT ST_Buffer(ST_GeomFromText('POLYGON ((10 10, 11 10, 10 11, 10 10))'), 1.0);\n</code></pre>"},{"location":"reference/sql/#st_centroid","title":"ST_Centroid","text":""},{"location":"reference/sql/#description_5","title":"Description","text":"<p>Returns the centroid of geom.</p>"},{"location":"reference/sql/#format_5","title":"Format","text":"<p><code>ST_Centroid (A: Geometry)</code></p>"},{"location":"reference/sql/#arguments_5","title":"Arguments","text":"<ul> <li>geom: Input geometry.</li> </ul>"},{"location":"reference/sql/#sql-example_5","title":"SQL Example","text":"<pre><code>SELECT ST_AsText(ST_Centroid(ST_GeomFromWKT('POLYGON ((0 0, 10 0, 10 10, 0 10, 0 0))')));\n</code></pre>"},{"location":"reference/sql/#st_collect","title":"ST_Collect","text":""},{"location":"reference/sql/#description_6","title":"Description","text":"<p>Aggregates a set of geometries into a single <code>GeometryCollection</code>, <code>MultiPoint</code>, <code>MultiLineString</code>, or <code>MultiPolygon</code>. If all input geometries are of the same type (e.g., all points), it creates a multi-geometry of that type. If the geometries are of mixed types, it returns a <code>GeometryCollection</code>.</p>"},{"location":"reference/sql/#format_6","title":"Format","text":"<p><code>ST_Collect (geom: Geometry)</code></p>"},{"location":"reference/sql/#arguments_6","title":"Arguments","text":"<ul> <li>geom: The input geometry or geography to be collected.</li> </ul>"},{"location":"reference/sql/#sql-example_6","title":"SQL Example","text":"<pre><code>SELECT ST_Collect(ST_GeomFromWKT('MULTIPOINT (0 1, 10 11)'))\n</code></pre>"},{"location":"reference/sql/#st_contains","title":"ST_Contains","text":""},{"location":"reference/sql/#description_7","title":"Description","text":"<p>Return true if geomA contains geomB.</p>"},{"location":"reference/sql/#format_7","title":"Format","text":"<p><code>ST_Contains (A: Geometry, B: Geometry)</code></p>"},{"location":"reference/sql/#arguments_7","title":"Arguments","text":"<ul> <li>geomA: Input geometry or geography.</li> <li>geomB: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_7","title":"SQL Example","text":"<pre><code>SELECT ST_Contains(ST_Point(0.25 0.25), ST_GeomFromText('POLYGON ((0 0, 1 0, 0 1, 0 0))')) AS val\n</code></pre>"},{"location":"reference/sql/#st_coveredby","title":"ST_CoveredBy","text":""},{"location":"reference/sql/#description_8","title":"Description","text":"<p>Return true if geomA is covered by geomB.</p>"},{"location":"reference/sql/#format_8","title":"Format","text":"<p><code>ST_CoveredBy (A: Geometry, B: Geometry)</code></p>"},{"location":"reference/sql/#arguments_8","title":"Arguments","text":"<ul> <li>geomA: Input geometry or geography.</li> <li>geomB: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_8","title":"SQL Example","text":"<pre><code>SELECT ST_CoveredBy(ST_Point(0.25 0.25), ST_GeomFromText('POLYGON ((0 0, 1 0, 0 1, 0 0))')) AS val\n</code></pre>"},{"location":"reference/sql/#st_covers","title":"ST_Covers","text":""},{"location":"reference/sql/#description_9","title":"Description","text":"<p>Return true if geomA covers geomB.</p>"},{"location":"reference/sql/#format_9","title":"Format","text":"<p><code>ST_Covers (A: Geometry, B: Geometry)</code></p>"},{"location":"reference/sql/#arguments_9","title":"Arguments","text":"<ul> <li>geomA: Input geometry or geography.</li> <li>geomB: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_9","title":"SQL Example","text":"<pre><code>SELECT ST_Covers(ST_Point(0.25 0.25), ST_GeomFromText('POLYGON ((0 0, 1 0, 0 1, 0 0))')) AS val\n</code></pre>"},{"location":"reference/sql/#st_difference","title":"ST_Difference","text":""},{"location":"reference/sql/#description_10","title":"Description","text":"<p>Computes the difference between geomA and geomB.</p>"},{"location":"reference/sql/#format_10","title":"Format","text":"<p><code>ST_Difference (A: Geometry, B: Geometry)</code></p>"},{"location":"reference/sql/#arguments_10","title":"Arguments","text":"<ul> <li>geomA: Input geometry or geography.</li> <li>geomB: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_10","title":"SQL Example","text":"<pre><code>SELECT ST_Difference(ST_GeomFromText('POLYGON ((1 1, 11 1, 1 11, 0 0))'), ST_GeomFromText('POLYGON ((0 0, 10 0, 0 10, 0 0))')) AS val\n</code></pre>"},{"location":"reference/sql/#st_dimension","title":"ST_Dimension","text":""},{"location":"reference/sql/#description_11","title":"Description","text":"<p>Return the dimension of the geometry.</p>"},{"location":"reference/sql/#format_11","title":"Format","text":"<p><code>ST_Dimension (A: Geometry)</code></p>"},{"location":"reference/sql/#arguments_11","title":"Arguments","text":"<ul> <li>geom: Input geometry.</li> </ul>"},{"location":"reference/sql/#sql-example_11","title":"SQL Example","text":"<pre><code>SELECT ST_Dimension(ST_GeomFromWKT('POLYGON ((0 0, 1 0, 0 1, 0 0))'));\n</code></pre>"},{"location":"reference/sql/#st_disjoint","title":"ST_Disjoint","text":""},{"location":"reference/sql/#description_12","title":"Description","text":"<p>Return true if geomA is disjoint from geomB.</p>"},{"location":"reference/sql/#format_12","title":"Format","text":"<p><code>ST_Disjoint (A: Geometry, B: Geometry)</code></p>"},{"location":"reference/sql/#arguments_12","title":"Arguments","text":"<ul> <li>geomA: Input geometry or geography.</li> <li>geomB: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_12","title":"SQL Example","text":"<pre><code>SELECT ST_Disjoint(ST_Point(0.25 0.25), ST_GeomFromText('POLYGON ((0 0, 1 0, 0 1, 0 0))')) AS val\n</code></pre>"},{"location":"reference/sql/#st_distance","title":"ST_Distance","text":""},{"location":"reference/sql/#description_13","title":"Description","text":"<p>Calculates the distance between geomA and geomB.</p>"},{"location":"reference/sql/#format_13","title":"Format","text":"<p><code>ST_Distance (A: Geometry, B: Geometry)</code></p>"},{"location":"reference/sql/#arguments_13","title":"Arguments","text":"<ul> <li>geomA: Input geometry or geography.</li> <li>geomB: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_13","title":"SQL Example","text":"<pre><code>SELECT ST_Distance(ST_GeomFromText('POLYGON ((10 10, 11 10, 10 11, 10 10))'), ST_GeomFromText('POLYGON ((0 0, 1 0, 0 1, 0 0))')) AS val\n</code></pre>"},{"location":"reference/sql/#st_distancesphere","title":"ST_DistanceSphere","text":""},{"location":"reference/sql/#description_14","title":"Description","text":"<p>Calculates the spherical distance between geomA and geomB.</p>"},{"location":"reference/sql/#format_14","title":"Format","text":"<p><code>ST_DistanceSphere (A: Geometry, B: Geometry)</code></p>"},{"location":"reference/sql/#arguments_14","title":"Arguments","text":"<ul> <li>geomA: Input geometry or geography.</li> <li>geomB: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_14","title":"SQL Example","text":"<pre><code>SELECT ST_DistanceSphere(ST_GeomFromText('POLYGON ((10 10, 11 10, 10 11, 10 10))'), ST_GeomFromText('POLYGON ((0 0, 1 0, 0 1, 0 0))')) AS val\n</code></pre>"},{"location":"reference/sql/#st_distancespheroid","title":"ST_DistanceSpheroid","text":""},{"location":"reference/sql/#description_15","title":"Description","text":"<p>Calculates the spheroidal (ellipsoidal) distance between geomA and geomB.</p>"},{"location":"reference/sql/#format_15","title":"Format","text":"<p><code>ST_DistanceSpheroid (A: Geometry, B: Geometry)</code></p>"},{"location":"reference/sql/#arguments_15","title":"Arguments","text":"<ul> <li>geomA: Input geometry or geography.</li> <li>geomB: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_15","title":"SQL Example","text":"<pre><code>SELECT ST_DistanceSpheroid(ST_GeomFromText('POLYGON ((10 10, 11 10, 10 11, 10 10))'), ST_GeomFromText('POLYGON ((0 0, 1 0, 0 1, 0 0))')) AS val\n</code></pre>"},{"location":"reference/sql/#st_dwithin","title":"ST_DWithin","text":""},{"location":"reference/sql/#description_16","title":"Description","text":"<p>Returns true if two geometries are within a specified distance of each other.</p>"},{"location":"reference/sql/#format_16","title":"Format","text":"<p><code>ST_DWithin (A: Geometry, B: Geometry, distance: Double)</code></p>"},{"location":"reference/sql/#arguments_16","title":"Arguments","text":"<ul> <li>geomA: Input geometry or geography.</li> <li>geomB: Input geometry or geography.</li> <li>distance: Distance in units of the geometry's coordinate system.</li> </ul>"},{"location":"reference/sql/#sql-example_16","title":"SQL Example","text":"<pre><code>SELECT ST_DWithin(ST_Point(0.25, 0.25), ST_GeomFromText('POLYGON ((0 0, 1 0, 0 1, 0 0))'), 0.5);\n</code></pre>"},{"location":"reference/sql/#st_envelope","title":"ST_Envelope","text":""},{"location":"reference/sql/#description_17","title":"Description","text":"<p>Returns the bounding box (envelope) of a geometry as a new geometry. The resulting geometry represents the minimum bounding rectangle that encloses the input geometry. Depending on the input, the output can be a <code>Point</code>, <code>LineString</code>, or <code>Polygon</code>.</p>"},{"location":"reference/sql/#format_17","title":"Format","text":"<p><code>ST_Envelope (A: Geometry)</code></p>"},{"location":"reference/sql/#arguments_17","title":"Arguments","text":"<ul> <li>geom: The input geometry.</li> </ul>"},{"location":"reference/sql/#sql-example_17","title":"SQL Example","text":"<pre><code>SELECT ST_Envelope(ST_Point(1.0, 2.0))\n</code></pre>"},{"location":"reference/sql/#st_envelope_aggr","title":"ST_Envelope_Aggr","text":""},{"location":"reference/sql/#description_18","title":"Description","text":"<p>An aggregate function that returns the collective bounding box (envelope) of a set of geometries.</p>"},{"location":"reference/sql/#format_18","title":"Format","text":"<p><code>ST_Envelope_Aggr (geom: Geometry)</code></p>"},{"location":"reference/sql/#arguments_18","title":"Arguments","text":"<ul> <li>geom: A column of geometries to be aggregated.</li> </ul>"},{"location":"reference/sql/#sql-example_18","title":"SQL Example","text":"<pre><code>-- Create a table with geometries and calculate the aggregate envelope\nWITH shapes(geom) AS (\n    VALUES (ST_GeomFromWKT('POINT (0 1)')),\n           (ST_GeomFromWKT('POINT (10 11)'))\n)\nSELECT ST_AsText(ST_Envelope_Aggr(geom)) FROM shapes;\n-- Returns: POLYGON ((0 1, 0 11, 10 11, 10 1, 0 1))\n</code></pre>"},{"location":"reference/sql/#st_equals","title":"ST_Equals","text":""},{"location":"reference/sql/#description_19","title":"Description","text":"<p>Return true if geomA equals geomB.</p>"},{"location":"reference/sql/#format_19","title":"Format","text":"<p><code>ST_Equals (A: Geometry, B: Geometry)</code></p>"},{"location":"reference/sql/#arguments_19","title":"Arguments","text":"<ul> <li>geomA: Input geometry or geography.</li> <li>geomB: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_19","title":"SQL Example","text":"<pre><code>SELECT ST_Equals(ST_Point(0.25 0.25), ST_GeomFromText('POLYGON ((0 0, 1 0, 0 1, 0 0))')) AS val\n</code></pre>"},{"location":"reference/sql/#st_flipcoordinates","title":"ST_FlipCoordinates","text":""},{"location":"reference/sql/#description_20","title":"Description","text":"<p>Returns a new geometry with the X and Y coordinates of each vertex swapped. This is useful for correcting geometries that have been created with longitude and latitude in the wrong order.</p>"},{"location":"reference/sql/#format_20","title":"Format","text":"<p><code>ST_FlipCoordinates (A: geometry)</code></p>"},{"location":"reference/sql/#arguments_20","title":"Arguments","text":"<ul> <li>geom: The input geometry whose coordinates will be flipped.</li> </ul>"},{"location":"reference/sql/#sql-example_20","title":"SQL Example","text":"<pre><code>SELECT ST_FlipCoordinates(df.geometry)\n</code></pre>"},{"location":"reference/sql/#st_frechetdistance","title":"ST_FrechetDistance","text":""},{"location":"reference/sql/#description_21","title":"Description","text":"<p>Calculates the Frechet distance between geomA and geomB.</p>"},{"location":"reference/sql/#format_21","title":"Format","text":"<p><code>ST_FrechetDistance (A: Geometry, B: Geometry)</code></p>"},{"location":"reference/sql/#arguments_21","title":"Arguments","text":"<ul> <li>geomA: Input geometry or geography.</li> <li>geomB: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_21","title":"SQL Example","text":"<pre><code>SELECT ST_FrechetDistance(ST_GeomFromText('POLYGON ((10 10, 11 10, 10 11, 10 10))'), ST_GeomFromText('POLYGON ((0 0, 1 0, 0 1, 0 0))')) AS val\n</code></pre>"},{"location":"reference/sql/#st_geomfromwkb","title":"ST_GeomFromWKB","text":""},{"location":"reference/sql/#description_22","title":"Description","text":"<p>Construct a Geometry from WKB.</p>"},{"location":"reference/sql/#format_22","title":"Format","text":"<p><code>ST_GeomFromWKB (Wkb: Binary)</code></p>"},{"location":"reference/sql/#arguments_22","title":"Arguments","text":"<ul> <li>WKB: binary: Well-known binary representation of the geometry.</li> </ul>"},{"location":"reference/sql/#sql-example_22","title":"SQL Example","text":"<pre><code>-- Creates a POINT(1 2) geometry from its WKB representation\nSELECT ST_AsText(ST_GeomFromWKB(FROM_HEX('0101000000000000000000F03F0000000000000040')));\n</code></pre>"},{"location":"reference/sql/#st_geomfromwkt","title":"ST_GeomFromWKT","text":""},{"location":"reference/sql/#description_23","title":"Description","text":"<p>Construct a Geometry from WKT. This function also has the alias ST_GeomFromText.</p>"},{"location":"reference/sql/#format_23","title":"Format","text":"<p><code>ST_GeomFromWKT (Wkt: String)</code></p>"},{"location":"reference/sql/#arguments_23","title":"Arguments","text":"<ul> <li>WKT: string: Well-known text representation of the geometry.</li> </ul>"},{"location":"reference/sql/#sql-example_23","title":"SQL Example","text":"<pre><code>SELECT ST_AsText(ST_GeomFromWKT('POINT (30 10)'));\n</code></pre>"},{"location":"reference/sql/#st_geometrytype","title":"ST_GeometryType","text":""},{"location":"reference/sql/#description_24","title":"Description","text":"<p>Return the type of a geometry.</p>"},{"location":"reference/sql/#format_24","title":"Format","text":"<p><code>ST_GeometryType (A: Geometry)</code></p>"},{"location":"reference/sql/#arguments_24","title":"Arguments","text":"<ul> <li>geom: Input geometry.</li> </ul>"},{"location":"reference/sql/#sql-example_24","title":"SQL Example","text":"<pre><code>SELECT ST_GeometryType(ST_GeomFromWKT('POLYGON ((0 0, 1 0, 0 1, 0 0))'))\n</code></pre>"},{"location":"reference/sql/#st_hasm","title":"ST_HasM","text":""},{"location":"reference/sql/#description_25","title":"Description","text":"<p>Return true if the geometry has a M dimension.</p>"},{"location":"reference/sql/#format_25","title":"Format","text":"<p><code>ST_HasM (A: Geometry)</code></p>"},{"location":"reference/sql/#arguments_25","title":"Arguments","text":"<ul> <li>geom: Input geometry.</li> </ul>"},{"location":"reference/sql/#sql-example_25","title":"SQL Example","text":"<pre><code>SELECT ST_HasM(ST_GeomFromWKT('POLYGON ((0 0, 1 0, 0 1, 0 0))'))\n</code></pre>"},{"location":"reference/sql/#st_hasz","title":"ST_HasZ","text":""},{"location":"reference/sql/#description_26","title":"Description","text":"<p>Return true if the geometry has a Z dimension.</p>"},{"location":"reference/sql/#format_26","title":"Format","text":"<p><code>ST_HasZ (A: Geometry)</code></p>"},{"location":"reference/sql/#arguments_26","title":"Arguments","text":"<ul> <li>geom: Input geometry.</li> </ul>"},{"location":"reference/sql/#sql-example_26","title":"SQL Example","text":"<pre><code>SELECT ST_HasZ(ST_GeomFromWKT('POLYGON ((0 0, 1 0, 0 1, 0 0))'))\n</code></pre>"},{"location":"reference/sql/#st_hausdorffdistance","title":"ST_HausdorffDistance","text":""},{"location":"reference/sql/#description_27","title":"Description","text":"<p>Calculates the Hausdorff distance between geomA and geomB.</p>"},{"location":"reference/sql/#format_27","title":"Format","text":"<p><code>ST_HausdorffDistance (A: Geometry, B: Geometry)</code></p>"},{"location":"reference/sql/#arguments_27","title":"Arguments","text":"<ul> <li>geomA: Input geometry or geography.</li> <li>geomB: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_27","title":"SQL Example","text":"<pre><code>SELECT ST_HausdorffDistance(ST_GeomFromText('POLYGON ((10 10, 11 10, 10 11, 10 10))'), ST_GeomFromText('POLYGON ((0 0, 1 0, 0 1, 0 0))')) AS val\n</code></pre>"},{"location":"reference/sql/#st_intersection","title":"ST_Intersection","text":""},{"location":"reference/sql/#description_28","title":"Description","text":"<p>Computes the intersection between geomA and geomB.</p>"},{"location":"reference/sql/#format_28","title":"Format","text":"<p><code>ST_Intersection (A: Geometry, B: Geometry)</code></p>"},{"location":"reference/sql/#arguments_28","title":"Arguments","text":"<ul> <li>geomA: Input geometry or geography.</li> <li>geomB: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_28","title":"SQL Example","text":"<pre><code>SELECT ST_Intersection(ST_GeomFromText('POLYGON ((1 1, 11 1, 1 11, 0 0))'), ST_GeomFromText('POLYGON ((0 0, 10 0, 0 10, 0 0))')) AS val\n</code></pre>"},{"location":"reference/sql/#st_intersection_aggr","title":"ST_Intersection_Aggr","text":""},{"location":"reference/sql/#description_29","title":"Description","text":"<p>An aggregate function that returns the geometric intersection of all geometries in a set.</p>"},{"location":"reference/sql/#format_29","title":"Format","text":"<p><code>ST_Intersection_Aggr (geom: Geometry)</code></p>"},{"location":"reference/sql/#arguments_29","title":"Arguments","text":"<ul> <li>geom: A column of geometries to be aggregated.</li> </ul>"},{"location":"reference/sql/#sql-example_29","title":"SQL Example","text":"<pre><code>-- Create a table with overlapping polygons and find their common intersection\nWITH shapes(geom) AS (\n    VALUES (ST_GeomFromWKT('POLYGON((0 0, 2 0, 2 2, 0 2, 0 0))')),\n           (ST_GeomFromWKT('POLYGON((1 1, 3 1, 3 3, 1 3, 1 1))'))\n)\nSELECT ST_AsText(ST_Intersection_Aggr(geom)) FROM shapes;\n-- Returns: POLYGON ((1 1, 1 2, 2 2, 2 1, 1 1))\n</code></pre>"},{"location":"reference/sql/#st_intersects","title":"ST_Intersects","text":""},{"location":"reference/sql/#description_30","title":"Description","text":"<p>Return true if geomA intersects geomB.</p>"},{"location":"reference/sql/#format_30","title":"Format","text":"<p><code>ST_Intersects (A: Geometry, B: Geometry)</code></p>"},{"location":"reference/sql/#arguments_30","title":"Arguments","text":"<ul> <li>geomA: Input geometry or geography.</li> <li>geomB: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_30","title":"SQL Example","text":"<pre><code>SELECT ST_Intersects(ST_Point(0.25 0.25), ST_GeomFromText('POLYGON ((0 0, 1 0, 0 1, 0 0))')) AS val\n</code></pre>"},{"location":"reference/sql/#st_isempty","title":"ST_IsEmpty","text":""},{"location":"reference/sql/#description_31","title":"Description","text":"<p>Return true if the geometry is empty.</p>"},{"location":"reference/sql/#format_31","title":"Format","text":"<p><code>ST_IsEmpty (A: Geometry)</code></p>"},{"location":"reference/sql/#arguments_31","title":"Arguments","text":"<ul> <li>geom: Input geometry.</li> </ul>"},{"location":"reference/sql/#sql-example_31","title":"SQL Example","text":"<pre><code>SELECT ST_IsEmpty(ST_GeomFromWKT('POLYGON EMPTY'));\n</code></pre>"},{"location":"reference/sql/#st_knn","title":"ST_KNN","text":""},{"location":"reference/sql/#description_32","title":"Description","text":"<p>Return true if geomA finds k nearest neighbors from geomB.</p>"},{"location":"reference/sql/#format_32","title":"Format","text":"<p><code>ST_KNN (A: Geometry, B: Geometry, k: Integer, use_spheroid: Boolean)</code></p>"},{"location":"reference/sql/#arguments_32","title":"Arguments","text":"<ul> <li>geomA: Query geometry or geography.</li> <li>geomB: Object geometry or geography.</li> <li>k: Number of nearest neighbors to find.</li> <li>use_spheroid: Use spheroid distance calculation.</li> </ul>"},{"location":"reference/sql/#sql-example_32","title":"SQL Example","text":"<pre><code>SELECT * FROM table1 a JOIN table2 b ON ST_KNN(a.geom, b.geom, 5, false)\n</code></pre>"},{"location":"reference/sql/#st_length","title":"ST_Length","text":""},{"location":"reference/sql/#description_33","title":"Description","text":"<p>Returns the length of geom. This function only supports LineString, MultiLineString, and GeometryCollections containing linear geometries. Use ST_Perimeter for polygons.</p>"},{"location":"reference/sql/#format_33","title":"Format","text":"<p><code>ST_Length (A: Geometry)</code></p>"},{"location":"reference/sql/#arguments_33","title":"Arguments","text":"<ul> <li>geom: geometry: Input geometry.</li> </ul>"},{"location":"reference/sql/#sql-example_33","title":"SQL Example","text":"<pre><code>SELECT ST_Length(ST_GeomFromWKT('LINESTRING(0 0, 10 0)'));\n</code></pre>"},{"location":"reference/sql/#st_m","title":"ST_M","text":""},{"location":"reference/sql/#description_34","title":"Description","text":"<p>Returns the M (measure) coordinate of a <code>Point</code> geometry. If the geometry does not have an M value, it returns <code>NULL</code>.</p>"},{"location":"reference/sql/#format_34","title":"Format","text":"<p><code>ST_M (A: Point)</code></p>"},{"location":"reference/sql/#arguments_34","title":"Arguments","text":"<ul> <li>geom: The input point geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_34","title":"SQL Example","text":"<pre><code>SELECT ST_M(ST_Point(1.0, 2.0))\n</code></pre>"},{"location":"reference/sql/#st_makeline","title":"ST_MakeLine","text":""},{"location":"reference/sql/#description_35","title":"Description","text":"<p>Creates a <code>LineString</code> from two or more input <code>Point</code>, <code>MultiPoint</code>, or <code>LineString</code> geometries. The function connects the input geometries in the order they are provided to form a single continuous line.</p>"},{"location":"reference/sql/#format_35","title":"Format","text":"<p><code>ST_MakeLine (g1: Geometry or Geography, g2: Geometry or Geography)</code></p>"},{"location":"reference/sql/#arguments_35","title":"Arguments","text":"<ul> <li>g1: The first <code>Point</code>, <code>MultiPoint</code>, or <code>LineString</code> geometry or geography.</li> <li>g2: The second <code>Point</code>, <code>MultiPoint</code>, or <code>LineString</code> geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_35","title":"SQL Example","text":"<pre><code>SELECT ST_MakeLine(ST_Point(0, 1), ST_Point(2, 3)) as geom\n</code></pre>"},{"location":"reference/sql/#st_maxdistance","title":"ST_MaxDistance","text":""},{"location":"reference/sql/#description_36","title":"Description","text":"<p>Calculates the maximum distance between geomA and geomB.</p>"},{"location":"reference/sql/#format_36","title":"Format","text":"<p><code>ST_MaxDistance (A: Geometry, B: Geometry)</code></p>"},{"location":"reference/sql/#arguments_36","title":"Arguments","text":"<ul> <li>geomA: Input geometry or geography.</li> <li>geomB: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_36","title":"SQL Example","text":"<pre><code>SELECT ST_MaxDistance(ST_GeomFromText('POLYGON ((10 10, 11 10, 10 11, 10 10))'), ST_GeomFromText('POLYGON ((0 0, 1 0, 0 1, 0 0))')) AS val\n</code></pre>"},{"location":"reference/sql/#st_mmax","title":"ST_MMax","text":""},{"location":"reference/sql/#description_37","title":"Description","text":"<p>Returns the maximum M (measure) value from a geometry's bounding box.</p>"},{"location":"reference/sql/#format_37","title":"Format","text":"<p><code>ST_MMax (A: Geometry)</code></p>"},{"location":"reference/sql/#arguments_37","title":"Arguments","text":"<ul> <li>geom: The input geometry.</li> </ul>"},{"location":"reference/sql/#sql-example_37","title":"SQL Example","text":"<pre><code>SELECT ST_MMax(ST_GeomFromWKT('POLYGON ((0 0, 1 0, 0 1, 0 0))'))\n</code></pre>"},{"location":"reference/sql/#st_mmin","title":"ST_MMin","text":""},{"location":"reference/sql/#description_38","title":"Description","text":"<p>Returns the minimum M-coordinate (measure) of a geometry's bounding box.</p>"},{"location":"reference/sql/#format_38","title":"Format","text":"<p><code>ST_MMin (A: Geometry)</code></p>"},{"location":"reference/sql/#arguments_38","title":"Arguments","text":"<ul> <li>geom: Input geometry.</li> </ul>"},{"location":"reference/sql/#sql-example_38","title":"SQL Example","text":"<pre><code>SELECT ST_MMin(ST_GeomFromWKT('LINESTRING ZM (1 2 3 4, 5 6 7 8)'));\n-- Returns: 4\n</code></pre>"},{"location":"reference/sql/#st_perimeter","title":"ST_Perimeter","text":""},{"location":"reference/sql/#description_39","title":"Description","text":"<p>This function calculates the 2D perimeter of a given geometry. It supports Polygon, MultiPolygon, and GeometryCollection geometries (as long as the GeometryCollection contains polygonal geometries). For other types, it returns 0. To measure lines, use ST_Length.</p> <p>To get the perimeter in meters, set use_spheroid to true. This calculates the geodesic perimeter using the WGS84 spheroid. When using use_spheroid, the lenient parameter defaults to true, assuming the geometry uses EPSG:4326. To throw an exception instead, set lenient to false.</p>"},{"location":"reference/sql/#format_39","title":"Format","text":"<p><code>ST_Perimeter(geom: Geometry)</code> <code>ST_Perimeter(geom: Geometry, use_spheroid: Boolean)</code> <code>ST_Perimeter(geom: Geometry, use_spheroid: Boolean, lenient: Boolean = True)</code></p>"},{"location":"reference/sql/#arguments_39","title":"Arguments","text":"<ul> <li>geom: Input geometry.</li> <li>use_spheroid: If true, calculates the geodesic perimeter using the WGS84 spheroid. Defaults to false.</li> <li>lenient: If true, assumes the geometry uses EPSG:4326 when use_spheroid is true. Defaults to true.</li> </ul>"},{"location":"reference/sql/#sql-example_39","title":"SQL Example","text":"<pre><code>SELECT ST_Perimeter(ST_GeomFromWKT('POLYGON((0 0, 10 0, 10 10, 0 10, 0 0))'));\n</code></pre>"},{"location":"reference/sql/#st_point","title":"ST_Point","text":""},{"location":"reference/sql/#description_40","title":"Description","text":"<p>Construct a Point Geometry from X and Y.</p>"},{"location":"reference/sql/#format_40","title":"Format","text":"<p><code>ST_Point (x: Double, y: Double)</code></p>"},{"location":"reference/sql/#arguments_40","title":"Arguments","text":"<ul> <li>x: X value.</li> <li>y: Y value.</li> </ul>"},{"location":"reference/sql/#sql-example_40","title":"SQL Example","text":"<pre><code>SELECT ST_AsText(ST_Point(-74.0060, 40.7128));\n</code></pre>"},{"location":"reference/sql/#st_pointm","title":"ST_PointM","text":""},{"location":"reference/sql/#description_41","title":"Description","text":"<p>Constructs a <code>Point</code> with an M (measure) coordinate from X, Y, and M values.</p>"},{"location":"reference/sql/#format_41","title":"Format","text":"<p><code>ST_PointM (x: Double, y: Double, m: Double)</code></p>"},{"location":"reference/sql/#arguments_41","title":"Arguments","text":"<ul> <li>x: The X-coordinate value.</li> <li>y: The Y-coordinate value.</li> <li>m: The M-coordinate (measure) value.</li> </ul>"},{"location":"reference/sql/#sql-example_41","title":"SQL Example","text":"<pre><code>SELECT ST_PointM(-64.36, 45.09, 50.0)\n</code></pre>"},{"location":"reference/sql/#st_pointz","title":"ST_PointZ","text":""},{"location":"reference/sql/#description_42","title":"Description","text":"<p>Constructs a <code>Point</code> with a Z (elevation) coordinate from X, Y, and Z values.</p>"},{"location":"reference/sql/#format_42","title":"Format","text":"<p><code>ST_PointZ (x: Double, y: Double, z: Double)</code></p>"},{"location":"reference/sql/#arguments_42","title":"Arguments","text":"<ul> <li>x: The X-coordinate value.</li> <li>y: The Y-coordinate value.</li> <li>z: The Z-coordinate (elevation) value.</li> </ul>"},{"location":"reference/sql/#sql-example_42","title":"SQL Example","text":"<pre><code>SELECT ST_PointZ(-64.36, 45.09, 100.0)\n</code></pre>"},{"location":"reference/sql/#st_pointzm","title":"ST_PointZM","text":""},{"location":"reference/sql/#description_43","title":"Description","text":"<p>Constructs a <code>Point</code> with both Z (elevation) and M (measure) coordinates from X, Y, Z, and M values.</p>"},{"location":"reference/sql/#format_43","title":"Format","text":"<p><code>ST_PointZM (x: Double, y: Double, z: Double, m: Double)</code></p>"},{"location":"reference/sql/#arguments_43","title":"Arguments","text":"<ul> <li>x: The X-coordinate value.</li> <li>y: The Y-coordinate value.</li> <li>z: The Z-coordinate (elevation) value.</li> <li>m: The M-coordinate (measure) value.</li> </ul>"},{"location":"reference/sql/#sql-example_43","title":"SQL Example","text":"<pre><code>SELECT ST_PointZM(-64.36, 45.09, 100.0, 50.0)\n</code></pre>"},{"location":"reference/sql/#st_setsrid","title":"ST_SetSRID","text":""},{"location":"reference/sql/#description_44","title":"Description","text":"<p>Sets the spatial reference system identifier (SRID) of a geometry. This only changes the metadata; it does not transform the coordinates.</p>"},{"location":"reference/sql/#format_44","title":"Format","text":"<p><code>ST_SetSRID (geom: Geometry, srid: Integer)</code></p>"},{"location":"reference/sql/#arguments_44","title":"Arguments","text":"<ul> <li>geom: Input geometry or geography.</li> <li>srid: EPSG code to set (e.g., 4326).</li> </ul>"},{"location":"reference/sql/#sql-example_44","title":"SQL Example","text":"<pre><code>SELECT ST_SetSRID(ST_GeomFromWKT('POINT (-64.363049 45.091501)'), 4326);\n</code></pre>"},{"location":"reference/sql/#st_srid","title":"ST_SRID","text":""},{"location":"reference/sql/#description_45","title":"Description","text":"<p>Returns the Spatial Reference System Identifier (SRID) of a geometry. If the geometry does not have an SRID, it returns 0.</p>"},{"location":"reference/sql/#format_45","title":"Format","text":"<p><code>ST_SRID (geom: Geometry)</code></p>"},{"location":"reference/sql/#arguments_45","title":"Arguments","text":"<ul> <li>geom: The input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_45","title":"SQL Example","text":"<pre><code>SELECT ST_SRID(polygon)\n</code></pre>"},{"location":"reference/sql/#st_symdifference","title":"ST_SymDifference","text":""},{"location":"reference/sql/#description_46","title":"Description","text":"<p>Computes the symmetric difference between geomA and geomB.</p>"},{"location":"reference/sql/#format_46","title":"Format","text":"<p><code>ST_SymDifference (A: Geometry, B: Geometry)</code></p>"},{"location":"reference/sql/#arguments_46","title":"Arguments","text":"<ul> <li>geomA: Input geometry or geography.</li> <li>geomB: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_46","title":"SQL Example","text":"<pre><code>SELECT ST_SymDifference(ST_GeomFromText('POLYGON ((1 1, 11 1, 1 11, 0 0))'), ST_GeomFromText('POLYGON ((0 0, 10 0, 0 10, 0 0))')) AS val\n</code></pre>"},{"location":"reference/sql/#st_touches","title":"ST_Touches","text":""},{"location":"reference/sql/#description_47","title":"Description","text":"<p>Return true if geomA touches geomB.</p>"},{"location":"reference/sql/#format_47","title":"Format","text":"<p><code>ST_Touches (A: Geometry, B: Geometry)</code></p>"},{"location":"reference/sql/#arguments_47","title":"Arguments","text":"<ul> <li>geomA: Input geometry or geography.</li> <li>geomB: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_47","title":"SQL Example","text":"<pre><code>SELECT ST_Touches(ST_Point(0.25 0.25), ST_GeomFromText('POLYGON ((0 0, 1 0, 0 1, 0 0))')) AS val\n</code></pre>"},{"location":"reference/sql/#st_transform","title":"ST_Transform","text":""},{"location":"reference/sql/#description_48","title":"Description","text":"<p>Transforms the coordinates of a geometry from a source Coordinate Reference System (CRS) to a target CRS.</p> <p>If the source CRS is not specified, it will be read from the geometry's metadata. Sedona ensures that coordinates are handled in longitude/latitude order for geographic CRS transformations.</p>"},{"location":"reference/sql/#format_48","title":"Format","text":"<p><code>ST_Transform (A: Geometry, TargetCRS: String)</code> <code>ST_Transform (A: Geometry, SourceCRS: String, TargetCRS: String)</code></p>"},{"location":"reference/sql/#arguments_48","title":"Arguments","text":"<ul> <li>geom: Input geometry or geography.</li> <li>source_crs: The source CRS code (e.g., 'EPSG:4326').</li> <li>target_crs: The target CRS code to transform into.</li> <li>lenient: A boolean that, if true, assumes the source is EPSG:4326 if not specified. Defaults to true.</li> </ul>"},{"location":"reference/sql/#sql-example_48","title":"SQL Example","text":"<pre><code>-- Transform a WGS84 polygon to UTM zone 49N\nSELECT ST_Transform(ST_SetSRID(ST_GeomFromWkt('POLYGON((170 50,170 72,-130 72,-130 50,170 50))'), 4326), 'EPSG:32649');\n</code></pre>"},{"location":"reference/sql/#st_union","title":"ST_Union","text":""},{"location":"reference/sql/#description_49","title":"Description","text":"<p>Computes the union between geomA and geomB.</p>"},{"location":"reference/sql/#format_49","title":"Format","text":"<p><code>ST_Union (A: Geometry, B: Geometry)</code></p>"},{"location":"reference/sql/#arguments_49","title":"Arguments","text":"<ul> <li>geomA: Input geometry or geography.</li> <li>geomB: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_49","title":"SQL Example","text":"<pre><code>SELECT ST_Union(ST_GeomFromText('POLYGON ((1 1, 11 1, 1 11, 0 0))'), ST_GeomFromText('POLYGON ((0 0, 10 0, 0 10, 0 0))')) AS val\n</code></pre>"},{"location":"reference/sql/#st_union_aggr","title":"ST_Union_Aggr","text":""},{"location":"reference/sql/#description_50","title":"Description","text":"<p>An aggregate function that returns the geometric union of all geometries in a set.</p>"},{"location":"reference/sql/#format_50","title":"Format","text":"<p><code>ST_Union_Aggr (geom: Geometry)</code></p>"},{"location":"reference/sql/#arguments_50","title":"Arguments","text":"<ul> <li>geom: A column of geometries to be aggregated.</li> </ul>"},{"location":"reference/sql/#sql-example_50","title":"SQL Example","text":"<pre><code>-- Create a table with two separate polygons and unite them into a single multipolygon\nWITH shapes(geom) AS (\n    VALUES (ST_GeomFromWKT('POLYGON ((0 0, 1 0, 1 1, 0 1, 0 0))')),\n           (ST_GeomFromWKT('POLYGON ((2 2, 3 2, 3 3, 2 3, 2 2))'))\n)\nSELECT ST_AsText(ST_Union_Aggr(geom)) FROM shapes;\n-- Returns: MULTIPOLYGON (((2 2, 3 2, 3 3, 2 3, 2 2)), ((0 0, 1 0, 1 1, 0 1, 0 0)))\n</code></pre>"},{"location":"reference/sql/#st_within","title":"ST_Within","text":""},{"location":"reference/sql/#description_51","title":"Description","text":"<p>Return true if geomA is fully contained by geomB.</p>"},{"location":"reference/sql/#format_51","title":"Format","text":"<p><code>ST_Within (A: Geometry, B: Geometry)</code></p>"},{"location":"reference/sql/#arguments_51","title":"Arguments","text":"<ul> <li>geomA: Input geometry or geography.</li> <li>geomB: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_51","title":"SQL Example","text":"<pre><code>SELECT ST_Within(ST_Point(0.25 0.25), ST_GeomFromText('POLYGON ((0 0, 1 0, 0 1, 0 0))')) AS val\n</code></pre>"},{"location":"reference/sql/#st_x","title":"ST_X","text":""},{"location":"reference/sql/#description_52","title":"Description","text":"<p>Return the X component of a point geometry or geography.</p>"},{"location":"reference/sql/#format_52","title":"Format","text":"<p><code>ST_X(A: Point)</code></p>"},{"location":"reference/sql/#arguments_52","title":"Arguments","text":"<ul> <li>geom: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_52","title":"SQL Example","text":"<pre><code>SELECT ST_X(ST_Point(1.0, 2.0))\n</code></pre>"},{"location":"reference/sql/#st_xmax","title":"ST_XMax","text":""},{"location":"reference/sql/#description_53","title":"Description","text":"<p>Returns the maximum X-coordinate of a geometry's bounding box.</p>"},{"location":"reference/sql/#format_53","title":"Format","text":"<p><code>ST_XMax (A: Geometry)</code></p>"},{"location":"reference/sql/#arguments_53","title":"Arguments","text":"<ul> <li>geom: Input geometry.</li> </ul>"},{"location":"reference/sql/#sql-example_53","title":"SQL Example","text":"<pre><code>SELECT ST_XMax(ST_GeomFromWKT('LINESTRING(1 5, 10 15)'));\n-- Returns: 10\n</code></pre>"},{"location":"reference/sql/#st_xmin","title":"ST_XMin","text":""},{"location":"reference/sql/#description_54","title":"Description","text":"<p>Returns the minimum X-coordinate of a geometry's bounding box.</p>"},{"location":"reference/sql/#format_54","title":"Format","text":"<p><code>ST_XMin (A: Geometry)</code></p>"},{"location":"reference/sql/#arguments_54","title":"Arguments","text":"<ul> <li>geom: Input geometry.</li> </ul>"},{"location":"reference/sql/#sql-example_54","title":"SQL Example","text":"<pre><code>SELECT ST_XMin(ST_GeomFromWKT('LINESTRING(1 5, 10 15)'));\n-- Returns: 1\n</code></pre>"},{"location":"reference/sql/#st_y","title":"ST_Y","text":""},{"location":"reference/sql/#description_55","title":"Description","text":"<p>Return the Y component of a point geometry or geography.</p>"},{"location":"reference/sql/#format_55","title":"Format","text":"<p><code>ST_Y(A: Point)</code></p>"},{"location":"reference/sql/#arguments_55","title":"Arguments","text":"<ul> <li>geom: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_55","title":"SQL Example","text":"<pre><code>SELECT ST_Y(ST_Point(1.0, 2.0))\n</code></pre>"},{"location":"reference/sql/#st_ymax","title":"ST_YMax","text":""},{"location":"reference/sql/#description_56","title":"Description","text":"<p>Returns the maximum Y-coordinate of a geometry's bounding box.</p>"},{"location":"reference/sql/#format_56","title":"Format","text":"<p><code>ST_YMax (A: Geometry)</code></p>"},{"location":"reference/sql/#arguments_56","title":"Arguments","text":"<ul> <li>geom: Input geometry.</li> </ul>"},{"location":"reference/sql/#sql-example_56","title":"SQL Example","text":"<pre><code>SELECT ST_YMax(ST_GeomFromWKT('LINESTRING(1 5, 10 15)'));\n-- Returns: 15\n</code></pre>"},{"location":"reference/sql/#st_ymin","title":"ST_YMin","text":""},{"location":"reference/sql/#description_57","title":"Description","text":"<p>Returns the minimum Y-coordinate of a geometry's bounding box.</p>"},{"location":"reference/sql/#format_57","title":"Format","text":"<p><code>ST_YMin (A: Geometry)</code></p>"},{"location":"reference/sql/#arguments_57","title":"Arguments","text":"<ul> <li>geom: Input geometry.</li> </ul>"},{"location":"reference/sql/#sql-example_57","title":"SQL Example","text":"<pre><code>SELECT ST_YMin(ST_GeomFromWKT('LINESTRING(1 5, 10 15)'));\n-- Returns: 5\n</code></pre>"},{"location":"reference/sql/#st_z","title":"ST_Z","text":""},{"location":"reference/sql/#description_58","title":"Description","text":"<p>Return the Z component of a point geometry or geography.</p>"},{"location":"reference/sql/#format_58","title":"Format","text":"<p><code>ST_Z(A: Point)</code></p>"},{"location":"reference/sql/#arguments_58","title":"Arguments","text":"<ul> <li>geom: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_58","title":"SQL Example","text":"<pre><code>SELECT ST_Z(ST_Point(1.0, 2.0))\n</code></pre>"},{"location":"reference/sql/#st_zmax","title":"ST_ZMax","text":""},{"location":"reference/sql/#description_59","title":"Description","text":"<p>Returns the maximum Z-coordinate of a geometry's bounding box.</p>"},{"location":"reference/sql/#format_59","title":"Format","text":"<p><code>ST_ZMax (A: Geometry)</code></p>"},{"location":"reference/sql/#arguments_59","title":"Arguments","text":"<ul> <li>geom: Input geometry.</li> </ul>"},{"location":"reference/sql/#sql-example_59","title":"SQL Example","text":"<pre><code>SELECT ST_ZMax(ST_GeomFromWKT('LINESTRING ZM (1 2 3 4, 5 6 7 8)'));\n-- Returns: 7\n</code></pre>"},{"location":"reference/sql/#st_zmin","title":"ST_ZMin","text":""},{"location":"reference/sql/#description_60","title":"Description","text":"<p>Returns the minimum Z-coordinate of a geometry's bounding box.</p>"},{"location":"reference/sql/#format_60","title":"Format","text":"<p><code>ST_ZMin (A: Geometry)</code></p>"},{"location":"reference/sql/#arguments_60","title":"Arguments","text":"<ul> <li>geom: Input geometry.</li> </ul>"},{"location":"reference/sql/#sql-example_60","title":"SQL Example","text":"<pre><code>SELECT ST_ZMin(ST_GeomFromWKT('LINESTRING ZM (1 2 3 4, 5 6 7 8)'));\n-- Returns: 3\n</code></pre>"}]}
{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#sedonadb","title":"SedonaDB","text":"<p>SedonaDB is a high-performance, dependency-free geospatial compute engine.</p> SQLPythonRustR <pre><code>SELECT ST_Point(0, 1) as geom\n</code></pre> <pre><code>import seonda.db\n\nsd = sedona.db.connect()\nsd.sql(\"SELECT ST_Point(0, 1) as geom\")\n</code></pre> <pre><code>use datafusion::prelude::*\nuse sedona::context{SedonaContext, SedonaDataFrame};\n\nlet ctx = SedonaContext::new_local_interactive().await?;\n    let batches = ctx\n        .sql(\"SELECT ST_Point(0, 1) as geom\")\n        .await?\n        .show_sedona(&amp;cts, None, Default::default())\n        .await?;\n</code></pre> <pre><code>library(sedonadb)\n\n    sd_sql(\"SELECT ST_Point(0, 1) as geom\")\n</code></pre>"},{"location":"#key-features","title":"Key features","text":"<ul> <li>Blazing fast: SedonaDB runs on a single machine, optimized for geospatial workflows.</li> <li>SedonaDB is a dependency-free, small binary that is only XX KB.</li> <li>Supports various file formats, including GeoJSON, Shapefile, GeoParquet, CSV, and PostGIS.</li> <li>Exposes several language APIs, including SQL, Python, Rust, and R.</li> <li>Portable: Easy to run on the command line, locally or in the cloud with AWS Sagemaker, AWS Lambda, Azure Functions, Azure Machine Learning, or Google Colab.</li> <li>Extensible: You can extend SedonaDB to build your own geospatial compute engine custom for your needs.</li> <li>Open source: Apache Sedona is an open-source project managed according to the Apache Software Foundation's guidelines.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Here\u2019s how to install SedonaDB with various build tools:</p> pipRustR <pre><code>pip install \"apache-sedona[db]\"\n</code></pre> <pre><code>cargo add sedona\n</code></pre> <pre><code>install.packages(\"sedonadb\", repos = \"https://community.r-multiverse.org\")\n</code></pre>"},{"location":"#sedonadb-example-with-vector-data","title":"SedonaDB example with vector data","text":"<p>TODO</p>"},{"location":"#have-questions","title":"Have questions?","text":"<p>Feel free to start a GitHub Discussion or join the Discord community to ask the developers any questions you may have.</p> <p>We look forward to collaborating with you!</p>"},{"location":"development/","title":"Development","text":""},{"location":"development/#development","title":"Development","text":""},{"location":"development/#rust","title":"Rust","text":"<p>SedonaDB is written and Rust and is a standard <code>cargo</code> workspace. You can install a recent version of the Rust compiler and cargo from rustup.rs and run tests using <code>cargo test</code>. A local development version of the CLI can be run with <code>cargo run --bin sedona-cli</code>.</p> <p>Some tests require submodules that contain test data or pinned versions of external dependencies. These submodules can be initialized with:</p> <pre><code>git submodule init\ngit submodule update --recursive\n</code></pre> <p>Some crates wrap external native libraries and require system dependencies to build. At this time the only crate that requires this is the sedona-s2geography crate, which requires CMake, Abseil and OpenSSL. These can be installed on MacOS with Homebrew:</p> <pre><code>brew install abseil openssl cmake geos\n</code></pre> <p>On Linux and Windows, it is recommended to use vcpkg to provide external dependencies. This can be done by setting the <code>CMAKE_TOOLCHAIN_FILE</code> environment variable:</p> <pre><code>export CMAKE_TOOLCHAIN_FILE=/path/to/vcpkg/scripts/buildsystems/vcpkg.cmake\n</code></pre> <p>When using VSCode, it may be necessary to set this environment variable in settings.json such that it can be found by rust-analyzer when running build/run tasks:</p> <pre><code>{\n    \"rust-analyzer.runnables.extraEnv\": {\n        \"CMAKE_TOOLCHAIN_FILE\": \"/path/to/vcpkg/scripts/buildsystems/vcpkg.cmake\"\n    },\n    \"rust-analyzer.cargo.extraEnv\": {\n        \"CMAKE_TOOLCHAIN_FILE\": \"/path/to/vcpkg/scripts/buildsystems/vcpkg.cmake\"\n    }\n}\n</code></pre>"},{"location":"development/#python","title":"Python","text":"<p>Python bindings to SedonaDB are built with the Maturin build backend. Installing a development version of the main Python bindings the first time can be done with:</p> <pre><code>cd python/sedonadb\npip install -e \".[test]\"\n</code></pre> <p>If editing Rust code in either SedonaDB or the Python bindings, you can recompile the native component with:</p> <pre><code>maturin develop\n</code></pre>"},{"location":"development/#debugging","title":"Debugging","text":"<p>Debugging Rust code is most easily done by writing or finding a test that triggers the desired behavior and running it using the Debug selection in VSCode with the rust-analyzer extension. Rust code can also debugged using the CLI by finding the <code>main()</code> function in sedona-cli and choosing the Debug run option.</p> <p>Installation of Python bindings with <code>maturin develop</code> ensures a debug-friendly build for debugging Rust, Python, or C/C++ code. Python code can be debugged using breakpoints in any IDE that supports debugging an editable Python package installation (e.g., VSCode); Rust, C, or C++ code can be debugged using the CodeLLDB Attach to Process... command from the command palette in VSCode.</p>"},{"location":"development/#low-level-benchmarking","title":"Low-level benchmarking","text":"<p>Low-level Rust benchmarks use criterion. In general, there is at least one benchmark for every implementation of a function (some functions have more than one implementation provided by different libraries), and a few other benchmarks for low-level iteration where work was done to optimize specific cases.</p> <p>Briefly, benchmarks for a specific crate can be run with <code>cargo bench</code>:</p> <pre><code>cd rust/sedona-geo\ncargo bench\n</code></pre> <p>Benchmarks for a specific function can be run with a filter. These can be run from the workspace or a specific crate (although the output is usually easier to read for a specific crate).</p> <pre><code>cargo bench -- st_area\n</code></pre> <p>By default, criterion saves the last run and will report the difference between the current benchmark and the last time it was run (although there are options to save and load various baselines). A report containing the last run for any benchmark that was ever run can be opened with:</p> <pre><code># MacOS\nopen target/criterion/report/index.html\n# Ubuntu\nxdg-open target/criterion/report/index.html\n</code></pre> <p>All previous saved benchmark runs can be cleared with:</p> <pre><code>rm -rf target/criterion\n</code></pre>"},{"location":"development/#documentation","title":"Documentation","text":"<ul> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"overture-examples/","title":"SedonaDB Overture Examples","text":"In\u00a0[6]: Copied! <pre>import sedonadb\nimport os\n\nos.environ[\"AWS_SKIP_SIGNATURE\"] = \"true\"\nos.environ[\"AWS_DEFAULT_REGION\"] = \"us-west-2\"\n\nsd = sedonadb.connect()\n</pre> import sedonadb import os  os.environ[\"AWS_SKIP_SIGNATURE\"] = \"true\" os.environ[\"AWS_DEFAULT_REGION\"] = \"us-west-2\"  sd = sedonadb.connect() In\u00a0[7]: Copied! <pre>df = sd.read_parquet(\n    \"s3://overturemaps-us-west-2/release/2025-08-20.0/theme=buildings/type=building/\"\n)\n</pre> df = sd.read_parquet(     \"s3://overturemaps-us-west-2/release/2025-08-20.0/theme=buildings/type=building/\" ) In\u00a0[8]: Copied! <pre>df.limit(10).show()\n</pre> df.limit(10).show() <pre>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                  id                  \u2506                 geometry                \u2506 \u2026 \u2506 roof_height \u2502\n\u2502               utf8view               \u2506           wkb_view &lt;ogc:crs84&gt;          \u2506   \u2506   float64   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 06533301-f2ec-42e0-8138-732ac25a7497 \u2506 POLYGON((-58.4757066 -34.7389169,-58.4\u2026 \u2506 \u2026 \u2506             \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 cc0c048c-088d-4cb3-9982-3961edfdf416 \u2506 POLYGON((-58.4755777 -34.7389131,-58.4\u2026 \u2506 \u2026 \u2506             \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 e52a0dbc-fb93-40e2-b1df-03626855299c \u2506 POLYGON((-58.4754112 -34.7394253,-58.4\u2026 \u2506 \u2026 \u2506             \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 28526977-9920-4cec-9840-5dd409a7cded \u2506 POLYGON((-58.4752088 -34.7394754,-58.4\u2026 \u2506 \u2026 \u2506             \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 0bc4c042-52ea-4ae7-9200-56221805fa2f \u2506 POLYGON((-58.475273 -34.7394421,-58.47\u2026 \u2506 \u2026 \u2506             \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 c21dfee1-f5d9-4e0a-91cf-796f117518d4 \u2506 POLYGON((-58.4750977 -34.7394357,-58.4\u2026 \u2506 \u2026 \u2506             \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 3fe5efdd-1739-4088-8c8e-6f7f1b7cfcfe \u2506 POLYGON((-58.4751684 -34.7394288,-58.4\u2026 \u2506 \u2026 \u2506             \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 c144becc-fc8a-4bbc-aeef-359ac56a925a \u2506 POLYGON((-58.4751787 -34.739396,-58.47\u2026 \u2506 \u2026 \u2506             \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 79d6c10a-2ff2-429d-a0e7-6eefc8939d14 \u2506 POLYGON((-58.4753719 -34.7393189,-58.4\u2026 \u2506 \u2026 \u2506             \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 c1664c2d-2c0f-44c4-af08-58176e360613 \u2506 POLYGON((-58.4753269 -34.7391919,-58.4\u2026 \u2506 \u2026 \u2506             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</pre> In\u00a0[9]: Copied! <pre>df.to_view(\"buildings\")\n</pre> df.to_view(\"buildings\") In\u00a0[10]: Copied! <pre># the buildings table is large and contains millions of rows\nsd.sql(\"\"\"\nSELECT\n    COUNT(*)\nFROM\n    buildings\n\"\"\").show()\n</pre> # the buildings table is large and contains millions of rows sd.sql(\"\"\" SELECT     COUNT(*) FROM     buildings \"\"\").show() <pre>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  count(*)  \u2502\n\u2502    int64   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 2539170484 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</pre> In\u00a0[11]: Copied! <pre># check out the schema of the buildings table to see what it contains\ndf.schema\n</pre> # check out the schema of the buildings table to see what it contains df.schema Out[11]: <pre>SedonaSchema with 24 fields:\n  id: Utf8View\n  geometry: wkb_view &lt;ogc:crs84&gt;\n  bbox: Struct(xmin Float32, xmax Float32, ymin Float32, ymax Float32)\n  version: Int32\n  sources: List(Field { name: \"element\", data_type: Struct([Field { name: \"property\", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"dataset\", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"record_id\", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"update_time\", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"confidence\", data_type: Float64, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"between\", data_type: List(Field { name: \"element\", data_type: Float64, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }), nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }]), nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} })\n  level: Int32\n  subtype: Utf8View\n  class: Utf8View\n  height: Float64\n  names: Struct(primary Utf8, common Map(Field { name: \"key_value\", data_type: Struct([Field { name: \"key\", data_type: Utf8, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"value\", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }]), nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }, false), rules List(Field { name: \"element\", data_type: Struct([Field { name: \"variant\", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"language\", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"perspectives\", data_type: Struct([Field { name: \"mode\", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"countries\", data_type: List(Field { name: \"element\", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }), nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }]), nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"value\", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"between\", data_type: List(Field { name: \"element\", data_type: Float64, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }), nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"side\", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }]), nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }))\n  has_parts: Boolean\n  is_underground: Boolean\n  num_floors: Int32\n  num_floors_underground: Int32\n  min_height: Float64\n  min_floor: Int32\n  facade_color: Utf8View\n  facade_material: Utf8View\n  roof_material: Utf8View\n  roof_shape: Utf8View\n  roof_direction: Float64\n  roof_orientation: Utf8View\n  roof_color: Utf8View\n  roof_height: Float64</pre> In\u00a0[12]: Copied! <pre># find all the buildings in New York city that are taller than 20 meters\nnyc_bbox_wkt = \"POLYGON((-74.2591 40.4774, -74.2591 40.9176, -73.7004 40.9176, -73.7004 40.4774, -74.2591 40.4774))\"\nsd.sql(f\"\"\"\nSELECT\n    id,\n    height,\n    num_floors,\n    roof_shape,\n    ST_Centroid(geometry) as centroid\nFROM\n    buildings\nWHERE\n    is_underground = FALSE\n    AND height IS NOT NULL\n    AND height &gt; 20\n    AND ST_Intersects(geometry, ST_SetSRID(ST_GeomFromText('{nyc_bbox_wkt}'), 4326))\nLIMIT 5;\n\"\"\").show()\n</pre> # find all the buildings in New York city that are taller than 20 meters nyc_bbox_wkt = \"POLYGON((-74.2591 40.4774, -74.2591 40.9176, -73.7004 40.9176, -73.7004 40.4774, -74.2591 40.4774))\" sd.sql(f\"\"\" SELECT     id,     height,     num_floors,     roof_shape,     ST_Centroid(geometry) as centroid FROM     buildings WHERE     is_underground = FALSE     AND height IS NOT NULL     AND height &gt; 20     AND ST_Intersects(geometry, ST_SetSRID(ST_GeomFromText('{nyc_bbox_wkt}'), 4326)) LIMIT 5; \"\"\").show() <pre>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502            id           \u2506       height       \u2506 num_floors \u2506 roof_shape \u2506         centroid        \u2502\n\u2502         utf8view        \u2506       float64      \u2506    int32   \u2506  utf8view  \u2506     wkb &lt;ogc:crs84&gt;     \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1b9040c2-2e79-4f56-aba\u2026 \u2506               22.4 \u2506            \u2506            \u2506 POINT(-74.230407502993\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 1b5e1cd2-d697-489e-892\u2026 \u2506               21.5 \u2506            \u2506            \u2506 POINT(-74.231451103592\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 c1afdf78-bf84-4b8f-ae1\u2026 \u2506               20.9 \u2506            \u2506            \u2506 POINT(-74.232593032240\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 88f36399-b09f-491b-bb6\u2026 \u2506               24.5 \u2506            \u2506            \u2506 POINT(-74.231878209597\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 df37a283-f5bd-4822-a05\u2026 \u2506 24.154542922973633 \u2506            \u2506            \u2506 POINT(-74.241910239840\u2026 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</pre> In\u00a0[13]: Copied! <pre>df = sd.read_parquet(\n    \"s3://overturemaps-us-west-2/release/2025-08-20.0/theme=divisions/type=division_area/\"\n)\n</pre> df = sd.read_parquet(     \"s3://overturemaps-us-west-2/release/2025-08-20.0/theme=divisions/type=division_area/\" ) In\u00a0[14]: Copied! <pre># take a look at a few rows of data\ndf.show(10)\n</pre> # take a look at a few rows of data df.show(10) <pre>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502       id       \u2506    geometry    \u2506      bbox      \u2506 \u2026 \u2506 is_territorial \u2506  region  \u2506  division_id  \u2502\n\u2502    utf8view    \u2506 wkb_view &lt;ogc\u2026 \u2506 struct(xmin f\u2026 \u2506   \u2506     boolean    \u2506 utf8view \u2506    utf8view   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 61912ffd-060b\u2026 \u2506 POLYGON((23.3\u2026 \u2506 {xmin: 22.735\u2026 \u2506 \u2026 \u2506 true           \u2506 ZA-EC    \u2506 2711d6ca-ac1\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 7647b992-e0d6\u2026 \u2506 POLYGON((26.5\u2026 \u2506 {xmin: 26.521\u2026 \u2506 \u2026 \u2506 true           \u2506 ZA-EC    \u2506 0e8a08eb-6f2\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 4058785b-82c9\u2026 \u2506 MULTIPOLYGON(\u2026 \u2506 {xmin: 22.735\u2026 \u2506 \u2026 \u2506 false          \u2506 ZA-EC    \u2506 2711d6ca-ac1\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 cd9389b7-3451\u2026 \u2506 POLYGON((26.5\u2026 \u2506 {xmin: 26.373\u2026 \u2506 \u2026 \u2506 true           \u2506 ZA-EC    \u2506 9d59ea5e-408\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 a60ae908-e6fa\u2026 \u2506 POLYGON((26.6\u2026 \u2506 {xmin: 26.541\u2026 \u2506 \u2026 \u2506 true           \u2506 ZA-EC    \u2506 f49ef082-3c2\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 fd070cbb-4aaa\u2026 \u2506 POLYGON((26.1\u2026 \u2506 {xmin: 26.084\u2026 \u2506 \u2026 \u2506 true           \u2506 ZA-EC    \u2506 513b5a9c-c29\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 70479601-dc12\u2026 \u2506 POLYGON((26.4\u2026 \u2506 {xmin: 26.222\u2026 \u2506 \u2026 \u2506 true           \u2506 ZA-EC    \u2506 2ade34e5-955\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 3a294b23-f674\u2026 \u2506 POLYGON((24.5\u2026 \u2506 {xmin: 24.503\u2026 \u2506 \u2026 \u2506 true           \u2506 ZA-EC    \u2506 4f63d19f-2ca\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 48b3e344-10a4\u2026 \u2506 POLYGON((26.6\u2026 \u2506 {xmin: 26.557\u2026 \u2506 \u2026 \u2506 true           \u2506 ZA-EC    \u2506 20d890bb-1a4\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 92e71cf6-fa94\u2026 \u2506 POLYGON((25.8\u2026 \u2506 {xmin: 25.799\u2026 \u2506 \u2026 \u2506 true           \u2506 ZA-EC    \u2506 4202ec06-188\u2026 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</pre> In\u00a0[15]: Copied! <pre>df.to_view(\"division_area\")\n</pre> df.to_view(\"division_area\") In\u00a0[16]: Copied! <pre>sd.sql(\"\"\"\nSELECT \n    COUNT(*) \nFROM division_area\n\"\"\").show()\n</pre> sd.sql(\"\"\" SELECT      COUNT(*)  FROM division_area \"\"\").show() <pre>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 count(*) \u2502\n\u2502   int64  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502  1035749 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</pre> In\u00a0[17]: Copied! <pre>df.schema\n</pre> df.schema Out[17]: <pre>SedonaSchema with 13 fields:\n  id: Utf8View\n  geometry: wkb_view &lt;ogc:crs84&gt;\n  bbox: Struct(xmin Float32, xmax Float32, ymin Float32, ymax Float32)\n  country: Utf8View\n  version: Int32\n  sources: List(Field { name: \"element\", data_type: Struct([Field { name: \"property\", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"dataset\", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"record_id\", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"update_time\", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"confidence\", data_type: Float64, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"between\", data_type: List(Field { name: \"element\", data_type: Float64, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }), nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }]), nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} })\n  subtype: Utf8View\n  class: Utf8View\n  names: Struct(primary Utf8, common Map(Field { name: \"key_value\", data_type: Struct([Field { name: \"key\", data_type: Utf8, nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"value\", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }]), nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }, false), rules List(Field { name: \"element\", data_type: Struct([Field { name: \"variant\", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"language\", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"perspectives\", data_type: Struct([Field { name: \"mode\", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"countries\", data_type: List(Field { name: \"element\", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }), nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }]), nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"value\", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"between\", data_type: List(Field { name: \"element\", data_type: Float64, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }), nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: \"side\", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }]), nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }))\n  is_land: Boolean\n  is_territorial: Boolean\n  region: Utf8View\n  division_id: Utf8View</pre> In\u00a0[18]: Copied! <pre># get all the divisions in Nova Scotia and save them in memory with collect()\nnova_scotia_bbox_wkt = (\n    \"POLYGON((-66.5 43.4, -66.5 47.1, -59.8 47.1, -59.8 43.4, -66.5 43.4))\"\n)\nns = sd.sql(f\"\"\"\nSELECT \n    country, region, names, geometry \nFROM division_area\nWHERE \n    ST_Intersects(geometry, ST_SetSRID(ST_GeomFromText('{nova_scotia_bbox_wkt}'), 4326))\n\"\"\").collect()\n</pre> # get all the divisions in Nova Scotia and save them in memory with collect() nova_scotia_bbox_wkt = (     \"POLYGON((-66.5 43.4, -66.5 47.1, -59.8 47.1, -59.8 43.4, -66.5 43.4))\" ) ns = sd.sql(f\"\"\" SELECT      country, region, names, geometry  FROM division_area WHERE      ST_Intersects(geometry, ST_SetSRID(ST_GeomFromText('{nova_scotia_bbox_wkt}'), 4326)) \"\"\").collect() In\u00a0[19]: Copied! <pre>ns.to_view(\"ns_divisions\")\n</pre> ns.to_view(\"ns_divisions\") In\u00a0[20]: Copied! <pre>df = sd.sql(\"\"\"\nSELECT UNNEST(names), geometry\nFROM ns_divisions\nWHERE region = 'CA-NS'\n\"\"\")\n</pre> df = sd.sql(\"\"\" SELECT UNNEST(names), geometry FROM ns_divisions WHERE region = 'CA-NS' \"\"\") In\u00a0[24]: Copied! <pre>%%time\n# this executes quickly because the Nova Scotia data was persisted in memory with collect()\ndf.show(2)\n</pre> %%time # this executes quickly because the Nova Scotia data was persisted in memory with collect() df.show(2) <pre>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 __unnest_placeholder(n \u2506 __unnest_placeholder(n \u2506 __unnest_placeholder(n \u2506        geometry       \u2502\n\u2502 s_divisions.names).pr\u2026 \u2506 s_divisions.names).co\u2026 \u2506 s_divisions.names).ru\u2026 \u2506  wkb_view &lt;ogc:crs84&gt; \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Seal Island            \u2506                        \u2506                        \u2506 POLYGON((-66.0528452\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Mud Island             \u2506                        \u2506                        \u2506 POLYGON((-66.0222822\u2026 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nCPU times: user 8.75 ms, sys: 2.41 ms, total: 11.2 ms\nWall time: 8.47 ms\n</pre>"},{"location":"overture-examples/#sedonadb-overture-examples","title":"SedonaDB Overture Examples\u00b6","text":"<p>This notebook shows how to query the Overture data with SedonaDB!</p>"},{"location":"overture-examples/#overture-buildings-table","title":"Overture buildings table\u00b6","text":""},{"location":"overture-examples/#overture-divisions-table","title":"Overture divisions table\u00b6","text":""},{"location":"quickstart-cli/","title":"CLI Quickstart","text":""},{"location":"quickstart-cli/#cli-quickstart","title":"CLI Quickstart","text":"<p>SedonaDB's command-line interface provides an interactive SQL shell that can be used to leverage the SedonaDB engine for SQL-only/shell-centric workflows. SedonaDB's CLI is based on the DataFusion CLI, whose documentation may be useful for advanced features not covered in detail here.</p>"},{"location":"quickstart-cli/#installation","title":"Installation","text":"<p>You can install <code>sedona-cli</code> using Cargo:</p> <pre><code>cargo install sedona-cli\n</code></pre>"},{"location":"quickstart-cli/#usage","title":"Usage","text":"<p>Running <code>sedona-cli</code> from a terminal will start an interactive SQL shell. Queries must end in a semicolon (<code>;</code>) and can be cleared with <code>Control-C</code>.</p> <pre><code>Sedona CLI v0.0.1\n&gt; SELECT ST_Point(0, 1) as geom;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    geom    \u2502\n\u2502     wkb    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 POINT(0 1) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n1 row(s)/1 column(s) fetched.\nElapsed 0.024 seconds.\n</code></pre> <p>See the SQL Reference for details on the SQL functions and features available to the CLI.</p>"},{"location":"quickstart-cli/#help","title":"Help","text":"<p>From the interactive shell, use <code>\\?</code> for special command help:</p> <pre><code>&gt; \\?\nCommand,Description\n\\d,list tables\n\\d name,describe table\n\\q,quit datafusion-cli\n\\?,help\n\\h,function list\n\\h function,search function\n\\quiet (true|false)?,print or set quiet mode\n\\pset [NAME [VALUE]],\"set table output option\n(format)\"\n</code></pre> <p>From the command line, use <code>--help</code> to list launch options and/or options for interacting with the CLI in a non-interactive context.</p> <pre><code>Command Line Client for Sedona's DataFusion-based query engine.\n\nUsage: sedona-cli [OPTIONS]\n\nOptions:\n  -p, --data-path &lt;DATA_PATH&gt;   Path to your data, default to current directory\n  -c, --command [&lt;COMMAND&gt;...]  Execute the given command string(s), then exit. Commands are expected to be non empty.\n  -f, --file [&lt;FILE&gt;...]        Execute commands from file(s), then exit\n  -r, --rc [&lt;RC&gt;...]            Run the provided files on startup instead of ~/.datafusionrc\n      --format &lt;FORMAT&gt;         [default: automatic] [possible values: csv, tsv, table, json, nd-json, automatic]\n  -q, --quiet                   Reduce printing other than the results and work quietly\n      --maxrows &lt;MAXROWS&gt;       The max number of rows to display for 'Table' format\n                                [possible values: numbers(0/10/...), inf(no limit)] [default: 40]\n      --color                   Enables console syntax highlighting\n  -h, --help                    Print help\n  -V, --version                 Print version\n</code></pre>"},{"location":"quickstart-python/","title":"Python Quickstart","text":"In\u00a0[1]: Copied! <pre>import sedonadb\n\nsd = sedonadb.connect()\nsd.sql(\"SELECT ST_Point(0, 1) as geom\").show()\n</pre> import sedonadb  sd = sedonadb.connect() sd.sql(\"SELECT ST_Point(0, 1) as geom\").show() <pre>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    geom    \u2502\n\u2502     wkb    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 POINT(0 1) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</pre> In\u00a0[2]: Copied! <pre>cities = sd.read_parquet(\n    \"https://raw.githubusercontent.com/geoarrow/geoarrow-data/v0.2.0/natural-earth/files/natural-earth_cities_geo.parquet\"\n)\n</pre> cities = sd.read_parquet(     \"https://raw.githubusercontent.com/geoarrow/geoarrow-data/v0.2.0/natural-earth/files/natural-earth_cities_geo.parquet\" ) In\u00a0[3]: Copied! <pre>cities.show()\n</pre> cities.show() <pre>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502     name     \u2506            geometry           \u2502\n\u2502   utf8view   \u2506      wkb_view &lt;epsg:4326&gt;     \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Vatican City \u2506 POINT(12.4533865 41.9032822)  \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 San Marino   \u2506 POINT(12.4417702 43.9360958)  \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Vaduz        \u2506 POINT(9.5166695 47.1337238)   \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Lobamba      \u2506 POINT(31.1999971 -26.4666675) \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Luxembourg   \u2506 POINT(6.1300028 49.6116604)   \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Palikir      \u2506 POINT(158.1499743 6.9166437)  \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Majuro       \u2506 POINT(171.3800002 7.1030043)  \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Funafuti     \u2506 POINT(179.2166471 -8.516652)  \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Melekeok     \u2506 POINT(134.6265485 7.4873962)  \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Bir Lehlou   \u2506 POINT(-9.6525222 26.1191667)  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</pre> In\u00a0[4]: Copied! <pre>countries = sd.read_parquet(\n    \"https://raw.githubusercontent.com/geoarrow/geoarrow-data/v0.2.0/natural-earth/files/natural-earth_countries_geo.parquet\"\n)\n</pre> countries = sd.read_parquet(     \"https://raw.githubusercontent.com/geoarrow/geoarrow-data/v0.2.0/natural-earth/files/natural-earth_countries_geo.parquet\" ) In\u00a0[5]: Copied! <pre>countries.show()\n</pre> countries.show() <pre>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502             name            \u2506   continent   \u2506                      geometry                      \u2502\n\u2502           utf8view          \u2506    utf8view   \u2506                wkb_view &lt;epsg:4326&gt;                \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Fiji                        \u2506 Oceania       \u2506 MULTIPOLYGON(((180 -16.067132663642447,180 -16.55\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 United Republic of Tanzania \u2506 Africa        \u2506 POLYGON((33.90371119710453 -0.9500000000000001,34\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Western Sahara              \u2506 Africa        \u2506 POLYGON((-8.665589565454809 27.656425889592356,-8\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Canada                      \u2506 North America \u2506 MULTIPOLYGON(((-122.84000000000003 49.00000000000\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 United States of America    \u2506 North America \u2506 MULTIPOLYGON(((-122.84000000000003 49.00000000000\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Kazakhstan                  \u2506 Asia          \u2506 POLYGON((87.35997033076265 49.21498078062912,86.5\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Uzbekistan                  \u2506 Asia          \u2506 POLYGON((55.96819135928291 41.30864166926936,55.9\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Papua New Guinea            \u2506 Oceania       \u2506 MULTIPOLYGON(((141.00021040259185 -2.600151055515\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Indonesia                   \u2506 Asia          \u2506 MULTIPOLYGON(((141.00021040259185 -2.600151055515\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Argentina                   \u2506 South America \u2506 MULTIPOLYGON(((-68.63401022758323 -52.63637045887\u2026 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</pre> In\u00a0[6]: Copied! <pre>cities.to_view(\"cities\")\ncountries.to_view(\"countries\")\n</pre> cities.to_view(\"cities\") countries.to_view(\"countries\") In\u00a0[7]: Copied! <pre># join the cities and countries tables\nsd.sql(\"\"\"\nselect * from cities\njoin countries\nwhere ST_Intersects(cities.geometry, countries.geometry)\n\"\"\").show()\n</pre> # join the cities and countries tables sd.sql(\"\"\" select * from cities join countries where ST_Intersects(cities.geometry, countries.geometry) \"\"\").show() <pre>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502      name     \u2506       geometry       \u2506         name        \u2506   continent   \u2506       geometry      \u2502\n\u2502    utf8view   \u2506 wkb_view &lt;epsg:4326&gt; \u2506       utf8view      \u2506    utf8view   \u2506 wkb_view &lt;epsg:432\u2026 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Suva          \u2506 POINT(178.4417073 -\u2026 \u2506 Fiji                \u2506 Oceania       \u2506 MULTIPOLYGON(((180\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Dodoma        \u2506 POINT(35.7500036 -6\u2026 \u2506 United Republic of\u2026 \u2506 Africa        \u2506 POLYGON((33.903711\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Dar es Salaam \u2506 POINT(39.266396 -6.\u2026 \u2506 United Republic of\u2026 \u2506 Africa        \u2506 POLYGON((33.903711\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Bir Lehlou    \u2506 POINT(-9.6525222 26\u2026 \u2506 Western Sahara      \u2506 Africa        \u2506 POLYGON((-8.665589\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Ottawa        \u2506 POINT(-75.7019612 4\u2026 \u2506 Canada              \u2506 North America \u2506 MULTIPOLYGON(((-12\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Vancouver     \u2506 POINT(-123.1235901 \u2026 \u2506 Canada              \u2506 North America \u2506 MULTIPOLYGON(((-12\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Toronto       \u2506 POINT(-79.389458554\u2026 \u2506 Canada              \u2506 North America \u2506 MULTIPOLYGON(((-12\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 San Francisco \u2506 POINT(-122.39959956\u2026 \u2506 United States of A\u2026 \u2506 North America \u2506 MULTIPOLYGON(((-12\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Denver        \u2506 POINT(-104.9859618 \u2026 \u2506 United States of A\u2026 \u2506 North America \u2506 MULTIPOLYGON(((-12\u2026 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 Houston       \u2506 POINT(-95.348436256\u2026 \u2506 United States of A\u2026 \u2506 North America \u2506 MULTIPOLYGON(((-12\u2026 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</pre> <p>Let's create a DataFrame with one string column and one geometry column to show some of the functionality of the SedonaDB Python interface.</p> In\u00a0[8]: Copied! <pre>df = sd.sql(\"\"\"\nSELECT * FROM (VALUES \n    ('one', ST_GeomFromWkt('POINT(1 2)')), \n    ('two', ST_GeomFromWkt('POLYGON((-74.0 40.7, -74.0 40.8, -73.9 40.8, -73.9 40.7, -74.0 40.7))')), \n    ('three', ST_GeomFromWkt('LINESTRING(-74.0060 40.7128, -73.9352 40.7306, -73.8561 40.8484)'))) \nAS t(val, point)\"\"\")\n</pre> df = sd.sql(\"\"\" SELECT * FROM (VALUES      ('one', ST_GeomFromWkt('POINT(1 2)')),      ('two', ST_GeomFromWkt('POLYGON((-74.0 40.7, -74.0 40.8, -73.9 40.8, -73.9 40.7, -74.0 40.7))')),      ('three', ST_GeomFromWkt('LINESTRING(-74.0060 40.7128, -73.9352 40.7306, -73.8561 40.8484)')))  AS t(val, point)\"\"\") In\u00a0[9]: Copied! <pre>df.show()\n</pre> df.show() <pre>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  val  \u2506                             point                             \u2502\n\u2502  utf8 \u2506                              wkb                              \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 one   \u2506 POINT(1 2)                                                    \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 two   \u2506 POLYGON((-74 40.7,-74 40.8,-73.9 40.8,-73.9 40.7,-74 40.7))   \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 three \u2506 LINESTRING(-74.006 40.7128,-73.9352 40.7306,-73.8561 40.8484) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</pre> <p>Verify that this object is a SedonaDB DataFrame.</p> In\u00a0[10]: Copied! <pre>type(df)\n</pre> type(df) Out[10]: <pre>sedonadb.dataframe.DataFrame</pre> <p>Expose the DataFrame as a view and run a SQL operation on the geometry data.</p> In\u00a0[11]: Copied! <pre>df.to_view(\"fun_table\")\n</pre> df.to_view(\"fun_table\") In\u00a0[12]: Copied! <pre>sd.sql(\"select *, ST_Centroid(point) as centroid from fun_table\").show()\n</pre> sd.sql(\"select *, ST_Centroid(point) as centroid from fun_table\").show() <pre>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  val  \u2506                    point                    \u2506                  centroid                  \u2502\n\u2502  utf8 \u2506                     wkb                     \u2506                     wkb                    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 one   \u2506 POINT(1 2)                                  \u2506 POINT(1 2)                                 \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 two   \u2506 POLYGON((-74 40.7,-74 40.8,-73.9 40.8,-73.\u2026 \u2506 POINT(-73.95000000000002 40.75)            \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 three \u2506 LINESTRING(-74.006 40.7128,-73.9352 40.730\u2026 \u2506 POINT(-73.92111155675562 40.7664673976246\u2026 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</pre> In\u00a0[13]: Copied! <pre>sedonadb.options.interactive = True\nsd.sql(\"SELECT ST_Point(0, 1) as geom\")\n</pre> sedonadb.options.interactive = True sd.sql(\"SELECT ST_Point(0, 1) as geom\") Out[13]: <pre>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    geom    \u2502\n\u2502     wkb    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 POINT(0 1) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</pre> <p>Most SedonaDB Python users will want to turn on interactive mode when developing code in a notebook or interactive session. Interactive mode prints results eagerly, which is usually what you want when interacting with a new data source or constructing a query. When interacting with large remote data sources or non-interactive workloads, this is usually not what you want; however, you can use an explicit <code>.show()</code> to force executing enough of a query to show the first few rows.</p>"},{"location":"quickstart-python/#python-quickstart","title":"Python Quickstart\u00b6","text":"<p>SedonaDB for Python can be installed from PyPI:</p> <pre>pip install apache-sedona[db]\n</pre> <p>If you can import the module and connect to a new session, you're good to go!</p>"},{"location":"quickstart-python/#point-in-polygon-join","title":"Point in polygon join\u00b6","text":""},{"location":"quickstart-python/#manually-create-sedonadb-dataframes","title":"Manually create SedonaDB DataFrames\u00b6","text":""},{"location":"quickstart-python/#interactive-mode","title":"Interactive mode\u00b6","text":""},{"location":"tags/","title":"Tags","text":""},{"location":"reference/python/","title":"Python","text":""},{"location":"reference/python/#python-api-reference","title":"Python API Reference","text":""},{"location":"reference/python/#sedonadb.context","title":"sedonadb.context","text":""},{"location":"reference/python/#sedonadb.context.SedonaContext","title":"SedonaContext","text":"<p>Context for executing queries using Sedona</p> <p>This object keeps track of state such as registered functions, registered tables, and available memory. This is similar to a Spark SessionContext or a database connection.</p>"},{"location":"reference/python/#sedonadb.context.SedonaContext.create_data_frame","title":"create_data_frame","text":"<pre><code>create_data_frame(obj: Any, schema: Any = None) -&gt; DataFrame\n</code></pre> <p>Create a DataFrame from an in-memory or protocol-enabled object.</p> <p>Converts supported Python objects into a SedonaDB DataFrame so you can run SQL and spatial operations on them.</p> <p>Parameters:</p> <ul> <li> <code>obj</code>               (<code>Any</code>)           \u2013            <p>A supported object: - pandas DataFrame - GeoPandas DataFrame - Polars DataFrame - pyarrow Table</p> </li> <li> <code>schema</code>               (<code>Any</code>, default:                   <code>None</code> )           \u2013            <p>Optional object implementing <code>__arrow_schema__</code> for providing an Arrow schema.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>DataFrame</code> (              <code>DataFrame</code> )          \u2013            <p>A SedonaDB DataFrame.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import sedonadb, pandas as pd\n&gt;&gt;&gt; con = sedonadb.connect()\n&gt;&gt;&gt; con.create_data_frame(pd.DataFrame({\"x\": [1, 2]})).head(1).show()\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   x   \u2502\n\u2502 int64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502     1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"reference/python/#sedonadb.context.SedonaContext.drop_view","title":"drop_view","text":"<pre><code>drop_view(name: str) -&gt; None\n</code></pre> <p>Remove a named view</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name of the view</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import sedonadb\n&gt;&gt;&gt; con = sedonadb.connect()\n&gt;&gt;&gt; con.sql(\"SELECT ST_Point(0, 1) as geom\").to_view(\"foofy\")\n&gt;&gt;&gt; con.drop_view(\"foofy\")\n</code></pre>"},{"location":"reference/python/#sedonadb.context.SedonaContext.read_parquet","title":"read_parquet","text":"<pre><code>read_parquet(table_paths: Union[str, Path, Iterable[str]]) -&gt; DataFrame\n</code></pre> <p>Create a DataFrame from one or more Parquet files</p> <p>Parameters:</p> <ul> <li> <code>table_paths</code>               (<code>Union[str, Path, Iterable[str]]</code>)           \u2013            <p>A str, Path, or iterable of paths containing URLs to Parquet files.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import sedonadb\n&gt;&gt;&gt; url = \"https://github.com/apache/sedona-testing/raw/refs/heads/main/data/parquet/geoparquet-1.1.0.parquet\"\n&gt;&gt;&gt; sedonadb.connect().read_parquet(url)\n&lt;sedonadb.dataframe.DataFrame object at ...&gt;\n</code></pre>"},{"location":"reference/python/#sedonadb.context.SedonaContext.sql","title":"sql","text":"<pre><code>sql(sql: str) -&gt; DataFrame\n</code></pre> <p>Create a DataFrame by executing SQL</p> <p>Parses a SQL string into a logical plan and returns a DataFrame that can be used to request results or further modify the query.</p> <p>Parameters:</p> <ul> <li> <code>sql</code>               (<code>str</code>)           \u2013            <p>A single SQL statement.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import sedonadb\n&gt;&gt;&gt; sedonadb.connect().sql(\"SELECT ST_Point(0, 1) as geom\")\n&lt;sedonadb.dataframe.DataFrame object at ...&gt;\n</code></pre>"},{"location":"reference/python/#sedonadb.context.SedonaContext.view","title":"view","text":"<pre><code>view(name: str) -&gt; DataFrame\n</code></pre> <p>Create a DataFrame from a named view</p> <p>Refer to a named view registered with this context.</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name of the view</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import sedonadb\n&gt;&gt;&gt; con = sedonadb.connect()\n&gt;&gt;&gt; con.sql(\"SELECT ST_Point(0, 1) as geom\").to_view(\"foofy\")\n&gt;&gt;&gt; con.view(\"foofy\").show()\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    geom    \u2502\n\u2502  geometry  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 POINT(0 1) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; con.drop_view(\"foofy\")\n</code></pre>"},{"location":"reference/python/#sedonadb.context.configure_proj","title":"configure_proj","text":"<pre><code>configure_proj(\n    preset: Literal[\n        \"auto\", \"pyproj\", \"homebrew\", \"conda\", \"system\", None\n    ] = None,\n    *,\n    shared_library: Union[str, Path] = None,\n    database_path: Union[str, Path] = None,\n    search_path: Union[str, Path] = None,\n    verbose: bool = False,\n)\n</code></pre> <p>Configure PROJ source</p> <p>SedonaDB loads PROJ dynamically to ensure aligned results and configuration against other Python and/or system libraries. This is normally configured on package load but may need additional configuration (particularly if the automatic configuration fails).</p> <p>This function may be called at any time; however, once ST_Transform has been called, subsequent configuration has no effect.</p> <p>Parameters:</p> <ul> <li> <code>preset</code>               (<code>Literal['auto', 'pyproj', 'homebrew', 'conda', 'system', None]</code>, default:                   <code>None</code> )           \u2013            <p>One of: - None: Use custom values of shared_library and/or other keyword   arguments. - auto: Try all presets in the order pyproj, conda, homebrew,   system and warn if none succeeded. - pyproj: Attempt to use shared libraries bundled with pyproj.   This aligns transformations with those performed by geopandas   and is the option that is tried first. - conda: Attempt to load libproj and data files installed via   <code>conda install proj</code>. - homebrew: Attempt to load libproj and data files installed   via <code>brew install proj</code>. Note that the Homebrew install   also includes proj-data grid files and may be able to perform   more accurate transforms by default/without network capability. - system: Attempt to load libproj from a directory already on   LD_LIBRARY_PATH (linux), DYLD_LIBRARY_PATH (MacOS), or PATH   (Windows). This should find the version of PROJ installed   by a Linux system package manager.</p> </li> <li> <code>shared_library</code>               (<code>Union[str, Path]</code>, default:                   <code>None</code> )           \u2013            <p>Path to a PROJ shared library.</p> </li> <li> <code>database_path</code>               (<code>Union[str, Path]</code>, default:                   <code>None</code> )           \u2013            <p>Path to the PROJ database (proj.db).</p> </li> <li> <code>search_path</code>               (<code>Union[str, Path]</code>, default:                   <code>None</code> )           \u2013            <p>Path to the directory containing PROJ data files.</p> </li> <li> <code>verbose</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, print information about the configuration process.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import sedonadb\n&gt;&gt;&gt; sedonadb.configure_proj(\"auto\")\n</code></pre>"},{"location":"reference/python/#sedonadb.context.connect","title":"connect","text":"<pre><code>connect() -&gt; SedonaContext\n</code></pre> <p>Create a new SedonaContext</p>"},{"location":"reference/python/#sedonadb.dataframe","title":"sedonadb.dataframe","text":""},{"location":"reference/python/#sedonadb.dataframe.DataFrame","title":"DataFrame","text":"<p>Representation of a (lazy) collection of columns</p> <p>This object is usually constructed from a SedonaContext][sedonadb.context.SedonaContext] by importing an object, reading a file, or executing SQL.</p>"},{"location":"reference/python/#sedonadb.dataframe.DataFrame.schema","title":"schema  <code>property</code>","text":"<pre><code>schema\n</code></pre> <p>Return the column names and data types</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import sedonadb\n&gt;&gt;&gt; con = sedonadb.connect()\n&gt;&gt;&gt; df = con.sql(\"SELECT 1 as one\")\n&gt;&gt;&gt; df.schema\nSedonaSchema with 1 field:\n  one: non-nullable Int64\n&gt;&gt;&gt; df.schema.field(0)\nSedonaField one: non-nullable Int64\n&gt;&gt;&gt; df.schema.field(0).name, df.schema.field(0).type\n('one', SedonaType Int64)\n</code></pre>"},{"location":"reference/python/#sedonadb.dataframe.DataFrame.__arrow_c_schema__","title":"__arrow_c_schema__","text":"<pre><code>__arrow_c_schema__()\n</code></pre> <p>ArrowSchema PyCapsule interface</p> <p>Returns a PyCapsule wrapping an Arrow C Schema for interoperability with libraries that understand Arrow C data types. See the Arrow PyCapsule interface for more details.</p>"},{"location":"reference/python/#sedonadb.dataframe.DataFrame.__arrow_c_stream__","title":"__arrow_c_stream__","text":"<pre><code>__arrow_c_stream__(requested_schema: Any = None)\n</code></pre> <p>ArrowArrayStream Stream PyCapsule interface</p> <p>Returns a PyCapsule wrapping an Arrow C ArrayStream for interoperability with libraries that understand Arrow C data types. See the Arrow PyCapsule interface for more details.</p> <p>Parameters:</p> <ul> <li> <code>requested_schema</code>               (<code>Any</code>, default:                   <code>None</code> )           \u2013            <p>A PyCapsule representing the desired output schema.</p> </li> </ul>"},{"location":"reference/python/#sedonadb.dataframe.DataFrame.collect","title":"collect","text":"<pre><code>collect() -&gt; DataFrame\n</code></pre> <p>Collect a data frame into memory</p> <p>Executes the logical plan represented by this object and returns a DataFrame representing it.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import sedonadb\n&gt;&gt;&gt; con = sedonadb.connect()\n&gt;&gt;&gt; con.sql(\"SELECT ST_Point(0, 1) as geom\").collect().show()\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    geom    \u2502\n\u2502  geometry  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 POINT(0 1) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"reference/python/#sedonadb.dataframe.DataFrame.count","title":"count","text":"<pre><code>count() -&gt; int\n</code></pre> <p>Compute the number of rows in this DataFrame</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import sedonadb\n&gt;&gt;&gt; con = sedonadb.connect()\n&gt;&gt;&gt; df = con.sql(\"SELECT * FROM (VALUES ('one'), ('two'), ('three')) AS t(val)\")\n&gt;&gt;&gt; df.count()\n3\n</code></pre>"},{"location":"reference/python/#sedonadb.dataframe.DataFrame.head","title":"head","text":"<pre><code>head(n: int = 5) -&gt; DataFrame\n</code></pre> <p>Limit result to the first n rows</p> <p>Note that this is non-deterministic for many queries.</p> <p>Parameters:</p> <ul> <li> <code>n</code>               (<code>int</code>, default:                   <code>5</code> )           \u2013            <p>The number of rows to return</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import sedonadb\n&gt;&gt;&gt; con = sedonadb.connect()\n&gt;&gt;&gt; df = con.sql(\"SELECT * FROM (VALUES ('one'), ('two'), ('three')) AS t(val)\")\n&gt;&gt;&gt; df.head(1).show()\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  val \u2502\n\u2502 utf8 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 one  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"reference/python/#sedonadb.dataframe.DataFrame.limit","title":"limit","text":"<pre><code>limit(n: Optional[int], /, *, offset: int = 0) -&gt; DataFrame\n</code></pre> <p>Limit result to n rows starting at offset</p> <p>Note that this is non-deterministic for many queries.</p> <p>Parameters:</p> <ul> <li> <code>n</code>               (<code>Optional[int]</code>)           \u2013            <p>The number of rows to return</p> </li> <li> <code>offset</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>The number of rows to skip (optional)</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import sedonadb\n&gt;&gt;&gt; con = sedonadb.connect()\n&gt;&gt;&gt; df = con.sql(\"SELECT * FROM (VALUES ('one'), ('two'), ('three')) AS t(val)\")\n&gt;&gt;&gt; df.limit(1).show()\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  val \u2502\n\u2502 utf8 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 one  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n&gt;&gt;&gt; df.limit(1, offset=2).show()\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  val  \u2502\n\u2502  utf8 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 three \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"reference/python/#sedonadb.dataframe.DataFrame.show","title":"show","text":"<pre><code>show(\n    limit: Optional[int] = 10, width: Optional[int] = None, ascii: bool = False\n) -&gt; str\n</code></pre> <p>Print the first limit rows to the console</p> <p>Parameters:</p> <ul> <li> <code>limit</code>               (<code>Optional[int]</code>, default:                   <code>10</code> )           \u2013            <p>The number of rows to display. Using None will display the entire table which may result in very large output.</p> </li> <li> <code>width</code>               (<code>Optional[int]</code>, default:                   <code>None</code> )           \u2013            <p>The number of characters to use to display the output. If None, uses <code>Options.width</code> or detects the value from the current terminal if available. The default width is 100 characters if a width is not set by another mechanism.</p> </li> <li> <code>ascii</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Use True to disable UTF-8 characters in the output.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import sedonadb\n&gt;&gt;&gt; con = sedonadb.connect()\n&gt;&gt;&gt; con.sql(\"SELECT ST_Point(0, 1) as geometry\").show()\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  geometry  \u2502\n\u2502  geometry  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 POINT(0 1) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"reference/python/#sedonadb.dataframe.DataFrame.to_arrow_table","title":"to_arrow_table","text":"<pre><code>to_arrow_table(schema: Any = None) -&gt; Table\n</code></pre> <p>Execute and collect results as a PyArrow Table</p> <p>Executes the logical plan represented by this object and returns a PyArrow Table. This requires that pyarrow is installed.</p> <p>Parameters:</p> <ul> <li> <code>schema</code>               (<code>Any</code>, default:                   <code>None</code> )           \u2013            <p>The requested output schema or <code>None</code> to use the inferred schema.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import sedonadb\n&gt;&gt;&gt; con = sedonadb.connect()\n&gt;&gt;&gt; con.sql(\"SELECT ST_Point(0, 1) as geometry\").to_arrow_table()\npyarrow.Table\ngeometry: extension&lt;geoarrow.wkb&lt;WkbType&gt;&gt; not null\n----\ngeometry: [[01010000000000000000000000000000000000F03F]]\n</code></pre>"},{"location":"reference/python/#sedonadb.dataframe.DataFrame.to_pandas","title":"to_pandas","text":"<pre><code>to_pandas(geometry: Optional[str] = None) -&gt; Union[DataFrame, GeoDataFrame]\n</code></pre> <p>Execute and collect results as a pandas DataFrame or GeoDataFrame</p> <p>If this data frame contains geometry columns, collect results as a single <code>geopandas.GeoDataFrame</code>. Otherwise, collect results as a <code>pandas.DataFrame</code>.</p> <p>Parameters:</p> <ul> <li> <code>geometry</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>If specified, the name of the column to use for the default geometry column. If not specified, this is inferred as the column named \"geometry\", the column named \"geography\", or the first column with a spatial data type (in that order).</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import sedonadb\n&gt;&gt;&gt; con = sedonadb.connect()\n&gt;&gt;&gt; con.sql(\"SELECT ST_Point(0, 1) as geometry\").to_pandas()\n      geometry\n0  POINT (0 1)\n</code></pre>"},{"location":"reference/python/#sedonadb.dataframe.DataFrame.to_view","title":"to_view","text":"<pre><code>to_view(name: str, overwrite: bool = False)\n</code></pre> <p>Create a view based on the query represented by this object</p> <p>Registers this logical plan as a named view with the underlying context such that it can be referred to in SQL.</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name to which this query should be referred</p> </li> <li> <code>overwrite</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Use <code>True</code> to overwrite an existing view of this name</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import sedonadb\n&gt;&gt;&gt; con = sedonadb.connect()\n&gt;&gt;&gt; con.sql(\"SELECT ST_Point(0, 1) as geom\").to_view(\"foofy\")\n&gt;&gt;&gt; con.view(\"foofy\").show()\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    geom    \u2502\n\u2502  geometry  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 POINT(0 1) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"reference/sql/","title":"SQL","text":""},{"location":"reference/sql/#sql-api-reference","title":"SQL API Reference","text":"<p>SedonaDB SQL is a derivative of DataFusion SQL with support for additional functions, data types, and file formats built in to SQL syntax.</p> <p>See the Apache Sedona SQL documentation for additional function documentation and examples.</p> <p>Here are the markdown files for each SQL function found in the provided <code>.rs</code> files.</p>"},{"location":"reference/sql/#st_analyze_aggr","title":"ST_Analyze_Aggr","text":""},{"location":"reference/sql/#description","title":"Description","text":"<p>Return the statistics of geometries for the input geometry.</p>"},{"location":"reference/sql/#format","title":"Format","text":"<p><code>ST_Analyze_Aggr (A: Geometry)</code></p>"},{"location":"reference/sql/#arguments","title":"Arguments","text":"<ul> <li>geom: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example","title":"SQL Example","text":"<pre><code>SELECT ST_Analyze_Aggr(ST_GeomFromText('MULTIPOINT(1.1 101.1,2.1 102.1,3.1 103.1,4.1 104.1,5.1 105.1,6.1 106.1,7.1 107.1,8.1 108.1,9.1 109.1,10.1 110.1)'))\n</code></pre>"},{"location":"reference/sql/#st_astext","title":"ST_AsText","text":""},{"location":"reference/sql/#description_1","title":"Description","text":"<p>Return the Well-Known Text string representation of a geometry or geography.</p>"},{"location":"reference/sql/#format_1","title":"Format","text":"<p><code>ST_AsText (A: Geometry)</code></p>"},{"location":"reference/sql/#arguments_1","title":"Arguments","text":"<ul> <li>geom: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_1","title":"SQL Example","text":"<pre><code>SELECT ST_AsText(ST_Point(1.0, 2.0))\n</code></pre>"},{"location":"reference/sql/#st_contains","title":"ST_Contains","text":""},{"location":"reference/sql/#description_2","title":"Description","text":"<p>Return true if geomA contains geomB.</p>"},{"location":"reference/sql/#format_2","title":"Format","text":"<p><code>ST_Contains (A: Geometry, B: Geometry)</code></p>"},{"location":"reference/sql/#arguments_2","title":"Arguments","text":"<ul> <li>geomA: Input geometry or geography.</li> <li>geomB: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_2","title":"SQL Example","text":"<pre><code>SELECT ST_Contains(ST_Point(0.25 0.25), ST_GeomFromText('POLYGON ((0 0, 1 0, 0 1, 0 0))')) AS val\n</code></pre>"},{"location":"reference/sql/#st_coveredby","title":"ST_CoveredBy","text":""},{"location":"reference/sql/#description_3","title":"Description","text":"<p>Return true if geomA is covered by geomB.</p>"},{"location":"reference/sql/#format_3","title":"Format","text":"<p><code>ST_CoveredBy (A: Geometry, B: Geometry)</code></p>"},{"location":"reference/sql/#arguments_3","title":"Arguments","text":"<ul> <li>geomA: Input geometry or geography.</li> <li>geomB: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_3","title":"SQL Example","text":"<pre><code>SELECT ST_CoveredBy(ST_Point(0.25 0.25), ST_GeomFromText('POLYGON ((0 0, 1 0, 0 1, 0 0))')) AS val\n</code></pre>"},{"location":"reference/sql/#st_covers","title":"ST_Covers","text":""},{"location":"reference/sql/#description_4","title":"Description","text":"<p>Return true if geomA covers geomB.</p>"},{"location":"reference/sql/#format_4","title":"Format","text":"<p><code>ST_Covers (A: Geometry, B: Geometry)</code></p>"},{"location":"reference/sql/#arguments_4","title":"Arguments","text":"<ul> <li>geomA: Input geometry or geography.</li> <li>geomB: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_4","title":"SQL Example","text":"<pre><code>SELECT ST_Covers(ST_Point(0.25 0.25), ST_GeomFromText('POLYGON ((0 0, 1 0, 0 1, 0 0))')) AS val\n</code></pre>"},{"location":"reference/sql/#st_disjoint","title":"ST_Disjoint","text":""},{"location":"reference/sql/#description_5","title":"Description","text":"<p>Return true if geomA is disjoint from geomB.</p>"},{"location":"reference/sql/#format_5","title":"Format","text":"<p><code>ST_Disjoint (A: Geometry, B: Geometry)</code></p>"},{"location":"reference/sql/#arguments_5","title":"Arguments","text":"<ul> <li>geomA: Input geometry or geography.</li> <li>geomB: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_5","title":"SQL Example","text":"<pre><code>SELECT ST_Disjoint(ST_Point(0.25 0.25), ST_GeomFromText('POLYGON ((0 0, 1 0, 0 1, 0 0))')) AS val\n</code></pre>"},{"location":"reference/sql/#st_equals","title":"ST_Equals","text":""},{"location":"reference/sql/#description_6","title":"Description","text":"<p>Return true if geomA equals geomB.</p>"},{"location":"reference/sql/#format_6","title":"Format","text":"<p><code>ST_Equals (A: Geometry, B: Geometry)</code></p>"},{"location":"reference/sql/#arguments_6","title":"Arguments","text":"<ul> <li>geomA: Input geometry or geography.</li> <li>geomB: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_6","title":"SQL Example","text":"<pre><code>SELECT ST_Equals(ST_Point(0.25 0.25), ST_GeomFromText('POLYGON ((0 0, 1 0, 0 1, 0 0))')) AS val\n</code></pre>"},{"location":"reference/sql/#st_geometrytype","title":"ST_GeometryType","text":""},{"location":"reference/sql/#description_7","title":"Description","text":"<p>Return the type of a geometry.</p>"},{"location":"reference/sql/#format_7","title":"Format","text":"<p><code>ST_GeometryType (A: Geometry)</code></p>"},{"location":"reference/sql/#arguments_7","title":"Arguments","text":"<ul> <li>geom: Input geometry.</li> </ul>"},{"location":"reference/sql/#sql-example_7","title":"SQL Example","text":"<pre><code>SELECT ST_GeometryType(ST_GeomFromWKT('POLYGON ((0 0, 1 0, 0 1, 0 0))'))\n</code></pre>"},{"location":"reference/sql/#st_hasm","title":"ST_HasM","text":""},{"location":"reference/sql/#description_8","title":"Description","text":"<p>Return true if the geometry has a M dimension.</p>"},{"location":"reference/sql/#format_8","title":"Format","text":"<p><code>ST_HasM (A: Geometry)</code></p>"},{"location":"reference/sql/#arguments_8","title":"Arguments","text":"<ul> <li>geom: Input geometry.</li> </ul>"},{"location":"reference/sql/#sql-example_8","title":"SQL Example","text":"<pre><code>SELECT ST_HasM(ST_GeomFromWKT('POLYGON ((0 0, 1 0, 0 1, 0 0))'))\n</code></pre>"},{"location":"reference/sql/#st_hasz","title":"ST_HasZ","text":""},{"location":"reference/sql/#description_9","title":"Description","text":"<p>Return true if the geometry has a Z dimension.</p>"},{"location":"reference/sql/#format_9","title":"Format","text":"<p><code>ST_HasZ (A: Geometry)</code></p>"},{"location":"reference/sql/#arguments_9","title":"Arguments","text":"<ul> <li>geom: Input geometry.</li> </ul>"},{"location":"reference/sql/#sql-example_9","title":"SQL Example","text":"<pre><code>SELECT ST_HasZ(ST_GeomFromWKT('POLYGON ((0 0, 1 0, 0 1, 0 0))'))\n</code></pre>"},{"location":"reference/sql/#st_intersects","title":"ST_Intersects","text":""},{"location":"reference/sql/#description_10","title":"Description","text":"<p>Return true if geomA intersects geomB.</p>"},{"location":"reference/sql/#format_10","title":"Format","text":"<p><code>ST_Intersects (A: Geometry, B: Geometry)</code></p>"},{"location":"reference/sql/#arguments_10","title":"Arguments","text":"<ul> <li>geomA: Input geometry or geography.</li> <li>geomB: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_10","title":"SQL Example","text":"<pre><code>SELECT ST_Intersects(ST_Point(0.25 0.25), ST_GeomFromText('POLYGON ((0 0, 1 0, 0 1, 0 0))')) AS val\n</code></pre>"},{"location":"reference/sql/#st_knn","title":"ST_KNN","text":""},{"location":"reference/sql/#description_11","title":"Description","text":"<p>Return true if geomA finds k nearest neighbors from geomB.</p>"},{"location":"reference/sql/#format_11","title":"Format","text":"<p><code>ST_KNN (A: Geometry, B: Geometry, k: Integer, use_spheroid: Boolean)</code></p>"},{"location":"reference/sql/#arguments_11","title":"Arguments","text":"<ul> <li>geomA: Query geometry or geography.</li> <li>geomB: Object geometry or geography.</li> <li>k: Number of nearest neighbors to find.</li> <li>use_spheroid: Use spheroid distance calculation.</li> </ul>"},{"location":"reference/sql/#sql-example_11","title":"SQL Example","text":"<pre><code>SELECT * FROM table1 a JOIN table2 b ON ST_KNN(a.geom, b.geom, 5, false)\n</code></pre>"},{"location":"reference/sql/#st_m","title":"ST_M","text":""},{"location":"reference/sql/#description_12","title":"Description","text":"<p>Return the M component of a point geometry or geography.</p>"},{"location":"reference/sql/#format_12","title":"Format","text":"<p><code>ST_M(A: Point)</code></p>"},{"location":"reference/sql/#arguments_12","title":"Arguments","text":"<ul> <li>geom: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_12","title":"SQL Example","text":"<pre><code>SELECT ST_M(ST_Point(1.0, 2.0))\n</code></pre>"},{"location":"reference/sql/#st_touches","title":"ST_Touches","text":""},{"location":"reference/sql/#description_13","title":"Description","text":"<p>Return true if geomA touches geomB.</p>"},{"location":"reference/sql/#format_13","title":"Format","text":"<p><code>ST_Touches (A: Geometry, B: Geometry)</code></p>"},{"location":"reference/sql/#arguments_13","title":"Arguments","text":"<ul> <li>geomA: Input geometry or geography.</li> <li>geomB: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_13","title":"SQL Example","text":"<pre><code>SELECT ST_Touches(ST_Point(0.25 0.25), ST_GeomFromText('POLYGON ((0 0, 1 0, 0 1, 0 0))')) AS val\n</code></pre>"},{"location":"reference/sql/#st_within","title":"ST_Within","text":""},{"location":"reference/sql/#description_14","title":"Description","text":"<p>Return true if geomA is fully contained by geomB.</p>"},{"location":"reference/sql/#format_14","title":"Format","text":"<p><code>ST_Within (A: Geometry, B: Geometry)</code></p>"},{"location":"reference/sql/#arguments_14","title":"Arguments","text":"<ul> <li>geomA: Input geometry or geography.</li> <li>geomB: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_14","title":"SQL Example","text":"<pre><code>SELECT ST_Within(ST_Point(0.25 0.25), ST_GeomFromText('POLYGON ((0 0, 1 0, 0 1, 0 0))')) AS val\n</code></pre>"},{"location":"reference/sql/#st_x","title":"ST_X","text":""},{"location":"reference/sql/#description_15","title":"Description","text":"<p>Return the X component of a point geometry or geography.</p>"},{"location":"reference/sql/#format_15","title":"Format","text":"<p><code>ST_X(A: Point)</code></p>"},{"location":"reference/sql/#arguments_15","title":"Arguments","text":"<ul> <li>geom: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_15","title":"SQL Example","text":"<pre><code>SELECT ST_X(ST_Point(1.0, 2.0))\n</code></pre>"},{"location":"reference/sql/#st_y","title":"ST_Y","text":""},{"location":"reference/sql/#description_16","title":"Description","text":"<p>Return the Y component of a point geometry or geography.</p>"},{"location":"reference/sql/#format_16","title":"Format","text":"<p><code>ST_Y(A: Point)</code></p>"},{"location":"reference/sql/#arguments_16","title":"Arguments","text":"<ul> <li>geom: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_16","title":"SQL Example","text":"<pre><code>SELECT ST_Y(ST_Point(1.0, 2.0))\n</code></pre>"},{"location":"reference/sql/#st_z","title":"ST_Z","text":""},{"location":"reference/sql/#description_17","title":"Description","text":"<p>Return the Z component of a point geometry or geography.</p>"},{"location":"reference/sql/#format_17","title":"Format","text":"<p><code>ST_Z(A: Point)</code></p>"},{"location":"reference/sql/#arguments_17","title":"Arguments","text":"<ul> <li>geom: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_17","title":"SQL Example","text":"<pre><code>SELECT ST_Z(ST_Point(1.0, 2.0))\n</code></pre>"},{"location":"reference/sql/#st_distance","title":"ST_Distance","text":""},{"location":"reference/sql/#description_18","title":"Description","text":"<p>Calculates the distance between geomA and geomB.</p>"},{"location":"reference/sql/#format_18","title":"Format","text":"<p><code>ST_Distance (A: Geometry, B: Geometry)</code></p>"},{"location":"reference/sql/#arguments_18","title":"Arguments","text":"<ul> <li>geomA: Input geometry or geography.</li> <li>geomB: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_18","title":"SQL Example","text":"<pre><code>SELECT ST_Distance(ST_GeomFromText('POLYGON ((10 10, 11 10, 10 11, 10 10))'), ST_GeomFromText('POLYGON ((0 0, 1 0, 0 1, 0 0))')) AS val\n</code></pre>"},{"location":"reference/sql/#st_distancesphere","title":"ST_DistanceSphere","text":""},{"location":"reference/sql/#description_19","title":"Description","text":"<p>Calculates the spherical distance between geomA and geomB.</p>"},{"location":"reference/sql/#format_19","title":"Format","text":"<p><code>ST_DistanceSphere (A: Geometry, B: Geometry)</code></p>"},{"location":"reference/sql/#arguments_19","title":"Arguments","text":"<ul> <li>geomA: Input geometry or geography.</li> <li>geomB: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_19","title":"SQL Example","text":"<pre><code>SELECT ST_DistanceSphere(ST_GeomFromText('POLYGON ((10 10, 11 10, 10 11, 10 10))'), ST_GeomFromText('POLYGON ((0 0, 1 0, 0 1, 0 0))')) AS val\n</code></pre>"},{"location":"reference/sql/#st_distancespheroid","title":"ST_DistanceSpheroid","text":""},{"location":"reference/sql/#description_20","title":"Description","text":"<p>Calculates the spheroidal (ellipsoidal) distance between geomA and geomB.</p>"},{"location":"reference/sql/#format_20","title":"Format","text":"<p><code>ST_DistanceSpheroid (A: Geometry, B: Geometry)</code></p>"},{"location":"reference/sql/#arguments_20","title":"Arguments","text":"<ul> <li>geomA: Input geometry or geography.</li> <li>geomB: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_20","title":"SQL Example","text":"<pre><code>SELECT ST_DistanceSpheroid(ST_GeomFromText('POLYGON ((10 10, 11 10, 10 11, 10 10))'), ST_GeomFromText('POLYGON ((0 0, 1 0, 0 1, 0 0))')) AS val\n</code></pre>"},{"location":"reference/sql/#st_maxdistance","title":"ST_MaxDistance","text":""},{"location":"reference/sql/#description_21","title":"Description","text":"<p>Calculates the maximum distance between geomA and geomB.</p>"},{"location":"reference/sql/#format_21","title":"Format","text":"<p><code>ST_MaxDistance (A: Geometry, B: Geometry)</code></p>"},{"location":"reference/sql/#arguments_21","title":"Arguments","text":"<ul> <li>geomA: Input geometry or geography.</li> <li>geomB: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_21","title":"SQL Example","text":"<pre><code>SELECT ST_MaxDistance(ST_GeomFromText('POLYGON ((10 10, 11 10, 10 11, 10 10))'), ST_GeomFromText('POLYGON ((0 0, 1 0, 0 1, 0 0))')) AS val\n</code></pre>"},{"location":"reference/sql/#st_hausdorffdistance","title":"ST_HausdorffDistance","text":""},{"location":"reference/sql/#description_22","title":"Description","text":"<p>Calculates the Hausdorff distance between geomA and geomB.</p>"},{"location":"reference/sql/#format_22","title":"Format","text":"<p><code>ST_HausdorffDistance (A: Geometry, B: Geometry)</code></p>"},{"location":"reference/sql/#arguments_22","title":"Arguments","text":"<ul> <li>geomA: Input geometry or geography.</li> <li>geomB: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_22","title":"SQL Example","text":"<pre><code>SELECT ST_HausdorffDistance(ST_GeomFromText('POLYGON ((10 10, 11 10, 10 11, 10 10))'), ST_GeomFromText('POLYGON ((0 0, 1 0, 0 1, 0 0))')) AS val\n</code></pre>"},{"location":"reference/sql/#st_frechetdistance","title":"ST_FrechetDistance","text":""},{"location":"reference/sql/#description_23","title":"Description","text":"<p>Calculates the Frechet distance between geomA and geomB.</p>"},{"location":"reference/sql/#format_23","title":"Format","text":"<p><code>ST_FrechetDistance (A: Geometry, B: Geometry)</code></p>"},{"location":"reference/sql/#arguments_23","title":"Arguments","text":"<ul> <li>geomA: Input geometry or geography.</li> <li>geomB: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_23","title":"SQL Example","text":"<pre><code>SELECT ST_FrechetDistance(ST_GeomFromText('POLYGON ((10 10, 11 10, 10 11, 10 10))'), ST_GeomFromText('POLYGON ((0 0, 1 0, 0 1, 0 0))')) AS val\n</code></pre>"},{"location":"reference/sql/#st_intersection","title":"ST_Intersection","text":""},{"location":"reference/sql/#description_24","title":"Description","text":"<p>Computes the intersection between geomA and geomB.</p>"},{"location":"reference/sql/#format_24","title":"Format","text":"<p><code>ST_Intersection (A: Geometry, B: Geometry)</code></p>"},{"location":"reference/sql/#arguments_24","title":"Arguments","text":"<ul> <li>geomA: Input geometry or geography.</li> <li>geomB: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_24","title":"SQL Example","text":"<pre><code>SELECT ST_Intersection(ST_GeomFromText('POLYGON ((1 1, 11 1, 1 11, 0 0))'), ST_GeomFromText('POLYGON ((0 0, 10 0, 0 10, 0 0))')) AS val\n</code></pre>"},{"location":"reference/sql/#st_union","title":"ST_Union","text":""},{"location":"reference/sql/#description_25","title":"Description","text":"<p>Computes the union between geomA and geomB.</p>"},{"location":"reference/sql/#format_25","title":"Format","text":"<p><code>ST_Union (A: Geometry, B: Geometry)</code></p>"},{"location":"reference/sql/#arguments_25","title":"Arguments","text":"<ul> <li>geomA: Input geometry or geography.</li> <li>geomB: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_25","title":"SQL Example","text":"<pre><code>SELECT ST_Union(ST_GeomFromText('POLYGON ((1 1, 11 1, 1 11, 0 0))'), ST_GeomFromText('POLYGON ((0 0, 10 0, 0 10, 0 0))')) AS val\n</code></pre>"},{"location":"reference/sql/#st_difference","title":"ST_Difference","text":""},{"location":"reference/sql/#description_26","title":"Description","text":"<p>Computes the difference between geomA and geomB.</p>"},{"location":"reference/sql/#format_26","title":"Format","text":"<p><code>ST_Difference (A: Geometry, B: Geometry)</code></p>"},{"location":"reference/sql/#arguments_26","title":"Arguments","text":"<ul> <li>geomA: Input geometry or geography.</li> <li>geomB: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_26","title":"SQL Example","text":"<pre><code>SELECT ST_Difference(ST_GeomFromText('POLYGON ((1 1, 11 1, 1 11, 0 0))'), ST_GeomFromText('POLYGON ((0 0, 10 0, 0 10, 0 0))')) AS val\n</code></pre>"},{"location":"reference/sql/#st_symdifference","title":"ST_SymDifference","text":""},{"location":"reference/sql/#description_27","title":"Description","text":"<p>Computes the symmetric difference between geomA and geomB.</p>"},{"location":"reference/sql/#format_27","title":"Format","text":"<p><code>ST_SymDifference (A: Geometry, B: Geometry)</code></p>"},{"location":"reference/sql/#arguments_27","title":"Arguments","text":"<ul> <li>geomA: Input geometry or geography.</li> <li>geomB: Input geometry or geography.</li> </ul>"},{"location":"reference/sql/#sql-example_27","title":"SQL Example","text":"<pre><code>SELECT ST_SymDifference(ST_GeomFromText('POLYGON ((1 1, 11 1, 1 11, 0 0))'), ST_GeomFromText('POLYGON ((0 0, 10 0, 0 10, 0 0))')) AS val\n</code></pre>"}]}
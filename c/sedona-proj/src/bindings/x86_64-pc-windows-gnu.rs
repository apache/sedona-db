// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

/* automatically generated by rust-bindgen 0.71.1 */

pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _CRT_HAS_C11: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub type va_list = *mut ::std::os::raw::c_char;
unsafe extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
unsafe extern "C" {
    pub fn __security_init_cookie();
}
unsafe extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
unsafe extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
unsafe extern "C" {
    pub static mut __security_cookie: usize;
}
pub type __crt_bool = bool;
unsafe extern "C" {
    pub fn _invalid_parameter_noinfo();
}
unsafe extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn() -> !;
}
unsafe extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    ) -> !;
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __crt_locale_data_public"]
        [::std::mem::size_of::<__crt_locale_data_public>() - 16usize];
    ["Alignment of __crt_locale_data_public"]
        [::std::mem::align_of::<__crt_locale_data_public>() - 8usize];
    ["Offset of field: __crt_locale_data_public::_locale_pctype"]
        [::std::mem::offset_of!(__crt_locale_data_public, _locale_pctype) - 0usize];
    ["Offset of field: __crt_locale_data_public::_locale_mb_cur_max"]
        [::std::mem::offset_of!(__crt_locale_data_public, _locale_mb_cur_max) - 8usize];
    ["Offset of field: __crt_locale_data_public::_locale_lc_codepage"]
        [::std::mem::offset_of!(__crt_locale_data_public, _locale_lc_codepage) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __crt_locale_pointers"][::std::mem::size_of::<__crt_locale_pointers>() - 16usize];
    ["Alignment of __crt_locale_pointers"]
        [::std::mem::align_of::<__crt_locale_pointers>() - 8usize];
    ["Offset of field: __crt_locale_pointers::locinfo"]
        [::std::mem::offset_of!(__crt_locale_pointers, locinfo) - 0usize];
    ["Offset of field: __crt_locale_pointers::mbcinfo"]
        [::std::mem::offset_of!(__crt_locale_pointers, mbcinfo) - 8usize];
};
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _Mbstatet"][::std::mem::size_of::<_Mbstatet>() - 8usize];
    ["Alignment of _Mbstatet"][::std::mem::align_of::<_Mbstatet>() - 4usize];
    ["Offset of field: _Mbstatet::_Wchar"][::std::mem::offset_of!(_Mbstatet, _Wchar) - 0usize];
    ["Offset of field: _Mbstatet::_Byte"][::std::mem::offset_of!(_Mbstatet, _Byte) - 4usize];
    ["Offset of field: _Mbstatet::_State"][::std::mem::offset_of!(_Mbstatet, _State) - 6usize];
};
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = usize;
unsafe extern "C" {
    pub fn _errno() -> *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _set_errno(_Value: ::std::os::raw::c_int) -> errno_t;
}
unsafe extern "C" {
    pub fn _get_errno(_Value: *mut ::std::os::raw::c_int) -> errno_t;
}
unsafe extern "C" {
    pub fn __threadid() -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn __threadhandle() -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_ctx {
    _unused: [u8; 0],
}
pub type PJ_CONTEXT = pj_ctx;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PJ_AREA {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PJconsts {
    _unused: [u8; 0],
}
pub type PJ = PJconsts;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PJ_XYZT {
    pub x: f64,
    pub y: f64,
    pub z: f64,
    pub t: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PJ_XYZT"][::std::mem::size_of::<PJ_XYZT>() - 32usize];
    ["Alignment of PJ_XYZT"][::std::mem::align_of::<PJ_XYZT>() - 8usize];
    ["Offset of field: PJ_XYZT::x"][::std::mem::offset_of!(PJ_XYZT, x) - 0usize];
    ["Offset of field: PJ_XYZT::y"][::std::mem::offset_of!(PJ_XYZT, y) - 8usize];
    ["Offset of field: PJ_XYZT::z"][::std::mem::offset_of!(PJ_XYZT, z) - 16usize];
    ["Offset of field: PJ_XYZT::t"][::std::mem::offset_of!(PJ_XYZT, t) - 24usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union PJ_COORD {
    pub v: [f64; 4usize],
    pub xyzt: PJ_XYZT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PJ_COORD"][::std::mem::size_of::<PJ_COORD>() - 32usize];
    ["Alignment of PJ_COORD"][::std::mem::align_of::<PJ_COORD>() - 8usize];
    ["Offset of field: PJ_COORD::v"][::std::mem::offset_of!(PJ_COORD, v) - 0usize];
    ["Offset of field: PJ_COORD::xyzt"][::std::mem::offset_of!(PJ_COORD, xyzt) - 0usize];
};
pub const PJ_DIRECTION_PJ_FWD: PJ_DIRECTION = 1;
pub const PJ_DIRECTION_PJ_IDENT: PJ_DIRECTION = 0;
pub const PJ_DIRECTION_PJ_INV: PJ_DIRECTION = -1;
pub type PJ_DIRECTION = ::std::os::raw::c_int;
pub const PJ_LOG_LEVEL_PJ_LOG_NONE: PJ_LOG_LEVEL = 0;
pub const PJ_LOG_LEVEL_PJ_LOG_ERROR: PJ_LOG_LEVEL = 1;
pub const PJ_LOG_LEVEL_PJ_LOG_DEBUG: PJ_LOG_LEVEL = 2;
pub const PJ_LOG_LEVEL_PJ_LOG_TRACE: PJ_LOG_LEVEL = 3;
pub const PJ_LOG_LEVEL_PJ_LOG_TELL: PJ_LOG_LEVEL = 4;
pub type PJ_LOG_LEVEL = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PJ_INFO {
    pub major: ::std::os::raw::c_int,
    pub minor: ::std::os::raw::c_int,
    pub patch: ::std::os::raw::c_int,
    pub release: *const ::std::os::raw::c_char,
    pub version: *const ::std::os::raw::c_char,
    pub searchpath: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PJ_INFO"][::std::mem::size_of::<PJ_INFO>() - 40usize];
    ["Alignment of PJ_INFO"][::std::mem::align_of::<PJ_INFO>() - 8usize];
    ["Offset of field: PJ_INFO::major"][::std::mem::offset_of!(PJ_INFO, major) - 0usize];
    ["Offset of field: PJ_INFO::minor"][::std::mem::offset_of!(PJ_INFO, minor) - 4usize];
    ["Offset of field: PJ_INFO::patch"][::std::mem::offset_of!(PJ_INFO, patch) - 8usize];
    ["Offset of field: PJ_INFO::release"][::std::mem::offset_of!(PJ_INFO, release) - 16usize];
    ["Offset of field: PJ_INFO::version"][::std::mem::offset_of!(PJ_INFO, version) - 24usize];
    ["Offset of field: PJ_INFO::searchpath"][::std::mem::offset_of!(PJ_INFO, searchpath) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ProjApi {
    pub proj_area_create: ::std::option::Option<unsafe extern "C" fn() -> *mut PJ_AREA>,
    pub proj_area_destroy: ::std::option::Option<unsafe extern "C" fn(area: *mut PJ_AREA)>,
    pub proj_area_set_bbox: ::std::option::Option<
        unsafe extern "C" fn(
            area: *mut PJ_AREA,
            west_lon_degree: f64,
            south_lat_degree: f64,
            east_lon_degree: f64,
            north_lat_degree: f64,
        ) -> ::std::os::raw::c_int,
    >,
    pub proj_context_create: ::std::option::Option<unsafe extern "C" fn() -> *mut PJ_CONTEXT>,
    pub proj_context_destroy: ::std::option::Option<unsafe extern "C" fn(ctx: *mut PJ_CONTEXT)>,
    pub proj_context_errno:
        ::std::option::Option<unsafe extern "C" fn(ctx: *mut PJ_CONTEXT) -> ::std::os::raw::c_int>,
    pub proj_context_errno_string: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut PJ_CONTEXT,
            err: ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub proj_context_set_database_path: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut PJ_CONTEXT,
            dbPath: *const ::std::os::raw::c_char,
            auxDbPaths: *const *const ::std::os::raw::c_char,
            options: *const *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub proj_context_set_search_paths: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut PJ_CONTEXT,
            count_paths: ::std::os::raw::c_int,
            paths: *const *const ::std::os::raw::c_char,
        ),
    >,
    pub proj_create: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut PJ_CONTEXT,
            definition: *const ::std::os::raw::c_char,
        ) -> *mut PJ,
    >,
    pub proj_create_crs_to_crs_from_pj: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut PJ_CONTEXT,
            source_crs: *mut PJ,
            target_crs: *mut PJ,
            area: *mut PJ_AREA,
            options: *const *const ::std::os::raw::c_char,
        ) -> *mut PJ,
    >,
    pub proj_cs_get_axis_count: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut PJ_CONTEXT, cs: *const PJ) -> ::std::os::raw::c_int,
    >,
    pub proj_destroy: ::std::option::Option<unsafe extern "C" fn(P: *mut PJ)>,
    pub proj_errno:
        ::std::option::Option<unsafe extern "C" fn(P: *const PJ) -> ::std::os::raw::c_int>,
    pub proj_errno_reset: ::std::option::Option<unsafe extern "C" fn(P: *mut PJ)>,
    pub proj_info: ::std::option::Option<unsafe extern "C" fn() -> PJ_INFO>,
    pub proj_log_level: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut PJ_CONTEXT, level: PJ_LOG_LEVEL) -> PJ_LOG_LEVEL,
    >,
    pub proj_normalize_for_visualization: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut PJ_CONTEXT, obj: *const PJ) -> *mut PJ,
    >,
    pub proj_trans: ::std::option::Option<
        unsafe extern "C" fn(P: *mut PJ, direction: PJ_DIRECTION, coord: PJ_COORD) -> PJ_COORD,
    >,
    pub proj_trans_array: ::std::option::Option<
        unsafe extern "C" fn(
            P: *mut PJ,
            direction: PJ_DIRECTION,
            n: usize,
            coord: *mut PJ_COORD,
        ) -> PJ_COORD,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ProjApi)>,
    pub private_data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ProjApi"][::std::mem::size_of::<ProjApi>() - 176usize];
    ["Alignment of ProjApi"][::std::mem::align_of::<ProjApi>() - 8usize];
    ["Offset of field: ProjApi::proj_area_create"]
        [::std::mem::offset_of!(ProjApi, proj_area_create) - 0usize];
    ["Offset of field: ProjApi::proj_area_destroy"]
        [::std::mem::offset_of!(ProjApi, proj_area_destroy) - 8usize];
    ["Offset of field: ProjApi::proj_area_set_bbox"]
        [::std::mem::offset_of!(ProjApi, proj_area_set_bbox) - 16usize];
    ["Offset of field: ProjApi::proj_context_create"]
        [::std::mem::offset_of!(ProjApi, proj_context_create) - 24usize];
    ["Offset of field: ProjApi::proj_context_destroy"]
        [::std::mem::offset_of!(ProjApi, proj_context_destroy) - 32usize];
    ["Offset of field: ProjApi::proj_context_errno"]
        [::std::mem::offset_of!(ProjApi, proj_context_errno) - 40usize];
    ["Offset of field: ProjApi::proj_context_errno_string"]
        [::std::mem::offset_of!(ProjApi, proj_context_errno_string) - 48usize];
    ["Offset of field: ProjApi::proj_context_set_database_path"]
        [::std::mem::offset_of!(ProjApi, proj_context_set_database_path) - 56usize];
    ["Offset of field: ProjApi::proj_context_set_search_paths"]
        [::std::mem::offset_of!(ProjApi, proj_context_set_search_paths) - 64usize];
    ["Offset of field: ProjApi::proj_create"]
        [::std::mem::offset_of!(ProjApi, proj_create) - 72usize];
    ["Offset of field: ProjApi::proj_create_crs_to_crs_from_pj"]
        [::std::mem::offset_of!(ProjApi, proj_create_crs_to_crs_from_pj) - 80usize];
    ["Offset of field: ProjApi::proj_cs_get_axis_count"]
        [::std::mem::offset_of!(ProjApi, proj_cs_get_axis_count) - 88usize];
    ["Offset of field: ProjApi::proj_destroy"]
        [::std::mem::offset_of!(ProjApi, proj_destroy) - 96usize];
    ["Offset of field: ProjApi::proj_errno"]
        [::std::mem::offset_of!(ProjApi, proj_errno) - 104usize];
    ["Offset of field: ProjApi::proj_errno_reset"]
        [::std::mem::offset_of!(ProjApi, proj_errno_reset) - 112usize];
    ["Offset of field: ProjApi::proj_info"][::std::mem::offset_of!(ProjApi, proj_info) - 120usize];
    ["Offset of field: ProjApi::proj_log_level"]
        [::std::mem::offset_of!(ProjApi, proj_log_level) - 128usize];
    ["Offset of field: ProjApi::proj_normalize_for_visualization"]
        [::std::mem::offset_of!(ProjApi, proj_normalize_for_visualization) - 136usize];
    ["Offset of field: ProjApi::proj_trans"]
        [::std::mem::offset_of!(ProjApi, proj_trans) - 144usize];
    ["Offset of field: ProjApi::proj_trans_array"]
        [::std::mem::offset_of!(ProjApi, proj_trans_array) - 152usize];
    ["Offset of field: ProjApi::release"][::std::mem::offset_of!(ProjApi, release) - 160usize];
    ["Offset of field: ProjApi::private_data"]
        [::std::mem::offset_of!(ProjApi, private_data) - 168usize];
};
unsafe extern "C" {
    pub fn proj_dyn_api_init(
        api: *mut ProjApi,
        shared_object_path: *const ::std::os::raw::c_char,
        err_msg: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}

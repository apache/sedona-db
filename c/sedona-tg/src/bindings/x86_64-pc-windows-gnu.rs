// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

/* automatically generated by rust-bindgen 0.71.1 */

pub const __bool_true_false_are_defined: u32 = 1;
pub const false_: u32 = 0;
pub const true_: u32 = 1;
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _CRT_HAS_C11: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub type va_list = *mut ::std::os::raw::c_char;
unsafe extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
unsafe extern "C" {
    pub fn __security_init_cookie();
}
unsafe extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
unsafe extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
unsafe extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub type __crt_bool = bool;
unsafe extern "C" {
    pub fn _invalid_parameter_noinfo();
}
unsafe extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn() -> !;
}
unsafe extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    ) -> !;
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __crt_locale_data_public"]
        [::std::mem::size_of::<__crt_locale_data_public>() - 16usize];
    ["Alignment of __crt_locale_data_public"]
        [::std::mem::align_of::<__crt_locale_data_public>() - 8usize];
    ["Offset of field: __crt_locale_data_public::_locale_pctype"]
        [::std::mem::offset_of!(__crt_locale_data_public, _locale_pctype) - 0usize];
    ["Offset of field: __crt_locale_data_public::_locale_mb_cur_max"]
        [::std::mem::offset_of!(__crt_locale_data_public, _locale_mb_cur_max) - 8usize];
    ["Offset of field: __crt_locale_data_public::_locale_lc_codepage"]
        [::std::mem::offset_of!(__crt_locale_data_public, _locale_lc_codepage) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __crt_locale_pointers"][::std::mem::size_of::<__crt_locale_pointers>() - 16usize];
    ["Alignment of __crt_locale_pointers"]
        [::std::mem::align_of::<__crt_locale_pointers>() - 8usize];
    ["Offset of field: __crt_locale_pointers::locinfo"]
        [::std::mem::offset_of!(__crt_locale_pointers, locinfo) - 0usize];
    ["Offset of field: __crt_locale_pointers::mbcinfo"]
        [::std::mem::offset_of!(__crt_locale_pointers, mbcinfo) - 8usize];
};
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _Mbstatet"][::std::mem::size_of::<_Mbstatet>() - 8usize];
    ["Alignment of _Mbstatet"][::std::mem::align_of::<_Mbstatet>() - 4usize];
    ["Offset of field: _Mbstatet::_Wchar"][::std::mem::offset_of!(_Mbstatet, _Wchar) - 0usize];
    ["Offset of field: _Mbstatet::_Byte"][::std::mem::offset_of!(_Mbstatet, _Byte) - 4usize];
    ["Offset of field: _Mbstatet::_State"][::std::mem::offset_of!(_Mbstatet, _State) - 6usize];
};
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = usize;
unsafe extern "C" {
    pub fn _errno() -> *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _set_errno(_Value: ::std::os::raw::c_int) -> errno_t;
}
unsafe extern "C" {
    pub fn _get_errno(_Value: *mut ::std::os::raw::c_int) -> errno_t;
}
unsafe extern "C" {
    pub fn __threadid() -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn __threadhandle() -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tg_point {
    pub x: f64,
    pub y: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tg_point"][::std::mem::size_of::<tg_point>() - 16usize];
    ["Alignment of tg_point"][::std::mem::align_of::<tg_point>() - 8usize];
    ["Offset of field: tg_point::x"][::std::mem::offset_of!(tg_point, x) - 0usize];
    ["Offset of field: tg_point::y"][::std::mem::offset_of!(tg_point, y) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tg_segment {
    pub a: tg_point,
    pub b: tg_point,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tg_segment"][::std::mem::size_of::<tg_segment>() - 32usize];
    ["Alignment of tg_segment"][::std::mem::align_of::<tg_segment>() - 8usize];
    ["Offset of field: tg_segment::a"][::std::mem::offset_of!(tg_segment, a) - 0usize];
    ["Offset of field: tg_segment::b"][::std::mem::offset_of!(tg_segment, b) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tg_rect {
    pub min: tg_point,
    pub max: tg_point,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tg_rect"][::std::mem::size_of::<tg_rect>() - 32usize];
    ["Alignment of tg_rect"][::std::mem::align_of::<tg_rect>() - 8usize];
    ["Offset of field: tg_rect::min"][::std::mem::offset_of!(tg_rect, min) - 0usize];
    ["Offset of field: tg_rect::max"][::std::mem::offset_of!(tg_rect, max) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tg_line {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tg_ring {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tg_poly {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tg_geom {
    _unused: [u8; 0],
}
pub const tg_geom_type_TG_POINT: tg_geom_type = 1;
pub const tg_geom_type_TG_LINESTRING: tg_geom_type = 2;
pub const tg_geom_type_TG_POLYGON: tg_geom_type = 3;
pub const tg_geom_type_TG_MULTIPOINT: tg_geom_type = 4;
pub const tg_geom_type_TG_MULTILINESTRING: tg_geom_type = 5;
pub const tg_geom_type_TG_MULTIPOLYGON: tg_geom_type = 6;
pub const tg_geom_type_TG_GEOMETRYCOLLECTION: tg_geom_type = 7;
pub type tg_geom_type = ::std::os::raw::c_int;
pub const tg_index_TG_DEFAULT: tg_index = 0;
pub const tg_index_TG_NONE: tg_index = 1;
pub const tg_index_TG_NATURAL: tg_index = 2;
pub const tg_index_TG_YSTRIPES: tg_index = 3;
pub type tg_index = ::std::os::raw::c_int;
unsafe extern "C" {
    pub fn tg_geom_new_point(point: tg_point) -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_geom_new_linestring(line: *const tg_line) -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_geom_new_polygon(poly: *const tg_poly) -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_geom_new_multipoint(
        points: *const tg_point,
        npoints: ::std::os::raw::c_int,
    ) -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_geom_new_multilinestring(
        lines: *const *const tg_line,
        nlines: ::std::os::raw::c_int,
    ) -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_geom_new_multipolygon(
        polys: *const *const tg_poly,
        npolys: ::std::os::raw::c_int,
    ) -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_geom_new_geometrycollection(
        geoms: *const *const tg_geom,
        ngeoms: ::std::os::raw::c_int,
    ) -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_geom_new_error(errmsg: *const ::std::os::raw::c_char) -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_geom_clone(geom: *const tg_geom) -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_geom_copy(geom: *const tg_geom) -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_geom_free(geom: *mut tg_geom);
}
unsafe extern "C" {
    pub fn tg_geom_typeof(geom: *const tg_geom) -> tg_geom_type;
}
unsafe extern "C" {
    pub fn tg_geom_type_string(type_: tg_geom_type) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn tg_geom_rect(geom: *const tg_geom) -> tg_rect;
}
unsafe extern "C" {
    pub fn tg_geom_is_feature(geom: *const tg_geom) -> bool;
}
unsafe extern "C" {
    pub fn tg_geom_is_featurecollection(geom: *const tg_geom) -> bool;
}
unsafe extern "C" {
    pub fn tg_geom_point(geom: *const tg_geom) -> tg_point;
}
unsafe extern "C" {
    pub fn tg_geom_line(geom: *const tg_geom) -> *const tg_line;
}
unsafe extern "C" {
    pub fn tg_geom_poly(geom: *const tg_geom) -> *const tg_poly;
}
unsafe extern "C" {
    pub fn tg_geom_num_points(geom: *const tg_geom) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tg_geom_point_at(geom: *const tg_geom, index: ::std::os::raw::c_int) -> tg_point;
}
unsafe extern "C" {
    pub fn tg_geom_num_lines(geom: *const tg_geom) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tg_geom_line_at(geom: *const tg_geom, index: ::std::os::raw::c_int) -> *const tg_line;
}
unsafe extern "C" {
    pub fn tg_geom_num_polys(geom: *const tg_geom) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tg_geom_poly_at(geom: *const tg_geom, index: ::std::os::raw::c_int) -> *const tg_poly;
}
unsafe extern "C" {
    pub fn tg_geom_num_geometries(geom: *const tg_geom) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tg_geom_geometry_at(
        geom: *const tg_geom,
        index: ::std::os::raw::c_int,
    ) -> *const tg_geom;
}
unsafe extern "C" {
    pub fn tg_geom_extra_json(geom: *const tg_geom) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn tg_geom_is_empty(geom: *const tg_geom) -> bool;
}
unsafe extern "C" {
    pub fn tg_geom_dims(geom: *const tg_geom) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tg_geom_has_z(geom: *const tg_geom) -> bool;
}
unsafe extern "C" {
    pub fn tg_geom_has_m(geom: *const tg_geom) -> bool;
}
unsafe extern "C" {
    pub fn tg_geom_z(geom: *const tg_geom) -> f64;
}
unsafe extern "C" {
    pub fn tg_geom_m(geom: *const tg_geom) -> f64;
}
unsafe extern "C" {
    pub fn tg_geom_extra_coords(geom: *const tg_geom) -> *const f64;
}
unsafe extern "C" {
    pub fn tg_geom_num_extra_coords(geom: *const tg_geom) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tg_geom_memsize(geom: *const tg_geom) -> usize;
}
unsafe extern "C" {
    pub fn tg_geom_search(
        geom: *const tg_geom,
        rect: tg_rect,
        iter: ::std::option::Option<
            unsafe extern "C" fn(
                geom: *const tg_geom,
                index: ::std::os::raw::c_int,
                udata: *mut ::std::os::raw::c_void,
            ) -> bool,
        >,
        udata: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn tg_geom_fullrect(
        geom: *const tg_geom,
        min: *mut f64,
        max: *mut f64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tg_geom_equals(a: *const tg_geom, b: *const tg_geom) -> bool;
}
unsafe extern "C" {
    pub fn tg_geom_intersects(a: *const tg_geom, b: *const tg_geom) -> bool;
}
unsafe extern "C" {
    pub fn tg_geom_disjoint(a: *const tg_geom, b: *const tg_geom) -> bool;
}
unsafe extern "C" {
    pub fn tg_geom_contains(a: *const tg_geom, b: *const tg_geom) -> bool;
}
unsafe extern "C" {
    pub fn tg_geom_within(a: *const tg_geom, b: *const tg_geom) -> bool;
}
unsafe extern "C" {
    pub fn tg_geom_covers(a: *const tg_geom, b: *const tg_geom) -> bool;
}
unsafe extern "C" {
    pub fn tg_geom_coveredby(a: *const tg_geom, b: *const tg_geom) -> bool;
}
unsafe extern "C" {
    pub fn tg_geom_touches(a: *const tg_geom, b: *const tg_geom) -> bool;
}
unsafe extern "C" {
    pub fn tg_geom_intersects_rect(a: *const tg_geom, b: tg_rect) -> bool;
}
unsafe extern "C" {
    pub fn tg_geom_intersects_xy(a: *const tg_geom, x: f64, y: f64) -> bool;
}
unsafe extern "C" {
    pub fn tg_parse_geojson(geojson: *const ::std::os::raw::c_char) -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_parse_geojsonn(geojson: *const ::std::os::raw::c_char, len: usize) -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_parse_geojson_ix(
        geojson: *const ::std::os::raw::c_char,
        ix: tg_index,
    ) -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_parse_geojsonn_ix(
        geojson: *const ::std::os::raw::c_char,
        len: usize,
        ix: tg_index,
    ) -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_parse_wkt(wkt: *const ::std::os::raw::c_char) -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_parse_wktn(wkt: *const ::std::os::raw::c_char, len: usize) -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_parse_wkt_ix(wkt: *const ::std::os::raw::c_char, ix: tg_index) -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_parse_wktn_ix(
        wkt: *const ::std::os::raw::c_char,
        len: usize,
        ix: tg_index,
    ) -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_parse_wkb(wkb: *const u8, len: usize) -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_parse_wkb_ix(wkb: *const u8, len: usize, ix: tg_index) -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_parse_hex(hex: *const ::std::os::raw::c_char) -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_parse_hexn(hex: *const ::std::os::raw::c_char, len: usize) -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_parse_hex_ix(hex: *const ::std::os::raw::c_char, ix: tg_index) -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_parse_hexn_ix(
        hex: *const ::std::os::raw::c_char,
        len: usize,
        ix: tg_index,
    ) -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_parse_geobin(geobin: *const u8, len: usize) -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_parse_geobin_ix(geobin: *const u8, len: usize, ix: tg_index) -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_parse(data: *const ::std::os::raw::c_void, len: usize) -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_parse_ix(
        data: *const ::std::os::raw::c_void,
        len: usize,
        ix: tg_index,
    ) -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_geom_error(geom: *const tg_geom) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn tg_geobin_fullrect(
        geobin: *const u8,
        len: usize,
        min: *mut f64,
        max: *mut f64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tg_geobin_rect(geobin: *const u8, len: usize) -> tg_rect;
}
unsafe extern "C" {
    pub fn tg_geobin_point(geobin: *const u8, len: usize) -> tg_point;
}
unsafe extern "C" {
    pub fn tg_geom_geojson(
        geom: *const tg_geom,
        dst: *mut ::std::os::raw::c_char,
        n: usize,
    ) -> usize;
}
unsafe extern "C" {
    pub fn tg_geom_wkt(geom: *const tg_geom, dst: *mut ::std::os::raw::c_char, n: usize) -> usize;
}
unsafe extern "C" {
    pub fn tg_geom_wkb(geom: *const tg_geom, dst: *mut u8, n: usize) -> usize;
}
unsafe extern "C" {
    pub fn tg_geom_hex(geom: *const tg_geom, dst: *mut ::std::os::raw::c_char, n: usize) -> usize;
}
unsafe extern "C" {
    pub fn tg_geom_geobin(geom: *const tg_geom, dst: *mut u8, n: usize) -> usize;
}
unsafe extern "C" {
    pub fn tg_geom_new_point_z(point: tg_point, z: f64) -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_geom_new_point_m(point: tg_point, m: f64) -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_geom_new_point_zm(point: tg_point, z: f64, m: f64) -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_geom_new_point_empty() -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_geom_new_linestring_z(
        line: *const tg_line,
        extra_coords: *const f64,
        ncoords: ::std::os::raw::c_int,
    ) -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_geom_new_linestring_m(
        line: *const tg_line,
        extra_coords: *const f64,
        ncoords: ::std::os::raw::c_int,
    ) -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_geom_new_linestring_zm(
        line: *const tg_line,
        extra_coords: *const f64,
        ncoords: ::std::os::raw::c_int,
    ) -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_geom_new_linestring_empty() -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_geom_new_polygon_z(
        poly: *const tg_poly,
        extra_coords: *const f64,
        ncoords: ::std::os::raw::c_int,
    ) -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_geom_new_polygon_m(
        poly: *const tg_poly,
        extra_coords: *const f64,
        ncoords: ::std::os::raw::c_int,
    ) -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_geom_new_polygon_zm(
        poly: *const tg_poly,
        extra_coords: *const f64,
        ncoords: ::std::os::raw::c_int,
    ) -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_geom_new_polygon_empty() -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_geom_new_multipoint_z(
        points: *const tg_point,
        npoints: ::std::os::raw::c_int,
        extra_coords: *const f64,
        ncoords: ::std::os::raw::c_int,
    ) -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_geom_new_multipoint_m(
        points: *const tg_point,
        npoints: ::std::os::raw::c_int,
        extra_coords: *const f64,
        ncoords: ::std::os::raw::c_int,
    ) -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_geom_new_multipoint_zm(
        points: *const tg_point,
        npoints: ::std::os::raw::c_int,
        extra_coords: *const f64,
        ncoords: ::std::os::raw::c_int,
    ) -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_geom_new_multipoint_empty() -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_geom_new_multilinestring_z(
        lines: *const *const tg_line,
        nlines: ::std::os::raw::c_int,
        extra_coords: *const f64,
        ncoords: ::std::os::raw::c_int,
    ) -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_geom_new_multilinestring_m(
        lines: *const *const tg_line,
        nlines: ::std::os::raw::c_int,
        extra_coords: *const f64,
        ncoords: ::std::os::raw::c_int,
    ) -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_geom_new_multilinestring_zm(
        lines: *const *const tg_line,
        nlines: ::std::os::raw::c_int,
        extra_coords: *const f64,
        ncoords: ::std::os::raw::c_int,
    ) -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_geom_new_multilinestring_empty() -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_geom_new_multipolygon_z(
        polys: *const *const tg_poly,
        npolys: ::std::os::raw::c_int,
        extra_coords: *const f64,
        ncoords: ::std::os::raw::c_int,
    ) -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_geom_new_multipolygon_m(
        polys: *const *const tg_poly,
        npolys: ::std::os::raw::c_int,
        extra_coords: *const f64,
        ncoords: ::std::os::raw::c_int,
    ) -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_geom_new_multipolygon_zm(
        polys: *const *const tg_poly,
        npolys: ::std::os::raw::c_int,
        extra_coords: *const f64,
        ncoords: ::std::os::raw::c_int,
    ) -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_geom_new_multipolygon_empty() -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_geom_new_geometrycollection_empty() -> *mut tg_geom;
}
unsafe extern "C" {
    pub fn tg_point_rect(point: tg_point) -> tg_rect;
}
unsafe extern "C" {
    pub fn tg_point_intersects_rect(a: tg_point, b: tg_rect) -> bool;
}
unsafe extern "C" {
    pub fn tg_segment_rect(s: tg_segment) -> tg_rect;
}
unsafe extern "C" {
    pub fn tg_segment_intersects_segment(a: tg_segment, b: tg_segment) -> bool;
}
unsafe extern "C" {
    pub fn tg_rect_expand(rect: tg_rect, other: tg_rect) -> tg_rect;
}
unsafe extern "C" {
    pub fn tg_rect_expand_point(rect: tg_rect, point: tg_point) -> tg_rect;
}
unsafe extern "C" {
    pub fn tg_rect_center(rect: tg_rect) -> tg_point;
}
unsafe extern "C" {
    pub fn tg_rect_intersects_rect(a: tg_rect, b: tg_rect) -> bool;
}
unsafe extern "C" {
    pub fn tg_rect_intersects_point(a: tg_rect, b: tg_point) -> bool;
}
unsafe extern "C" {
    pub fn tg_ring_new(points: *const tg_point, npoints: ::std::os::raw::c_int) -> *mut tg_ring;
}
unsafe extern "C" {
    pub fn tg_ring_new_ix(
        points: *const tg_point,
        npoints: ::std::os::raw::c_int,
        ix: tg_index,
    ) -> *mut tg_ring;
}
unsafe extern "C" {
    pub fn tg_ring_free(ring: *mut tg_ring);
}
unsafe extern "C" {
    pub fn tg_ring_clone(ring: *const tg_ring) -> *mut tg_ring;
}
unsafe extern "C" {
    pub fn tg_ring_copy(ring: *const tg_ring) -> *mut tg_ring;
}
unsafe extern "C" {
    pub fn tg_ring_memsize(ring: *const tg_ring) -> usize;
}
unsafe extern "C" {
    pub fn tg_ring_rect(ring: *const tg_ring) -> tg_rect;
}
unsafe extern "C" {
    pub fn tg_ring_num_points(ring: *const tg_ring) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tg_ring_point_at(ring: *const tg_ring, index: ::std::os::raw::c_int) -> tg_point;
}
unsafe extern "C" {
    pub fn tg_ring_points(ring: *const tg_ring) -> *const tg_point;
}
unsafe extern "C" {
    pub fn tg_ring_num_segments(ring: *const tg_ring) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tg_ring_segment_at(ring: *const tg_ring, index: ::std::os::raw::c_int) -> tg_segment;
}
unsafe extern "C" {
    pub fn tg_ring_convex(ring: *const tg_ring) -> bool;
}
unsafe extern "C" {
    pub fn tg_ring_clockwise(ring: *const tg_ring) -> bool;
}
unsafe extern "C" {
    pub fn tg_ring_index_spread(ring: *const tg_ring) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tg_ring_index_num_levels(ring: *const tg_ring) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tg_ring_index_level_num_rects(
        ring: *const tg_ring,
        levelidx: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tg_ring_index_level_rect(
        ring: *const tg_ring,
        levelidx: ::std::os::raw::c_int,
        rectidx: ::std::os::raw::c_int,
    ) -> tg_rect;
}
unsafe extern "C" {
    pub fn tg_ring_nearest_segment(
        ring: *const tg_ring,
        rect_dist: ::std::option::Option<
            unsafe extern "C" fn(
                rect: tg_rect,
                more: *mut ::std::os::raw::c_int,
                udata: *mut ::std::os::raw::c_void,
            ) -> f64,
        >,
        seg_dist: ::std::option::Option<
            unsafe extern "C" fn(
                seg: tg_segment,
                more: *mut ::std::os::raw::c_int,
                udata: *mut ::std::os::raw::c_void,
            ) -> f64,
        >,
        iter: ::std::option::Option<
            unsafe extern "C" fn(
                seg: tg_segment,
                dist: f64,
                index: ::std::os::raw::c_int,
                udata: *mut ::std::os::raw::c_void,
            ) -> bool,
        >,
        udata: *mut ::std::os::raw::c_void,
    ) -> bool;
}
unsafe extern "C" {
    pub fn tg_ring_line_search(
        a: *const tg_ring,
        b: *const tg_line,
        iter: ::std::option::Option<
            unsafe extern "C" fn(
                aseg: tg_segment,
                aidx: ::std::os::raw::c_int,
                bseg: tg_segment,
                bidx: ::std::os::raw::c_int,
                udata: *mut ::std::os::raw::c_void,
            ) -> bool,
        >,
        udata: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn tg_ring_ring_search(
        a: *const tg_ring,
        b: *const tg_ring,
        iter: ::std::option::Option<
            unsafe extern "C" fn(
                aseg: tg_segment,
                aidx: ::std::os::raw::c_int,
                bseg: tg_segment,
                bidx: ::std::os::raw::c_int,
                udata: *mut ::std::os::raw::c_void,
            ) -> bool,
        >,
        udata: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn tg_ring_area(ring: *const tg_ring) -> f64;
}
unsafe extern "C" {
    pub fn tg_ring_perimeter(ring: *const tg_ring) -> f64;
}
unsafe extern "C" {
    pub fn tg_line_new(points: *const tg_point, npoints: ::std::os::raw::c_int) -> *mut tg_line;
}
unsafe extern "C" {
    pub fn tg_line_new_ix(
        points: *const tg_point,
        npoints: ::std::os::raw::c_int,
        ix: tg_index,
    ) -> *mut tg_line;
}
unsafe extern "C" {
    pub fn tg_line_free(line: *mut tg_line);
}
unsafe extern "C" {
    pub fn tg_line_clone(line: *const tg_line) -> *mut tg_line;
}
unsafe extern "C" {
    pub fn tg_line_copy(line: *const tg_line) -> *mut tg_line;
}
unsafe extern "C" {
    pub fn tg_line_memsize(line: *const tg_line) -> usize;
}
unsafe extern "C" {
    pub fn tg_line_rect(line: *const tg_line) -> tg_rect;
}
unsafe extern "C" {
    pub fn tg_line_num_points(line: *const tg_line) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tg_line_points(line: *const tg_line) -> *const tg_point;
}
unsafe extern "C" {
    pub fn tg_line_point_at(line: *const tg_line, index: ::std::os::raw::c_int) -> tg_point;
}
unsafe extern "C" {
    pub fn tg_line_num_segments(line: *const tg_line) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tg_line_segment_at(line: *const tg_line, index: ::std::os::raw::c_int) -> tg_segment;
}
unsafe extern "C" {
    pub fn tg_line_clockwise(line: *const tg_line) -> bool;
}
unsafe extern "C" {
    pub fn tg_line_index_spread(line: *const tg_line) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tg_line_index_num_levels(line: *const tg_line) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tg_line_index_level_num_rects(
        line: *const tg_line,
        levelidx: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tg_line_index_level_rect(
        line: *const tg_line,
        levelidx: ::std::os::raw::c_int,
        rectidx: ::std::os::raw::c_int,
    ) -> tg_rect;
}
unsafe extern "C" {
    pub fn tg_line_nearest_segment(
        line: *const tg_line,
        rect_dist: ::std::option::Option<
            unsafe extern "C" fn(
                rect: tg_rect,
                more: *mut ::std::os::raw::c_int,
                udata: *mut ::std::os::raw::c_void,
            ) -> f64,
        >,
        seg_dist: ::std::option::Option<
            unsafe extern "C" fn(
                seg: tg_segment,
                more: *mut ::std::os::raw::c_int,
                udata: *mut ::std::os::raw::c_void,
            ) -> f64,
        >,
        iter: ::std::option::Option<
            unsafe extern "C" fn(
                seg: tg_segment,
                dist: f64,
                index: ::std::os::raw::c_int,
                udata: *mut ::std::os::raw::c_void,
            ) -> bool,
        >,
        udata: *mut ::std::os::raw::c_void,
    ) -> bool;
}
unsafe extern "C" {
    pub fn tg_line_line_search(
        a: *const tg_line,
        b: *const tg_line,
        iter: ::std::option::Option<
            unsafe extern "C" fn(
                aseg: tg_segment,
                aidx: ::std::os::raw::c_int,
                bseg: tg_segment,
                bidx: ::std::os::raw::c_int,
                udata: *mut ::std::os::raw::c_void,
            ) -> bool,
        >,
        udata: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn tg_line_length(line: *const tg_line) -> f64;
}
unsafe extern "C" {
    pub fn tg_poly_new(
        exterior: *const tg_ring,
        holes: *const *const tg_ring,
        nholes: ::std::os::raw::c_int,
    ) -> *mut tg_poly;
}
unsafe extern "C" {
    pub fn tg_poly_free(poly: *mut tg_poly);
}
unsafe extern "C" {
    pub fn tg_poly_clone(poly: *const tg_poly) -> *mut tg_poly;
}
unsafe extern "C" {
    pub fn tg_poly_copy(poly: *const tg_poly) -> *mut tg_poly;
}
unsafe extern "C" {
    pub fn tg_poly_memsize(poly: *const tg_poly) -> usize;
}
unsafe extern "C" {
    pub fn tg_poly_exterior(poly: *const tg_poly) -> *const tg_ring;
}
unsafe extern "C" {
    pub fn tg_poly_num_holes(poly: *const tg_poly) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tg_poly_hole_at(poly: *const tg_poly, index: ::std::os::raw::c_int) -> *const tg_ring;
}
unsafe extern "C" {
    pub fn tg_poly_rect(poly: *const tg_poly) -> tg_rect;
}
unsafe extern "C" {
    pub fn tg_poly_clockwise(poly: *const tg_poly) -> bool;
}
unsafe extern "C" {
    pub fn tg_env_set_allocator(
        malloc: ::std::option::Option<
            unsafe extern "C" fn(arg1: usize) -> *mut ::std::os::raw::c_void,
        >,
        realloc: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: usize,
            ) -> *mut ::std::os::raw::c_void,
        >,
        free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    );
}
unsafe extern "C" {
    pub fn tg_env_set_index(ix: tg_index);
}
unsafe extern "C" {
    pub fn tg_env_set_index_spread(spread: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn tg_env_set_print_fixed_floats(print: bool);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
